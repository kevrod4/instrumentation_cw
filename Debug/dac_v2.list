
dac_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a30  0800ae08  0800ae08  0001ae08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e838  0801e838  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801e838  0801e838  0002e838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e840  0801e840  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e840  0801e840  0002e840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e844  0801e844  0002e844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801e848  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c468  200001fc  0801ea44  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001c664  0801ea44  0003c664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001560e  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031a1  00000000  00000000  0004583a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  000489e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  00049be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e65  00000000  00000000  0004ad00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160ec  00000000  00000000  0006fb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2739  00000000  00000000  00085c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0016838a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cb4  00000000  00000000  00168448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000330c  00000000  00000000  0016e0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800adec 	.word	0x0800adec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0800adec 	.word	0x0800adec

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2uiz>:
 8000ca8:	004a      	lsls	r2, r1, #1
 8000caa:	d211      	bcs.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cb0:	d211      	bcs.n	8000cd6 <__aeabi_d2uiz+0x2e>
 8000cb2:	d50d      	bpl.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cbc:	d40e      	bmi.n	8000cdc <__aeabi_d2uiz+0x34>
 8000cbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cca:	fa23 f002 	lsr.w	r0, r3, r2
 8000cce:	4770      	bx	lr
 8000cd0:	f04f 0000 	mov.w	r0, #0
 8000cd4:	4770      	bx	lr
 8000cd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cda:	d102      	bne.n	8000ce2 <__aeabi_d2uiz+0x3a>
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce0:	4770      	bx	lr
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2f>:
 8000ce8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cf0:	bf24      	itt	cs
 8000cf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cfa:	d90d      	bls.n	8000d18 <__aeabi_d2f+0x30>
 8000cfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d10:	bf08      	it	eq
 8000d12:	f020 0001 	biceq.w	r0, r0, #1
 8000d16:	4770      	bx	lr
 8000d18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d1c:	d121      	bne.n	8000d62 <__aeabi_d2f+0x7a>
 8000d1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d22:	bfbc      	itt	lt
 8000d24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d28:	4770      	bxlt	lr
 8000d2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d32:	f1c2 0218 	rsb	r2, r2, #24
 8000d36:	f1c2 0c20 	rsb	ip, r2, #32
 8000d3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d42:	bf18      	it	ne
 8000d44:	f040 0001 	orrne.w	r0, r0, #1
 8000d48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d54:	ea40 000c 	orr.w	r0, r0, ip
 8000d58:	fa23 f302 	lsr.w	r3, r3, r2
 8000d5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d60:	e7cc      	b.n	8000cfc <__aeabi_d2f+0x14>
 8000d62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d66:	d107      	bne.n	8000d78 <__aeabi_d2f+0x90>
 8000d68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d76:	4770      	bxne	lr
 8000d78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d9c:	f000 b974 	b.w	8001088 <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f806 	bl	8000db8 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__udivmoddi4>:
 8000db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dbc:	9d08      	ldr	r5, [sp, #32]
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	468e      	mov	lr, r1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d14d      	bne.n	8000e62 <__udivmoddi4+0xaa>
 8000dc6:	428a      	cmp	r2, r1
 8000dc8:	4694      	mov	ip, r2
 8000dca:	d969      	bls.n	8000ea0 <__udivmoddi4+0xe8>
 8000dcc:	fab2 f282 	clz	r2, r2
 8000dd0:	b152      	cbz	r2, 8000de8 <__udivmoddi4+0x30>
 8000dd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000dd6:	f1c2 0120 	rsb	r1, r2, #32
 8000dda:	fa20 f101 	lsr.w	r1, r0, r1
 8000dde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de2:	ea41 0e03 	orr.w	lr, r1, r3
 8000de6:	4094      	lsls	r4, r2
 8000de8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dec:	0c21      	lsrs	r1, r4, #16
 8000dee:	fbbe f6f8 	udiv	r6, lr, r8
 8000df2:	fa1f f78c 	uxth.w	r7, ip
 8000df6:	fb08 e316 	mls	r3, r8, r6, lr
 8000dfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dfe:	fb06 f107 	mul.w	r1, r6, r7
 8000e02:	4299      	cmp	r1, r3
 8000e04:	d90a      	bls.n	8000e1c <__udivmoddi4+0x64>
 8000e06:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e0e:	f080 811f 	bcs.w	8001050 <__udivmoddi4+0x298>
 8000e12:	4299      	cmp	r1, r3
 8000e14:	f240 811c 	bls.w	8001050 <__udivmoddi4+0x298>
 8000e18:	3e02      	subs	r6, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1a5b      	subs	r3, r3, r1
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e24:	fb08 3310 	mls	r3, r8, r0, r3
 8000e28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e2c:	fb00 f707 	mul.w	r7, r0, r7
 8000e30:	42a7      	cmp	r7, r4
 8000e32:	d90a      	bls.n	8000e4a <__udivmoddi4+0x92>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e3c:	f080 810a 	bcs.w	8001054 <__udivmoddi4+0x29c>
 8000e40:	42a7      	cmp	r7, r4
 8000e42:	f240 8107 	bls.w	8001054 <__udivmoddi4+0x29c>
 8000e46:	4464      	add	r4, ip
 8000e48:	3802      	subs	r0, #2
 8000e4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e4e:	1be4      	subs	r4, r4, r7
 8000e50:	2600      	movs	r6, #0
 8000e52:	b11d      	cbz	r5, 8000e5c <__udivmoddi4+0xa4>
 8000e54:	40d4      	lsrs	r4, r2
 8000e56:	2300      	movs	r3, #0
 8000e58:	e9c5 4300 	strd	r4, r3, [r5]
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d909      	bls.n	8000e7a <__udivmoddi4+0xc2>
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	f000 80ef 	beq.w	800104a <__udivmoddi4+0x292>
 8000e6c:	2600      	movs	r6, #0
 8000e6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e72:	4630      	mov	r0, r6
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	fab3 f683 	clz	r6, r3
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	d14a      	bne.n	8000f18 <__udivmoddi4+0x160>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d302      	bcc.n	8000e8c <__udivmoddi4+0xd4>
 8000e86:	4282      	cmp	r2, r0
 8000e88:	f200 80f9 	bhi.w	800107e <__udivmoddi4+0x2c6>
 8000e8c:	1a84      	subs	r4, r0, r2
 8000e8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e92:	2001      	movs	r0, #1
 8000e94:	469e      	mov	lr, r3
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d0e0      	beq.n	8000e5c <__udivmoddi4+0xa4>
 8000e9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e9e:	e7dd      	b.n	8000e5c <__udivmoddi4+0xa4>
 8000ea0:	b902      	cbnz	r2, 8000ea4 <__udivmoddi4+0xec>
 8000ea2:	deff      	udf	#255	; 0xff
 8000ea4:	fab2 f282 	clz	r2, r2
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	f040 8092 	bne.w	8000fd2 <__udivmoddi4+0x21a>
 8000eae:	eba1 010c 	sub.w	r1, r1, ip
 8000eb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb6:	fa1f fe8c 	uxth.w	lr, ip
 8000eba:	2601      	movs	r6, #1
 8000ebc:	0c20      	lsrs	r0, r4, #16
 8000ebe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ec2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ec6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eca:	fb0e f003 	mul.w	r0, lr, r3
 8000ece:	4288      	cmp	r0, r1
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x12c>
 8000ed2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000eda:	d202      	bcs.n	8000ee2 <__udivmoddi4+0x12a>
 8000edc:	4288      	cmp	r0, r1
 8000ede:	f200 80cb 	bhi.w	8001078 <__udivmoddi4+0x2c0>
 8000ee2:	4643      	mov	r3, r8
 8000ee4:	1a09      	subs	r1, r1, r0
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eec:	fb07 1110 	mls	r1, r7, r0, r1
 8000ef0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ef4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x156>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x154>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	f200 80bb 	bhi.w	8001082 <__udivmoddi4+0x2ca>
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	eba4 040e 	sub.w	r4, r4, lr
 8000f12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f16:	e79c      	b.n	8000e52 <__udivmoddi4+0x9a>
 8000f18:	f1c6 0720 	rsb	r7, r6, #32
 8000f1c:	40b3      	lsls	r3, r6
 8000f1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f26:	fa20 f407 	lsr.w	r4, r0, r7
 8000f2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f2e:	431c      	orrs	r4, r3
 8000f30:	40f9      	lsrs	r1, r7
 8000f32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f36:	fa00 f306 	lsl.w	r3, r0, r6
 8000f3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f3e:	0c20      	lsrs	r0, r4, #16
 8000f40:	fa1f fe8c 	uxth.w	lr, ip
 8000f44:	fb09 1118 	mls	r1, r9, r8, r1
 8000f48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f50:	4288      	cmp	r0, r1
 8000f52:	fa02 f206 	lsl.w	r2, r2, r6
 8000f56:	d90b      	bls.n	8000f70 <__udivmoddi4+0x1b8>
 8000f58:	eb1c 0101 	adds.w	r1, ip, r1
 8000f5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f60:	f080 8088 	bcs.w	8001074 <__udivmoddi4+0x2bc>
 8000f64:	4288      	cmp	r0, r1
 8000f66:	f240 8085 	bls.w	8001074 <__udivmoddi4+0x2bc>
 8000f6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	1a09      	subs	r1, r1, r0
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f78:	fb09 1110 	mls	r1, r9, r0, r1
 8000f7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f84:	458e      	cmp	lr, r1
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x1e2>
 8000f88:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f90:	d26c      	bcs.n	800106c <__udivmoddi4+0x2b4>
 8000f92:	458e      	cmp	lr, r1
 8000f94:	d96a      	bls.n	800106c <__udivmoddi4+0x2b4>
 8000f96:	3802      	subs	r0, #2
 8000f98:	4461      	add	r1, ip
 8000f9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000fa2:	eba1 010e 	sub.w	r1, r1, lr
 8000fa6:	42a1      	cmp	r1, r4
 8000fa8:	46c8      	mov	r8, r9
 8000faa:	46a6      	mov	lr, r4
 8000fac:	d356      	bcc.n	800105c <__udivmoddi4+0x2a4>
 8000fae:	d053      	beq.n	8001058 <__udivmoddi4+0x2a0>
 8000fb0:	b15d      	cbz	r5, 8000fca <__udivmoddi4+0x212>
 8000fb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fba:	fa01 f707 	lsl.w	r7, r1, r7
 8000fbe:	fa22 f306 	lsr.w	r3, r2, r6
 8000fc2:	40f1      	lsrs	r1, r6
 8000fc4:	431f      	orrs	r7, r3
 8000fc6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fca:	2600      	movs	r6, #0
 8000fcc:	4631      	mov	r1, r6
 8000fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd2:	f1c2 0320 	rsb	r3, r2, #32
 8000fd6:	40d8      	lsrs	r0, r3
 8000fd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fdc:	fa21 f303 	lsr.w	r3, r1, r3
 8000fe0:	4091      	lsls	r1, r2
 8000fe2:	4301      	orrs	r1, r0
 8000fe4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe8:	fa1f fe8c 	uxth.w	lr, ip
 8000fec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ff0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ff4:	0c0b      	lsrs	r3, r1, #16
 8000ff6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ffa:	fb00 f60e 	mul.w	r6, r0, lr
 8000ffe:	429e      	cmp	r6, r3
 8001000:	fa04 f402 	lsl.w	r4, r4, r2
 8001004:	d908      	bls.n	8001018 <__udivmoddi4+0x260>
 8001006:	eb1c 0303 	adds.w	r3, ip, r3
 800100a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800100e:	d22f      	bcs.n	8001070 <__udivmoddi4+0x2b8>
 8001010:	429e      	cmp	r6, r3
 8001012:	d92d      	bls.n	8001070 <__udivmoddi4+0x2b8>
 8001014:	3802      	subs	r0, #2
 8001016:	4463      	add	r3, ip
 8001018:	1b9b      	subs	r3, r3, r6
 800101a:	b289      	uxth	r1, r1
 800101c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001020:	fb07 3316 	mls	r3, r7, r6, r3
 8001024:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001028:	fb06 f30e 	mul.w	r3, r6, lr
 800102c:	428b      	cmp	r3, r1
 800102e:	d908      	bls.n	8001042 <__udivmoddi4+0x28a>
 8001030:	eb1c 0101 	adds.w	r1, ip, r1
 8001034:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001038:	d216      	bcs.n	8001068 <__udivmoddi4+0x2b0>
 800103a:	428b      	cmp	r3, r1
 800103c:	d914      	bls.n	8001068 <__udivmoddi4+0x2b0>
 800103e:	3e02      	subs	r6, #2
 8001040:	4461      	add	r1, ip
 8001042:	1ac9      	subs	r1, r1, r3
 8001044:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001048:	e738      	b.n	8000ebc <__udivmoddi4+0x104>
 800104a:	462e      	mov	r6, r5
 800104c:	4628      	mov	r0, r5
 800104e:	e705      	b.n	8000e5c <__udivmoddi4+0xa4>
 8001050:	4606      	mov	r6, r0
 8001052:	e6e3      	b.n	8000e1c <__udivmoddi4+0x64>
 8001054:	4618      	mov	r0, r3
 8001056:	e6f8      	b.n	8000e4a <__udivmoddi4+0x92>
 8001058:	454b      	cmp	r3, r9
 800105a:	d2a9      	bcs.n	8000fb0 <__udivmoddi4+0x1f8>
 800105c:	ebb9 0802 	subs.w	r8, r9, r2
 8001060:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001064:	3801      	subs	r0, #1
 8001066:	e7a3      	b.n	8000fb0 <__udivmoddi4+0x1f8>
 8001068:	4646      	mov	r6, r8
 800106a:	e7ea      	b.n	8001042 <__udivmoddi4+0x28a>
 800106c:	4620      	mov	r0, r4
 800106e:	e794      	b.n	8000f9a <__udivmoddi4+0x1e2>
 8001070:	4640      	mov	r0, r8
 8001072:	e7d1      	b.n	8001018 <__udivmoddi4+0x260>
 8001074:	46d0      	mov	r8, sl
 8001076:	e77b      	b.n	8000f70 <__udivmoddi4+0x1b8>
 8001078:	3b02      	subs	r3, #2
 800107a:	4461      	add	r1, ip
 800107c:	e732      	b.n	8000ee4 <__udivmoddi4+0x12c>
 800107e:	4630      	mov	r0, r6
 8001080:	e709      	b.n	8000e96 <__udivmoddi4+0xde>
 8001082:	4464      	add	r4, ip
 8001084:	3802      	subs	r0, #2
 8001086:	e742      	b.n	8000f0e <__udivmoddi4+0x156>

08001088 <__aeabi_idiv0>:
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <My_TIM2_Init>:
static void MX_DAC_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

static void My_TIM2_Init(int period){
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]


	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]

	  htim2.Instance = TIM2;
 80010ac:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <My_TIM2_Init+0x9c>)
 80010ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b2:	601a      	str	r2, [r3, #0]
	  htim2.Init.Prescaler = 0;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <My_TIM2_Init+0x9c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <My_TIM2_Init+0x9c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
	  htim2.Init.Period = period - 1;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <My_TIM2_Init+0x9c>)
 80010c8:	60da      	str	r2, [r3, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <My_TIM2_Init+0x9c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <My_TIM2_Init+0x9c>)
 80010d2:	2280      	movs	r2, #128	; 0x80
 80010d4:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010d6:	4814      	ldr	r0, [pc, #80]	; (8001128 <My_TIM2_Init+0x9c>)
 80010d8:	f003 ffe2 	bl	80050a0 <HAL_TIM_Base_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <My_TIM2_Init+0x5a>
	  {
	    Error_Handler();
 80010e2:	f000 ffb9 	bl	8002058 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ea:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <My_TIM2_Init+0x9c>)
 80010f4:	f004 f9bb 	bl	800546e <HAL_TIM_ConfigClockSource>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <My_TIM2_Init+0x76>
	  {
	    Error_Handler();
 80010fe:	f000 ffab 	bl	8002058 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001102:	2320      	movs	r3, #32
 8001104:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <My_TIM2_Init+0x9c>)
 8001112:	f004 fbdf 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <My_TIM2_Init+0x94>
	  {
	    Error_Handler();
 800111c:	f000 ff9c 	bl	8002058 <Error_Handler>
	  }
}
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000334 	.word	0x20000334

0800112c <My_TIM3_Init>:


static void My_TIM3_Init(int period)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <My_TIM3_Init+0x9c>)
 800114e:	4a1f      	ldr	r2, [pc, #124]	; (80011cc <My_TIM3_Init+0xa0>)
 8001150:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <My_TIM3_Init+0x9c>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <My_TIM3_Init+0x9c>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = period - 1;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3b01      	subs	r3, #1
 8001162:	461a      	mov	r2, r3
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <My_TIM3_Init+0x9c>)
 8001166:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <My_TIM3_Init+0x9c>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <My_TIM3_Init+0x9c>)
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001174:	4814      	ldr	r0, [pc, #80]	; (80011c8 <My_TIM3_Init+0x9c>)
 8001176:	f003 ff93 	bl	80050a0 <HAL_TIM_Base_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <My_TIM3_Init+0x58>
  {
    Error_Handler();
 8001180:	f000 ff6a 	bl	8002058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001188:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	4619      	mov	r1, r3
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <My_TIM3_Init+0x9c>)
 8001192:	f004 f96c 	bl	800546e <HAL_TIM_ConfigClockSource>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <My_TIM3_Init+0x74>
  {
    Error_Handler();
 800119c:	f000 ff5c 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011a0:	2320      	movs	r3, #32
 80011a2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <My_TIM3_Init+0x9c>)
 80011b0:	f004 fb90 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <My_TIM3_Init+0x92>
  {
    Error_Handler();
 80011ba:	f000 ff4d 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000037c 	.word	0x2000037c
 80011cc:	40000400 	.word	0x40000400

080011d0 <sine_generator>:
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
//
//
//}

void sine_generator(){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
	for (int i=0; i<CURRENT_SINE_ARR; i++){
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	e035      	b.n	8001248 <sine_generator+0x78>
		sine_values[i] = ((sin(i*2*PI/CURRENT_SINE_ARR) + 1)*(4095/2));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001260 <sine_generator+0x90>
 80011ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001264 <sine_generator+0x94>
 80011f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011f8:	ee16 0a90 	vmov	r0, s13
 80011fc:	f7ff fa24 	bl	8000648 <__aeabi_f2d>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	ec43 2b10 	vmov	d0, r2, r3
 8001208:	f008 fd82 	bl	8009d10 <sin>
 800120c:	ec51 0b10 	vmov	r0, r1, d0
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <sine_generator+0x98>)
 8001216:	f7ff f8b9 	bl	800038c <__adddf3>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	a30d      	add	r3, pc, #52	; (adr r3, 8001258 <sine_generator+0x88>)
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	f7ff fa66 	bl	80006f8 <__aeabi_dmul>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fd38 	bl	8000ca8 <__aeabi_d2uiz>
 8001238:	4602      	mov	r2, r0
 800123a:	490c      	ldr	r1, [pc, #48]	; (800126c <sine_generator+0x9c>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<CURRENT_SINE_ARR; i++){
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3301      	adds	r3, #1
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b63      	cmp	r3, #99	; 0x63
 800124c:	ddc6      	ble.n	80011dc <sine_generator+0xc>
	}
}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	00000000 	.word	0x00000000
 800125c:	409ffc00 	.word	0x409ffc00
 8001260:	40490fdb 	.word	0x40490fdb
 8001264:	42c80000 	.word	0x42c80000
 8001268:	3ff00000 	.word	0x3ff00000
 800126c:	2001c4bc 	.word	0x2001c4bc

08001270 <path_select>:

void path_select(uint16_t path_hold) //0 for Voltage; 1 for Current
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
	if(path_hold==0){
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d106      	bne.n	800128e <path_select+0x1e>
		//Enter PIN HERE
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001286:	4807      	ldr	r0, [pc, #28]	; (80012a4 <path_select+0x34>)
 8001288:	f003 f8b8 	bl	80043fc <HAL_GPIO_WritePin>
	}
	else{
		//Enter PIN HERE
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800128c:	e005      	b.n	800129a <path_select+0x2a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <path_select+0x34>)
 8001296:	f003 f8b1 	bl	80043fc <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40020400 	.word	0x40020400

080012a8 <frequency_select>:

void frequency_select(uint16_t frequency_hold)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
	  switch(frequency_hold){
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	2b07      	cmp	r3, #7
 80012b6:	f200 80dd 	bhi.w	8001474 <frequency_select+0x1cc>
 80012ba:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <frequency_select+0x18>)
 80012bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c0:	080012e1 	.word	0x080012e1
 80012c4:	08001311 	.word	0x08001311
 80012c8:	08001347 	.word	0x08001347
 80012cc:	0800137d 	.word	0x0800137d
 80012d0:	080013ab 	.word	0x080013ab
 80012d4:	080013df 	.word	0x080013df
 80012d8:	08001411 	.word	0x08001411
 80012dc:	08001443 	.word	0x08001443
	  case 0: //f = 100Hz
		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80012e0:	2100      	movs	r1, #0
 80012e2:	4866      	ldr	r0, [pc, #408]	; (800147c <frequency_select+0x1d4>)
 80012e4:	f002 f9d6 	bl	8003694 <HAL_DAC_Stop_DMA>
		  HAL_TIM_Base_Stop(&htim2);
 80012e8:	4865      	ldr	r0, [pc, #404]	; (8001480 <frequency_select+0x1d8>)
 80012ea:	f003 ff91 	bl	8005210 <HAL_TIM_Base_Stop>
		  My_TIM2_Init(9000);
 80012ee:	f242 3028 	movw	r0, #9000	; 0x2328
 80012f2:	f7ff fecb 	bl	800108c <My_TIM2_Init>
		  My_TIM3_Init(45000);
 80012f6:	f64a 70c8 	movw	r0, #45000	; 0xafc8
 80012fa:	f7ff ff17 	bl	800112c <My_TIM3_Init>
//		  __HAL_TIM_SET_PRESCALER(&htim2, 10-1);
//		  __HAL_TIM_SET_AUTORELOAD(&htim2, 900-1);
		  //HAL_TIM_Base_Start(&htim2);
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_values, CURRENT_SINE_ARR, DAC_ALIGN_12B_R);
 80012fe:	2300      	movs	r3, #0
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2364      	movs	r3, #100	; 0x64
 8001304:	4a5f      	ldr	r2, [pc, #380]	; (8001484 <frequency_select+0x1dc>)
 8001306:	2100      	movs	r1, #0
 8001308:	485c      	ldr	r0, [pc, #368]	; (800147c <frequency_select+0x1d4>)
 800130a:	f002 f8f5 	bl	80034f8 <HAL_DAC_Start_DMA>
		  break;
 800130e:	e0b1      	b.n	8001474 <frequency_select+0x1cc>
	  case 1: // f = 141.28Hz
		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001310:	2100      	movs	r1, #0
 8001312:	485a      	ldr	r0, [pc, #360]	; (800147c <frequency_select+0x1d4>)
 8001314:	f002 f9be 	bl	8003694 <HAL_DAC_Stop_DMA>
		  HAL_TIM_Base_Stop(&htim2);
 8001318:	4859      	ldr	r0, [pc, #356]	; (8001480 <frequency_select+0x1d8>)
 800131a:	f003 ff79 	bl	8005210 <HAL_TIM_Base_Stop>
		  My_TIM2_Init(6370);
 800131e:	f641 00e2 	movw	r0, #6370	; 0x18e2
 8001322:	f7ff feb3 	bl	800108c <My_TIM2_Init>
		  My_TIM3_Init(31850);
 8001326:	f647 406a 	movw	r0, #31850	; 0x7c6a
 800132a:	f7ff feff 	bl	800112c <My_TIM3_Init>
//		  __HAL_TIM_SET_PRESCALER(&htim2, 10-1);
//		  __HAL_TIM_SET_AUTORELOAD(&htim2, 637-1);
		  HAL_TIM_Base_Start(&htim2);
 800132e:	4854      	ldr	r0, [pc, #336]	; (8001480 <frequency_select+0x1d8>)
 8001330:	f003 ff06 	bl	8005140 <HAL_TIM_Base_Start>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_values, CURRENT_SINE_ARR, DAC_ALIGN_12B_R);
 8001334:	2300      	movs	r3, #0
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2364      	movs	r3, #100	; 0x64
 800133a:	4a52      	ldr	r2, [pc, #328]	; (8001484 <frequency_select+0x1dc>)
 800133c:	2100      	movs	r1, #0
 800133e:	484f      	ldr	r0, [pc, #316]	; (800147c <frequency_select+0x1d4>)
 8001340:	f002 f8da 	bl	80034f8 <HAL_DAC_Start_DMA>
		  break;
 8001344:	e096      	b.n	8001474 <frequency_select+0x1cc>
	  case 2: // f = 500Hz
		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001346:	2100      	movs	r1, #0
 8001348:	484c      	ldr	r0, [pc, #304]	; (800147c <frequency_select+0x1d4>)
 800134a:	f002 f9a3 	bl	8003694 <HAL_DAC_Stop_DMA>
		  HAL_TIM_Base_Stop(&htim2);
 800134e:	484c      	ldr	r0, [pc, #304]	; (8001480 <frequency_select+0x1d8>)
 8001350:	f003 ff5e 	bl	8005210 <HAL_TIM_Base_Stop>
		  My_TIM2_Init(1800);
 8001354:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8001358:	f7ff fe98 	bl	800108c <My_TIM2_Init>
		  My_TIM3_Init(9000);
 800135c:	f242 3028 	movw	r0, #9000	; 0x2328
 8001360:	f7ff fee4 	bl	800112c <My_TIM3_Init>
//		  __HAL_TIM_SET_PRESCALER(&htim2, 9-1);
//		  __HAL_TIM_SET_AUTORELOAD(&htim2, 200-1);
		  HAL_TIM_Base_Start(&htim2);
 8001364:	4846      	ldr	r0, [pc, #280]	; (8001480 <frequency_select+0x1d8>)
 8001366:	f003 feeb 	bl	8005140 <HAL_TIM_Base_Start>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_values, CURRENT_SINE_ARR, DAC_ALIGN_12B_R);
 800136a:	2300      	movs	r3, #0
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2364      	movs	r3, #100	; 0x64
 8001370:	4a44      	ldr	r2, [pc, #272]	; (8001484 <frequency_select+0x1dc>)
 8001372:	2100      	movs	r1, #0
 8001374:	4841      	ldr	r0, [pc, #260]	; (800147c <frequency_select+0x1d4>)
 8001376:	f002 f8bf 	bl	80034f8 <HAL_DAC_Start_DMA>
		  break;
 800137a:	e07b      	b.n	8001474 <frequency_select+0x1cc>
	  case 3: // f = 1kHz
		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800137c:	2100      	movs	r1, #0
 800137e:	483f      	ldr	r0, [pc, #252]	; (800147c <frequency_select+0x1d4>)
 8001380:	f002 f988 	bl	8003694 <HAL_DAC_Stop_DMA>
		  HAL_TIM_Base_Stop(&htim2);
 8001384:	483e      	ldr	r0, [pc, #248]	; (8001480 <frequency_select+0x1d8>)
 8001386:	f003 ff43 	bl	8005210 <HAL_TIM_Base_Stop>
		  My_TIM2_Init(900);
 800138a:	f44f 7061 	mov.w	r0, #900	; 0x384
 800138e:	f7ff fe7d 	bl	800108c <My_TIM2_Init>
		  //My_TIM3_Init(4500);
//		  __HAL_TIM_SET_PRESCALER(&htim2, 9-1);
//		  __HAL_TIM_SET_AUTORELOAD(&htim2, 100-1);
		  HAL_TIM_Base_Start(&htim2);
 8001392:	483b      	ldr	r0, [pc, #236]	; (8001480 <frequency_select+0x1d8>)
 8001394:	f003 fed4 	bl	8005140 <HAL_TIM_Base_Start>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_values, CURRENT_SINE_ARR, DAC_ALIGN_12B_R);
 8001398:	2300      	movs	r3, #0
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2364      	movs	r3, #100	; 0x64
 800139e:	4a39      	ldr	r2, [pc, #228]	; (8001484 <frequency_select+0x1dc>)
 80013a0:	2100      	movs	r1, #0
 80013a2:	4836      	ldr	r0, [pc, #216]	; (800147c <frequency_select+0x1d4>)
 80013a4:	f002 f8a8 	bl	80034f8 <HAL_DAC_Start_DMA>
		  break;
 80013a8:	e064      	b.n	8001474 <frequency_select+0x1cc>
	  case 4: // f = 10kHz
		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80013aa:	2100      	movs	r1, #0
 80013ac:	4833      	ldr	r0, [pc, #204]	; (800147c <frequency_select+0x1d4>)
 80013ae:	f002 f971 	bl	8003694 <HAL_DAC_Stop_DMA>
		  HAL_TIM_Base_Stop(&htim2);
 80013b2:	4833      	ldr	r0, [pc, #204]	; (8001480 <frequency_select+0x1d8>)
 80013b4:	f003 ff2c 	bl	8005210 <HAL_TIM_Base_Stop>
		  My_TIM2_Init(90);
 80013b8:	205a      	movs	r0, #90	; 0x5a
 80013ba:	f7ff fe67 	bl	800108c <My_TIM2_Init>
		  My_TIM3_Init(450);
 80013be:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80013c2:	f7ff feb3 	bl	800112c <My_TIM3_Init>
//		  __HAL_TIM_SET_PRESCALER(&htim2, 9-1);
//		  __HAL_TIM_SET_AUTORELOAD(&htim2, 10-1);
		  HAL_TIM_Base_Start(&htim2);
 80013c6:	482e      	ldr	r0, [pc, #184]	; (8001480 <frequency_select+0x1d8>)
 80013c8:	f003 feba 	bl	8005140 <HAL_TIM_Base_Start>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_values, CURRENT_SINE_ARR, DAC_ALIGN_12B_R);
 80013cc:	2300      	movs	r3, #0
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2364      	movs	r3, #100	; 0x64
 80013d2:	4a2c      	ldr	r2, [pc, #176]	; (8001484 <frequency_select+0x1dc>)
 80013d4:	2100      	movs	r1, #0
 80013d6:	4829      	ldr	r0, [pc, #164]	; (800147c <frequency_select+0x1d4>)
 80013d8:	f002 f88e 	bl	80034f8 <HAL_DAC_Start_DMA>
		  break;
 80013dc:	e04a      	b.n	8001474 <frequency_select+0x1cc>
	  case 5: // f = 25kHz
		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80013de:	2100      	movs	r1, #0
 80013e0:	4826      	ldr	r0, [pc, #152]	; (800147c <frequency_select+0x1d4>)
 80013e2:	f002 f957 	bl	8003694 <HAL_DAC_Stop_DMA>
		  HAL_TIM_Base_Stop(&htim2);
 80013e6:	4826      	ldr	r0, [pc, #152]	; (8001480 <frequency_select+0x1d8>)
 80013e8:	f003 ff12 	bl	8005210 <HAL_TIM_Base_Stop>
		  My_TIM2_Init(36);
 80013ec:	2024      	movs	r0, #36	; 0x24
 80013ee:	f7ff fe4d 	bl	800108c <My_TIM2_Init>
		  My_TIM3_Init(180);
 80013f2:	20b4      	movs	r0, #180	; 0xb4
 80013f4:	f7ff fe9a 	bl	800112c <My_TIM3_Init>
//		  __HAL_TIM_SET_PRESCALER(&htim2, 6-1);
//		  __HAL_TIM_SET_AUTORELOAD(&htim2, 6-1);
		  HAL_TIM_Base_Start(&htim2);
 80013f8:	4821      	ldr	r0, [pc, #132]	; (8001480 <frequency_select+0x1d8>)
 80013fa:	f003 fea1 	bl	8005140 <HAL_TIM_Base_Start>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_values, CURRENT_SINE_ARR, DAC_ALIGN_12B_R);
 80013fe:	2300      	movs	r3, #0
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2364      	movs	r3, #100	; 0x64
 8001404:	4a1f      	ldr	r2, [pc, #124]	; (8001484 <frequency_select+0x1dc>)
 8001406:	2100      	movs	r1, #0
 8001408:	481c      	ldr	r0, [pc, #112]	; (800147c <frequency_select+0x1d4>)
 800140a:	f002 f875 	bl	80034f8 <HAL_DAC_Start_DMA>
		  break;
 800140e:	e031      	b.n	8001474 <frequency_select+0x1cc>
	  case 6: // f = 75Hz
		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001410:	2100      	movs	r1, #0
 8001412:	481a      	ldr	r0, [pc, #104]	; (800147c <frequency_select+0x1d4>)
 8001414:	f002 f93e 	bl	8003694 <HAL_DAC_Stop_DMA>
		  HAL_TIM_Base_Stop(&htim2);
 8001418:	4819      	ldr	r0, [pc, #100]	; (8001480 <frequency_select+0x1d8>)
 800141a:	f003 fef9 	bl	8005210 <HAL_TIM_Base_Stop>
		  My_TIM2_Init(12);
 800141e:	200c      	movs	r0, #12
 8001420:	f7ff fe34 	bl	800108c <My_TIM2_Init>
		  My_TIM3_Init(60);
 8001424:	203c      	movs	r0, #60	; 0x3c
 8001426:	f7ff fe81 	bl	800112c <My_TIM3_Init>
//		  __HAL_TIM_SET_PRESCALER(&htim2, 4-1);
//		  __HAL_TIM_SET_AUTORELOAD(&htim2, 3-1);
		  HAL_TIM_Base_Start(&htim2);
 800142a:	4815      	ldr	r0, [pc, #84]	; (8001480 <frequency_select+0x1d8>)
 800142c:	f003 fe88 	bl	8005140 <HAL_TIM_Base_Start>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_values, CURRENT_SINE_ARR, DAC_ALIGN_12B_R);
 8001430:	2300      	movs	r3, #0
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2364      	movs	r3, #100	; 0x64
 8001436:	4a13      	ldr	r2, [pc, #76]	; (8001484 <frequency_select+0x1dc>)
 8001438:	2100      	movs	r1, #0
 800143a:	4810      	ldr	r0, [pc, #64]	; (800147c <frequency_select+0x1d4>)
 800143c:	f002 f85c 	bl	80034f8 <HAL_DAC_Start_DMA>
		  break;
 8001440:	e018      	b.n	8001474 <frequency_select+0x1cc>
	  case 7: // f = 100kHz
		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001442:	2100      	movs	r1, #0
 8001444:	480d      	ldr	r0, [pc, #52]	; (800147c <frequency_select+0x1d4>)
 8001446:	f002 f925 	bl	8003694 <HAL_DAC_Stop_DMA>
		  HAL_TIM_Base_Stop(&htim2);
 800144a:	480d      	ldr	r0, [pc, #52]	; (8001480 <frequency_select+0x1d8>)
 800144c:	f003 fee0 	bl	8005210 <HAL_TIM_Base_Stop>
		  My_TIM2_Init(9);
 8001450:	2009      	movs	r0, #9
 8001452:	f7ff fe1b 	bl	800108c <My_TIM2_Init>
		  My_TIM3_Init(45);
 8001456:	202d      	movs	r0, #45	; 0x2d
 8001458:	f7ff fe68 	bl	800112c <My_TIM3_Init>
//		  __HAL_TIM_SET_PRESCALER(&htim2, 3-1);
//		  __HAL_TIM_SET_AUTORELOAD(&htim2, 3-1);
		  HAL_TIM_Base_Start(&htim2);
 800145c:	4808      	ldr	r0, [pc, #32]	; (8001480 <frequency_select+0x1d8>)
 800145e:	f003 fe6f 	bl	8005140 <HAL_TIM_Base_Start>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_values, CURRENT_SINE_ARR, DAC_ALIGN_12B_R);
 8001462:	2300      	movs	r3, #0
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2364      	movs	r3, #100	; 0x64
 8001468:	4a06      	ldr	r2, [pc, #24]	; (8001484 <frequency_select+0x1dc>)
 800146a:	2100      	movs	r1, #0
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <frequency_select+0x1d4>)
 800146e:	f002 f843 	bl	80034f8 <HAL_DAC_Start_DMA>
		  break;
 8001472:	bf00      	nop
	  }
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200002c0 	.word	0x200002c0
 8001480:	20000334 	.word	0x20000334
 8001484:	2001c4bc 	.word	0x2001c4bc

08001488 <resistor_select>:

void resistor_select(uint16_t resistor_hold)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
	switch (resistor_hold){
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	2b08      	cmp	r3, #8
 8001496:	f200 80cb 	bhi.w	8001630 <resistor_select+0x1a8>
 800149a:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <resistor_select+0x18>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	080014c5 	.word	0x080014c5
 80014a4:	080014f1 	.word	0x080014f1
 80014a8:	0800151d 	.word	0x0800151d
 80014ac:	08001549 	.word	0x08001549
 80014b0:	08001575 	.word	0x08001575
 80014b4:	080015a1 	.word	0x080015a1
 80014b8:	080015cd 	.word	0x080015cd
 80014bc:	080015f9 	.word	0x080015f9
 80014c0:	08001625 	.word	0x08001625
	case 0: //000
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  //Enable - Low Enable
 80014c4:	2200      	movs	r2, #0
 80014c6:	2110      	movs	r1, #16
 80014c8:	485b      	ldr	r0, [pc, #364]	; (8001638 <resistor_select+0x1b0>)
 80014ca:	f002 ff97 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); //S0
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d4:	4859      	ldr	r0, [pc, #356]	; (800163c <resistor_select+0x1b4>)
 80014d6:	f002 ff91 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);	// S1
 80014da:	2200      	movs	r2, #0
 80014dc:	2108      	movs	r1, #8
 80014de:	4856      	ldr	r0, [pc, #344]	; (8001638 <resistor_select+0x1b0>)
 80014e0:	f002 ff8c 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);	//S2
 80014e4:	2200      	movs	r2, #0
 80014e6:	2120      	movs	r1, #32
 80014e8:	4853      	ldr	r0, [pc, #332]	; (8001638 <resistor_select+0x1b0>)
 80014ea:	f002 ff87 	bl	80043fc <HAL_GPIO_WritePin>
		break;
 80014ee:	e09f      	b.n	8001630 <resistor_select+0x1a8>
	case 1: //001
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  //Enable - Low Enable
 80014f0:	2200      	movs	r2, #0
 80014f2:	2110      	movs	r1, #16
 80014f4:	4850      	ldr	r0, [pc, #320]	; (8001638 <resistor_select+0x1b0>)
 80014f6:	f002 ff81 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); //S0
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001500:	484e      	ldr	r0, [pc, #312]	; (800163c <resistor_select+0x1b4>)
 8001502:	f002 ff7b 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);	// S1
 8001506:	2200      	movs	r2, #0
 8001508:	2108      	movs	r1, #8
 800150a:	484b      	ldr	r0, [pc, #300]	; (8001638 <resistor_select+0x1b0>)
 800150c:	f002 ff76 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);	//S2
 8001510:	2200      	movs	r2, #0
 8001512:	2120      	movs	r1, #32
 8001514:	4848      	ldr	r0, [pc, #288]	; (8001638 <resistor_select+0x1b0>)
 8001516:	f002 ff71 	bl	80043fc <HAL_GPIO_WritePin>
		break;
 800151a:	e089      	b.n	8001630 <resistor_select+0x1a8>
	case 2: //010
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  //Enable - Low Enable
 800151c:	2200      	movs	r2, #0
 800151e:	2110      	movs	r1, #16
 8001520:	4845      	ldr	r0, [pc, #276]	; (8001638 <resistor_select+0x1b0>)
 8001522:	f002 ff6b 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); //S0
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152c:	4843      	ldr	r0, [pc, #268]	; (800163c <resistor_select+0x1b4>)
 800152e:	f002 ff65 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);	// S1
 8001532:	2201      	movs	r2, #1
 8001534:	2108      	movs	r1, #8
 8001536:	4840      	ldr	r0, [pc, #256]	; (8001638 <resistor_select+0x1b0>)
 8001538:	f002 ff60 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);	//S2
 800153c:	2200      	movs	r2, #0
 800153e:	2120      	movs	r1, #32
 8001540:	483d      	ldr	r0, [pc, #244]	; (8001638 <resistor_select+0x1b0>)
 8001542:	f002 ff5b 	bl	80043fc <HAL_GPIO_WritePin>
		break;
 8001546:	e073      	b.n	8001630 <resistor_select+0x1a8>
	case 3: //011
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  //Enable - Low Enable
 8001548:	2200      	movs	r2, #0
 800154a:	2110      	movs	r1, #16
 800154c:	483a      	ldr	r0, [pc, #232]	; (8001638 <resistor_select+0x1b0>)
 800154e:	f002 ff55 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); //S0
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001558:	4838      	ldr	r0, [pc, #224]	; (800163c <resistor_select+0x1b4>)
 800155a:	f002 ff4f 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);	// S1
 800155e:	2201      	movs	r2, #1
 8001560:	2108      	movs	r1, #8
 8001562:	4835      	ldr	r0, [pc, #212]	; (8001638 <resistor_select+0x1b0>)
 8001564:	f002 ff4a 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);	//S2
 8001568:	2200      	movs	r2, #0
 800156a:	2120      	movs	r1, #32
 800156c:	4832      	ldr	r0, [pc, #200]	; (8001638 <resistor_select+0x1b0>)
 800156e:	f002 ff45 	bl	80043fc <HAL_GPIO_WritePin>
		break;
 8001572:	e05d      	b.n	8001630 <resistor_select+0x1a8>
	case 4: //100
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  //Enable - Low Enable
 8001574:	2200      	movs	r2, #0
 8001576:	2110      	movs	r1, #16
 8001578:	482f      	ldr	r0, [pc, #188]	; (8001638 <resistor_select+0x1b0>)
 800157a:	f002 ff3f 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); //S0
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001584:	482d      	ldr	r0, [pc, #180]	; (800163c <resistor_select+0x1b4>)
 8001586:	f002 ff39 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);	// S1
 800158a:	2200      	movs	r2, #0
 800158c:	2108      	movs	r1, #8
 800158e:	482a      	ldr	r0, [pc, #168]	; (8001638 <resistor_select+0x1b0>)
 8001590:	f002 ff34 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);	//S2
 8001594:	2201      	movs	r2, #1
 8001596:	2120      	movs	r1, #32
 8001598:	4827      	ldr	r0, [pc, #156]	; (8001638 <resistor_select+0x1b0>)
 800159a:	f002 ff2f 	bl	80043fc <HAL_GPIO_WritePin>
		break;
 800159e:	e047      	b.n	8001630 <resistor_select+0x1a8>
	case 5:	//101
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  //Enable - Low Enable
 80015a0:	2200      	movs	r2, #0
 80015a2:	2110      	movs	r1, #16
 80015a4:	4824      	ldr	r0, [pc, #144]	; (8001638 <resistor_select+0x1b0>)
 80015a6:	f002 ff29 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); //S0
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b0:	4822      	ldr	r0, [pc, #136]	; (800163c <resistor_select+0x1b4>)
 80015b2:	f002 ff23 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);	// S1
 80015b6:	2200      	movs	r2, #0
 80015b8:	2108      	movs	r1, #8
 80015ba:	481f      	ldr	r0, [pc, #124]	; (8001638 <resistor_select+0x1b0>)
 80015bc:	f002 ff1e 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);	//S2
 80015c0:	2201      	movs	r2, #1
 80015c2:	2120      	movs	r1, #32
 80015c4:	481c      	ldr	r0, [pc, #112]	; (8001638 <resistor_select+0x1b0>)
 80015c6:	f002 ff19 	bl	80043fc <HAL_GPIO_WritePin>
		break;
 80015ca:	e031      	b.n	8001630 <resistor_select+0x1a8>
	case 6:	//110
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  //Enable - Low Enable
 80015cc:	2200      	movs	r2, #0
 80015ce:	2110      	movs	r1, #16
 80015d0:	4819      	ldr	r0, [pc, #100]	; (8001638 <resistor_select+0x1b0>)
 80015d2:	f002 ff13 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); //S0
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015dc:	4817      	ldr	r0, [pc, #92]	; (800163c <resistor_select+0x1b4>)
 80015de:	f002 ff0d 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);	// S1
 80015e2:	2201      	movs	r2, #1
 80015e4:	2108      	movs	r1, #8
 80015e6:	4814      	ldr	r0, [pc, #80]	; (8001638 <resistor_select+0x1b0>)
 80015e8:	f002 ff08 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);	//S2
 80015ec:	2201      	movs	r2, #1
 80015ee:	2120      	movs	r1, #32
 80015f0:	4811      	ldr	r0, [pc, #68]	; (8001638 <resistor_select+0x1b0>)
 80015f2:	f002 ff03 	bl	80043fc <HAL_GPIO_WritePin>
		break;
 80015f6:	e01b      	b.n	8001630 <resistor_select+0x1a8>
	case 7: //111
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  //Enable - Low Enable
 80015f8:	2200      	movs	r2, #0
 80015fa:	2110      	movs	r1, #16
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <resistor_select+0x1b0>)
 80015fe:	f002 fefd 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); //S0
 8001602:	2201      	movs	r2, #1
 8001604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <resistor_select+0x1b4>)
 800160a:	f002 fef7 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);	// S1
 800160e:	2201      	movs	r2, #1
 8001610:	2108      	movs	r1, #8
 8001612:	4809      	ldr	r0, [pc, #36]	; (8001638 <resistor_select+0x1b0>)
 8001614:	f002 fef2 	bl	80043fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);	//S2
 8001618:	2201      	movs	r2, #1
 800161a:	2120      	movs	r1, #32
 800161c:	4806      	ldr	r0, [pc, #24]	; (8001638 <resistor_select+0x1b0>)
 800161e:	f002 feed 	bl	80043fc <HAL_GPIO_WritePin>
		break;
 8001622:	e005      	b.n	8001630 <resistor_select+0x1a8>
	case 8: //No MUX, only f/b res 1Mohm
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);  //Enable - Low Enable
 8001624:	2201      	movs	r2, #1
 8001626:	2110      	movs	r1, #16
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <resistor_select+0x1b0>)
 800162a:	f002 fee7 	bl	80043fc <HAL_GPIO_WritePin>
	}
}
 800162e:	e7ff      	b.n	8001630 <resistor_select+0x1a8>
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40020400 	.word	0x40020400
 800163c:	40020000 	.word	0x40020000

08001640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08e      	sub	sp, #56	; 0x38
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001646:	f001 f851 	bl	80026ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800164a:	f000 fa7b 	bl	8001b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800164e:	f000 fc69 	bl	8001f24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001652:	f000 fbff 	bl	8001e54 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001656:	f000 fc27 	bl	8001ea8 <MX_DMA_Init>
  MX_TIM2_Init();
 800165a:	f000 fb61 	bl	8001d20 <MX_TIM2_Init>
  MX_DAC_Init();
 800165e:	f000 fb35 	bl	8001ccc <MX_DAC_Init>
  MX_ADC1_Init();
 8001662:	f000 fae1 	bl	8001c28 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001666:	f000 fba7 	bl	8001db8 <MX_TIM3_Init>
//  HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID , &DMATransferComplete);




  sine_generator(); //Generate the samples
 800166a:	f7ff fdb1 	bl	80011d0 <sine_generator>
////	  for (int i = 0; i < ADC_SAMPLE_SIZE; i++)
////	  {
////		  adcVoltageFloat[i] = adcVoltageData[i] * ADC_SCALING;
////	  }
  //sync_sample_blocking(&adcVoltageData[0]);
  frequency_select(1); // Change the frequency here
 800166e:	2001      	movs	r0, #1
 8001670:	f7ff fe1a 	bl	80012a8 <frequency_select>

  resistor_select(0);
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff ff07 	bl	8001488 <resistor_select>
  path_select(0);
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff fdf8 	bl	8001270 <path_select>
  adcTransfer = 0;
 8001680:	4b95      	ldr	r3, [pc, #596]	; (80018d8 <main+0x298>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim3);
 8001686:	4895      	ldr	r0, [pc, #596]	; (80018dc <main+0x29c>)
 8001688:	f003 fd5a 	bl	8005140 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcVoltageData, ADC_SAMPLE_SIZE);
 800168c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001690:	4993      	ldr	r1, [pc, #588]	; (80018e0 <main+0x2a0>)
 8001692:	4894      	ldr	r0, [pc, #592]	; (80018e4 <main+0x2a4>)
 8001694:	f001 fa14 	bl	8002ac0 <HAL_ADC_Start_DMA>
  HAL_Delay(1000);
 8001698:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800169c:	f001 f898 	bl	80027d0 <HAL_Delay>
  path_select(1);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f7ff fde5 	bl	8001270 <path_select>
  for (int i=0; i<8; i++){
 80016a6:	2300      	movs	r3, #0
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
 80016aa:	e085      	b.n	80017b8 <main+0x178>
	  adcTransfer = 0;
 80016ac:	4b8a      	ldr	r3, [pc, #552]	; (80018d8 <main+0x298>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
	  range_resistor = i;
 80016b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b8c      	ldr	r3, [pc, #560]	; (80018e8 <main+0x2a8>)
 80016b8:	701a      	strb	r2, [r3, #0]
	  resistor_select(range_resistor); // Change resistor RANGE HERE -----------^^^^^^^
 80016ba:	4b8b      	ldr	r3, [pc, #556]	; (80018e8 <main+0x2a8>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fee1 	bl	8001488 <resistor_select>
	  HAL_Delay(1000);
 80016c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ca:	f001 f881 	bl	80027d0 <HAL_Delay>
	  HAL_TIM_Base_Start(&htim3);
 80016ce:	4883      	ldr	r0, [pc, #524]	; (80018dc <main+0x29c>)
 80016d0:	f003 fd36 	bl	8005140 <HAL_TIM_Base_Start>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcCurrentData, ADC_SAMPLE_SIZE);
 80016d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d8:	4984      	ldr	r1, [pc, #528]	; (80018ec <main+0x2ac>)
 80016da:	4882      	ldr	r0, [pc, #520]	; (80018e4 <main+0x2a4>)
 80016dc:	f001 f9f0 	bl	8002ac0 <HAL_ADC_Start_DMA>

	  while(adcTransfer != 1);
 80016e0:	bf00      	nop
 80016e2:	4b7d      	ldr	r3, [pc, #500]	; (80018d8 <main+0x298>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d1fb      	bne.n	80016e2 <main+0xa2>
	  maxcurrentval = adcCurrentData[0];
 80016ea:	4b80      	ldr	r3, [pc, #512]	; (80018ec <main+0x2ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a80      	ldr	r2, [pc, #512]	; (80018f0 <main+0x2b0>)
 80016f0:	6013      	str	r3, [r2, #0]
	  for (uint32_t i = 1; i < ADC_SAMPLE_SIZE; i++)
 80016f2:	2301      	movs	r3, #1
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
 80016f6:	e010      	b.n	800171a <main+0xda>
		  if (adcCurrentData[i] > maxcurrentval){
 80016f8:	4a7c      	ldr	r2, [pc, #496]	; (80018ec <main+0x2ac>)
 80016fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001700:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <main+0x2b0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d905      	bls.n	8001714 <main+0xd4>
			  maxcurrentval = adcCurrentData[i];
 8001708:	4a78      	ldr	r2, [pc, #480]	; (80018ec <main+0x2ac>)
 800170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	4a77      	ldr	r2, [pc, #476]	; (80018f0 <main+0x2b0>)
 8001712:	6013      	str	r3, [r2, #0]
	  for (uint32_t i = 1; i < ADC_SAMPLE_SIZE; i++)
 8001714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001716:	3301      	adds	r3, #1
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
 800171a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001720:	d3ea      	bcc.n	80016f8 <main+0xb8>
		  }
	  mincurrentval = adcCurrentData[0];
 8001722:	4b72      	ldr	r3, [pc, #456]	; (80018ec <main+0x2ac>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a73      	ldr	r2, [pc, #460]	; (80018f4 <main+0x2b4>)
 8001728:	6013      	str	r3, [r2, #0]
	  for (uint32_t i = 1; i < ADC_SAMPLE_SIZE; i++)
 800172a:	2301      	movs	r3, #1
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800172e:	e010      	b.n	8001752 <main+0x112>
		  if (adcCurrentData[i] < mincurrentval){
 8001730:	4a6e      	ldr	r2, [pc, #440]	; (80018ec <main+0x2ac>)
 8001732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001734:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001738:	4b6e      	ldr	r3, [pc, #440]	; (80018f4 <main+0x2b4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d205      	bcs.n	800174c <main+0x10c>
			  mincurrentval = adcCurrentData[i];
 8001740:	4a6a      	ldr	r2, [pc, #424]	; (80018ec <main+0x2ac>)
 8001742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001748:	4a6a      	ldr	r2, [pc, #424]	; (80018f4 <main+0x2b4>)
 800174a:	6013      	str	r3, [r2, #0]
	  for (uint32_t i = 1; i < ADC_SAMPLE_SIZE; i++)
 800174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174e:	3301      	adds	r3, #1
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001758:	d3ea      	bcc.n	8001730 <main+0xf0>
		  }

	  if (maxcurrentval >= 4095 || mincurrentval <= 0){
 800175a:	4b65      	ldr	r3, [pc, #404]	; (80018f0 <main+0x2b0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001762:	4293      	cmp	r3, r2
 8001764:	d803      	bhi.n	800176e <main+0x12e>
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <main+0x2b4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d121      	bne.n	80017b2 <main+0x172>
		  adcTransfer = 0;
 800176e:	4b5a      	ldr	r3, [pc, #360]	; (80018d8 <main+0x298>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
		  range_resistor = i-1;
 8001774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001776:	b2db      	uxtb	r3, r3
 8001778:	3b01      	subs	r3, #1
 800177a:	b2da      	uxtb	r2, r3
 800177c:	4b5a      	ldr	r3, [pc, #360]	; (80018e8 <main+0x2a8>)
 800177e:	701a      	strb	r2, [r3, #0]
		  resistor_select(range_resistor);
 8001780:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <main+0x2a8>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fe7e 	bl	8001488 <resistor_select>
		  HAL_Delay(500);
 800178c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001790:	f001 f81e 	bl	80027d0 <HAL_Delay>
		  HAL_TIM_Base_Start(&htim3);
 8001794:	4851      	ldr	r0, [pc, #324]	; (80018dc <main+0x29c>)
 8001796:	f003 fcd3 	bl	8005140 <HAL_TIM_Base_Start>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcCurrentData, ADC_SAMPLE_SIZE);
 800179a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800179e:	4953      	ldr	r1, [pc, #332]	; (80018ec <main+0x2ac>)
 80017a0:	4850      	ldr	r0, [pc, #320]	; (80018e4 <main+0x2a4>)
 80017a2:	f001 f98d 	bl	8002ac0 <HAL_ADC_Start_DMA>
		  while(adcTransfer!=1);
 80017a6:	bf00      	nop
 80017a8:	4b4b      	ldr	r3, [pc, #300]	; (80018d8 <main+0x298>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d1fb      	bne.n	80017a8 <main+0x168>
		  break;
 80017b0:	e006      	b.n	80017c0 <main+0x180>
  for (int i=0; i<8; i++){
 80017b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b4:	3301      	adds	r3, #1
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ba:	2b07      	cmp	r3, #7
 80017bc:	f77f af76 	ble.w	80016ac <main+0x6c>
//		  break;
//	  }


  }
  for (int i = 0; i < ADC_SAMPLE_SIZE; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80017c4:	e032      	b.n	800182c <main+0x1ec>
    	  {
    	  	adcVoltageFloat[i] = adcVoltageData[i] * ADC_SCALING;
 80017c6:	4a46      	ldr	r2, [pc, #280]	; (80018e0 <main+0x2a0>)
 80017c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe ff18 	bl	8000604 <__aeabi_ui2d>
 80017d4:	a33e      	add	r3, pc, #248	; (adr r3, 80018d0 <main+0x290>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe ff8d 	bl	80006f8 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff fa7f 	bl	8000ce8 <__aeabi_d2f>
 80017ea:	4602      	mov	r2, r0
 80017ec:	4942      	ldr	r1, [pc, #264]	; (80018f8 <main+0x2b8>)
 80017ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	601a      	str	r2, [r3, #0]
    	  	adcCurrentFloat[i] = adcCurrentData[i] * ADC_SCALING;
 80017f6:	4a3d      	ldr	r2, [pc, #244]	; (80018ec <main+0x2ac>)
 80017f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe ff00 	bl	8000604 <__aeabi_ui2d>
 8001804:	a332      	add	r3, pc, #200	; (adr r3, 80018d0 <main+0x290>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7fe ff75 	bl	80006f8 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff fa67 	bl	8000ce8 <__aeabi_d2f>
 800181a:	4602      	mov	r2, r0
 800181c:	4937      	ldr	r1, [pc, #220]	; (80018fc <main+0x2bc>)
 800181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < ADC_SAMPLE_SIZE; i++)
 8001826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001828:	3301      	adds	r3, #1
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
 800182c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001832:	dbc8      	blt.n	80017c6 <main+0x186>
    	  }
//
  for (int i = 0; i < 4096; i++) {
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
 8001838:	e041      	b.n	80018be <main+0x27e>
        float32_t multiplier = 0.5 * (1 - cos(2*PI*i/4095));
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001844:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001908 <main+0x2c8>
 8001848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800190c <main+0x2cc>
 8001850:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001854:	ee16 0a90 	vmov	r0, s13
 8001858:	f7fe fef6 	bl	8000648 <__aeabi_f2d>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	ec43 2b10 	vmov	d0, r2, r3
 8001864:	f008 fa00 	bl	8009c68 <cos>
 8001868:	ec53 2b10 	vmov	r2, r3, d0
 800186c:	f04f 0000 	mov.w	r0, #0
 8001870:	4923      	ldr	r1, [pc, #140]	; (8001900 <main+0x2c0>)
 8001872:	f7fe fd89 	bl	8000388 <__aeabi_dsub>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <main+0x2c4>)
 8001884:	f7fe ff38 	bl	80006f8 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff fa2a 	bl	8000ce8 <__aeabi_d2f>
 8001894:	4603      	mov	r3, r0
 8001896:	603b      	str	r3, [r7, #0]
        adcVoltageFloat[i] = multiplier * adcVoltageFloat[i];
 8001898:	4a17      	ldr	r2, [pc, #92]	; (80018f8 <main+0x2b8>)
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	ed93 7a00 	vldr	s14, [r3]
 80018a4:	edd7 7a00 	vldr	s15, [r7]
 80018a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ac:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <main+0x2b8>)
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 4096; i++) {
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	3301      	adds	r3, #1
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018c4:	dbb9      	blt.n	800183a <main+0x1fa>
    }
	for (int i = 0; i < 4096; i++) {
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
 80018ca:	e063      	b.n	8001994 <main+0x354>
 80018cc:	f3af 8000 	nop.w
 80018d0:	60000000 	.word	0x60000000
 80018d4:	3f4a6666 	.word	0x3f4a6666
 80018d8:	2001c468 	.word	0x2001c468
 80018dc:	2000037c 	.word	0x2000037c
 80018e0:	20000468 	.word	0x20000468
 80018e4:	20000218 	.word	0x20000218
 80018e8:	2001c4b8 	.word	0x2001c4b8
 80018ec:	20004468 	.word	0x20004468
 80018f0:	2001c4a0 	.word	0x2001c4a0
 80018f4:	2001c4a4 	.word	0x2001c4a4
 80018f8:	20008468 	.word	0x20008468
 80018fc:	2000c468 	.word	0x2000c468
 8001900:	3ff00000 	.word	0x3ff00000
 8001904:	3fe00000 	.word	0x3fe00000
 8001908:	40c90fdb 	.word	0x40c90fdb
 800190c:	457ff000 	.word	0x457ff000
		  float32_t multiplier = 0.5 * (1 - cos(2*PI*i/4095));
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191a:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8001908 <main+0x2c8>
 800191e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001922:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800190c <main+0x2cc>
 8001926:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800192a:	ee16 0a90 	vmov	r0, s13
 800192e:	f7fe fe8b 	bl	8000648 <__aeabi_f2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	ec43 2b10 	vmov	d0, r2, r3
 800193a:	f008 f995 	bl	8009c68 <cos>
 800193e:	ec53 2b10 	vmov	r2, r3, d0
 8001942:	f04f 0000 	mov.w	r0, #0
 8001946:	496e      	ldr	r1, [pc, #440]	; (8001b00 <main+0x4c0>)
 8001948:	f7fe fd1e 	bl	8000388 <__aeabi_dsub>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <main+0x4c4>)
 800195a:	f7fe fecd 	bl	80006f8 <__aeabi_dmul>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f9bf 	bl	8000ce8 <__aeabi_d2f>
 800196a:	4603      	mov	r3, r0
 800196c:	607b      	str	r3, [r7, #4]
		  adcCurrentFloat[i] = multiplier * adcCurrentFloat[i];
 800196e:	4a66      	ldr	r2, [pc, #408]	; (8001b08 <main+0x4c8>)
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	ed93 7a00 	vldr	s14, [r3]
 800197a:	edd7 7a01 	vldr	s15, [r7, #4]
 800197e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001982:	4a61      	ldr	r2, [pc, #388]	; (8001b08 <main+0x4c8>)
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 4096; i++) {
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	3301      	adds	r3, #1
 8001992:	623b      	str	r3, [r7, #32]
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800199a:	dbb9      	blt.n	8001910 <main+0x2d0>
	  }

  arm_rfft_fast_init_f32(&fSV, ADC_SAMPLE_SIZE);
 800199c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a0:	485a      	ldr	r0, [pc, #360]	; (8001b0c <main+0x4cc>)
 80019a2:	f004 fb51 	bl	8006048 <arm_rfft_fast_init_f32>
  arm_rfft_fast_f32(&fSV, adcVoltageFloat, adcVoltageFFT, ifftFlag);
 80019a6:	4b5a      	ldr	r3, [pc, #360]	; (8001b10 <main+0x4d0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	4a59      	ldr	r2, [pc, #356]	; (8001b14 <main+0x4d4>)
 80019ae:	495a      	ldr	r1, [pc, #360]	; (8001b18 <main+0x4d8>)
 80019b0:	4856      	ldr	r0, [pc, #344]	; (8001b0c <main+0x4cc>)
 80019b2:	f004 fbcb 	bl	800614c <arm_rfft_fast_f32>
  arm_cmplx_mag_f32(adcVoltageFFT, testVoltageOutput, FFT_SAMPLE_SIZE);
 80019b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019ba:	4958      	ldr	r1, [pc, #352]	; (8001b1c <main+0x4dc>)
 80019bc:	4855      	ldr	r0, [pc, #340]	; (8001b14 <main+0x4d4>)
 80019be:	f005 f831 	bl	8006a24 <arm_cmplx_mag_f32>
  testVoltageOutput[0] = 0;
 80019c2:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <main+0x4dc>)
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
  arm_max_f32(testVoltageOutput, FFT_SAMPLE_SIZE, &maxFFTVoltageValue, &maxFFTVoltageindex);
 80019ca:	4b55      	ldr	r3, [pc, #340]	; (8001b20 <main+0x4e0>)
 80019cc:	4a55      	ldr	r2, [pc, #340]	; (8001b24 <main+0x4e4>)
 80019ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d2:	4852      	ldr	r0, [pc, #328]	; (8001b1c <main+0x4dc>)
 80019d4:	f004 fad0 	bl	8005f78 <arm_max_f32>

  arm_rfft_fast_init_f32(&fSC, ADC_SAMPLE_SIZE);
 80019d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019dc:	4852      	ldr	r0, [pc, #328]	; (8001b28 <main+0x4e8>)
 80019de:	f004 fb33 	bl	8006048 <arm_rfft_fast_init_f32>
  arm_rfft_fast_f32(&fSC, adcCurrentFloat, adcCurrentFFT, ifftFlag);
 80019e2:	4b4b      	ldr	r3, [pc, #300]	; (8001b10 <main+0x4d0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4a50      	ldr	r2, [pc, #320]	; (8001b2c <main+0x4ec>)
 80019ea:	4947      	ldr	r1, [pc, #284]	; (8001b08 <main+0x4c8>)
 80019ec:	484e      	ldr	r0, [pc, #312]	; (8001b28 <main+0x4e8>)
 80019ee:	f004 fbad 	bl	800614c <arm_rfft_fast_f32>
  arm_cmplx_mag_f32(adcCurrentFFT, testCurrentOutput, FFT_SAMPLE_SIZE);
 80019f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019f6:	494e      	ldr	r1, [pc, #312]	; (8001b30 <main+0x4f0>)
 80019f8:	484c      	ldr	r0, [pc, #304]	; (8001b2c <main+0x4ec>)
 80019fa:	f005 f813 	bl	8006a24 <arm_cmplx_mag_f32>
  testCurrentOutput[0] = 0;
 80019fe:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <main+0x4f0>)
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
  arm_max_f32(testCurrentOutput, FFT_SAMPLE_SIZE, &maxFFTCurrentValue, &maxFFTCurrentindex);
 8001a06:	4b4b      	ldr	r3, [pc, #300]	; (8001b34 <main+0x4f4>)
 8001a08:	4a4b      	ldr	r2, [pc, #300]	; (8001b38 <main+0x4f8>)
 8001a0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a0e:	4848      	ldr	r0, [pc, #288]	; (8001b30 <main+0x4f0>)
 8001a10:	f004 fab2 	bl	8005f78 <arm_max_f32>



  //Magnitude Calculation

  float32_t RealVoltage = adcVoltageFFT[maxFFTVoltageindex*2];
 8001a14:	4b42      	ldr	r3, [pc, #264]	; (8001b20 <main+0x4e0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4a3e      	ldr	r2, [pc, #248]	; (8001b14 <main+0x4d4>)
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	61fb      	str	r3, [r7, #28]
  float32_t ImagVoltage = adcVoltageFFT[maxFFTVoltageindex*2+1];
 8001a24:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <main+0x4e0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	4a39      	ldr	r2, [pc, #228]	; (8001b14 <main+0x4d4>)
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	61bb      	str	r3, [r7, #24]
  float32_t RealCurrent = adcCurrentFFT[maxFFTCurrentindex*2];
 8001a36:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <main+0x4f4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4a3b      	ldr	r2, [pc, #236]	; (8001b2c <main+0x4ec>)
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	617b      	str	r3, [r7, #20]
  float32_t ImagCurrent = adcCurrentFFT[maxFFTCurrentindex*2+1];
 8001a46:	4b3b      	ldr	r3, [pc, #236]	; (8001b34 <main+0x4f4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	4a37      	ldr	r2, [pc, #220]	; (8001b2c <main+0x4ec>)
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	613b      	str	r3, [r7, #16]

  float32_t RealImpedance = ((RealVoltage*RealCurrent)+(ImagVoltage*ImagCurrent))/(RealCurrent*RealCurrent + ImagCurrent*ImagCurrent);
 8001a58:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a64:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a70:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001a74:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a78:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a8c:	edc7 7a03 	vstr	s15, [r7, #12]
  RealImpedance = range_resistor_table[range_resistor]*RealImpedance;
 8001a90:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <main+0x4fc>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4a2a      	ldr	r2, [pc, #168]	; (8001b40 <main+0x500>)
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa6:	edc7 7a03 	vstr	s15, [r7, #12]
  float32_t ImagImpedance = ((RealCurrent*ImagVoltage)-(RealVoltage*ImagCurrent))/(RealCurrent*RealCurrent + ImagCurrent*ImagCurrent);
 8001aaa:	ed97 7a05 	vldr	s14, [r7, #20]
 8001aae:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8001aba:	edd7 7a04 	vldr	s15, [r7, #16]
 8001abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ac6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001ace:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ad6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ade:	edc7 7a02 	vstr	s15, [r7, #8]
  ImagImpedance = range_resistor_table[range_resistor]*ImagImpedance;
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <main+0x4fc>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	4a16      	ldr	r2, [pc, #88]	; (8001b40 <main+0x500>)
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af8:	edc7 7a02 	vstr	s15, [r7, #8]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <main+0x4bc>
 8001afe:	bf00      	nop
 8001b00:	3ff00000 	.word	0x3ff00000
 8001b04:	3fe00000 	.word	0x3fe00000
 8001b08:	2000c468 	.word	0x2000c468
 8001b0c:	2001c46c 	.word	0x2001c46c
 8001b10:	2001c49c 	.word	0x2001c49c
 8001b14:	20010468 	.word	0x20010468
 8001b18:	20008468 	.word	0x20008468
 8001b1c:	20018468 	.word	0x20018468
 8001b20:	2001c4ac 	.word	0x2001c4ac
 8001b24:	2001c4a8 	.word	0x2001c4a8
 8001b28:	2001c484 	.word	0x2001c484
 8001b2c:	20014468 	.word	0x20014468
 8001b30:	2001a468 	.word	0x2001a468
 8001b34:	2001c4b4 	.word	0x2001c4b4
 8001b38:	2001c4b0 	.word	0x2001c4b0
 8001b3c:	2001c4b8 	.word	0x2001c4b8
 8001b40:	20000000 	.word	0x20000000

08001b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b094      	sub	sp, #80	; 0x50
 8001b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	2234      	movs	r2, #52	; 0x34
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f005 fb6a 	bl	800722c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <SystemClock_Config+0xdc>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	4a2b      	ldr	r2, [pc, #172]	; (8001c20 <SystemClock_Config+0xdc>)
 8001b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b76:	6413      	str	r3, [r2, #64]	; 0x40
 8001b78:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <SystemClock_Config+0xdc>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b84:	2300      	movs	r3, #0
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <SystemClock_Config+0xe0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a25      	ldr	r2, [pc, #148]	; (8001c24 <SystemClock_Config+0xe0>)
 8001b8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <SystemClock_Config+0xe0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b9c:	603b      	str	r3, [r7, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ba4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001baa:	2302      	movs	r3, #2
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001bb8:	23b4      	movs	r3, #180	; 0xb4
 8001bba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f002 ffc9 	bl	8004b64 <HAL_RCC_OscConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001bd8:	f000 fa3e 	bl	8002058 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bdc:	f002 fc28 	bl	8004430 <HAL_PWREx_EnableOverDrive>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001be6:	f000 fa37 	bl	8002058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bea:	230f      	movs	r3, #15
 8001bec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bf6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c00:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	2105      	movs	r1, #5
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f002 fc61 	bl	80044d0 <HAL_RCC_ClockConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001c14:	f000 fa20 	bl	8002058 <Error_Handler>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3750      	adds	r7, #80	; 0x50
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40007000 	.word	0x40007000

08001c28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c2e:	463b      	mov	r3, r7
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <MX_ADC1_Init+0x9c>)
 8001c3c:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <MX_ADC1_Init+0xa0>)
 8001c3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c40:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <MX_ADC1_Init+0x9c>)
 8001c42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <MX_ADC1_Init+0x9c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <MX_ADC1_Init+0x9c>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <MX_ADC1_Init+0x9c>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <MX_ADC1_Init+0x9c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <MX_ADC1_Init+0x9c>)
 8001c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_ADC1_Init+0x9c>)
 8001c6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <MX_ADC1_Init+0x9c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <MX_ADC1_Init+0x9c>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_ADC1_Init+0x9c>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_ADC1_Init+0x9c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c8c:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <MX_ADC1_Init+0x9c>)
 8001c8e:	f000 fdc3 	bl	8002818 <HAL_ADC_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001c98:	f000 f9de 	bl	8002058 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca8:	463b      	mov	r3, r7
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_ADC1_Init+0x9c>)
 8001cae:	f001 f835 	bl	8002d1c <HAL_ADC_ConfigChannel>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001cb8:	f000 f9ce 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000218 	.word	0x20000218
 8001cc8:	40012000 	.word	0x40012000

08001ccc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_DAC_Init+0x4c>)
 8001cdc:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <MX_DAC_Init+0x50>)
 8001cde:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001ce0:	480d      	ldr	r0, [pc, #52]	; (8001d18 <MX_DAC_Init+0x4c>)
 8001ce2:	f001 fbe6 	bl	80034b2 <HAL_DAC_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001cec:	f000 f9b4 	bl	8002058 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001cf0:	2324      	movs	r3, #36	; 0x24
 8001cf2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <MX_DAC_Init+0x4c>)
 8001d00:	f001 fd2e 	bl	8003760 <HAL_DAC_ConfigChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001d0a:	f000 f9a5 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200002c0 	.word	0x200002c0
 8001d1c:	40007400 	.word	0x40007400

08001d20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d26:	f107 0308 	add.w	r3, r7, #8
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d34:	463b      	mov	r3, r7
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <MX_TIM2_Init+0x94>)
 8001d3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <MX_TIM2_Init+0x94>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <MX_TIM2_Init+0x94>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <MX_TIM2_Init+0x94>)
 8001d52:	2202      	movs	r2, #2
 8001d54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <MX_TIM2_Init+0x94>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d5c:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <MX_TIM2_Init+0x94>)
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d62:	4814      	ldr	r0, [pc, #80]	; (8001db4 <MX_TIM2_Init+0x94>)
 8001d64:	f003 f99c 	bl	80050a0 <HAL_TIM_Base_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001d6e:	f000 f973 	bl	8002058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d78:	f107 0308 	add.w	r3, r7, #8
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480d      	ldr	r0, [pc, #52]	; (8001db4 <MX_TIM2_Init+0x94>)
 8001d80:	f003 fb75 	bl	800546e <HAL_TIM_ConfigClockSource>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001d8a:	f000 f965 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d8e:	2320      	movs	r3, #32
 8001d90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d96:	463b      	mov	r3, r7
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4806      	ldr	r0, [pc, #24]	; (8001db4 <MX_TIM2_Init+0x94>)
 8001d9c:	f003 fd9a 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001da6:	f000 f957 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000334 	.word	0x20000334

08001db8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dbe:	f107 0308 	add.w	r3, r7, #8
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dcc:	463b      	mov	r3, r7
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <MX_TIM3_Init+0x94>)
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <MX_TIM3_Init+0x98>)
 8001dd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <MX_TIM3_Init+0x94>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <MX_TIM3_Init+0x94>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4500-1;
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <MX_TIM3_Init+0x94>)
 8001de8:	f241 1293 	movw	r2, #4499	; 0x1193
 8001dec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <MX_TIM3_Init+0x94>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001df4:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <MX_TIM3_Init+0x94>)
 8001df6:	2280      	movs	r2, #128	; 0x80
 8001df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dfa:	4814      	ldr	r0, [pc, #80]	; (8001e4c <MX_TIM3_Init+0x94>)
 8001dfc:	f003 f950 	bl	80050a0 <HAL_TIM_Base_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001e06:	f000 f927 	bl	8002058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e10:	f107 0308 	add.w	r3, r7, #8
 8001e14:	4619      	mov	r1, r3
 8001e16:	480d      	ldr	r0, [pc, #52]	; (8001e4c <MX_TIM3_Init+0x94>)
 8001e18:	f003 fb29 	bl	800546e <HAL_TIM_ConfigClockSource>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001e22:	f000 f919 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e26:	2320      	movs	r3, #32
 8001e28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e2e:	463b      	mov	r3, r7
 8001e30:	4619      	mov	r1, r3
 8001e32:	4806      	ldr	r0, [pc, #24]	; (8001e4c <MX_TIM3_Init+0x94>)
 8001e34:	f003 fd4e 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001e3e:	f000 f90b 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000037c 	.word	0x2000037c
 8001e50:	40000400 	.word	0x40000400

08001e54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <MX_USART2_UART_Init+0x50>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e8c:	f003 fdb2 	bl	80059f4 <HAL_UART_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e96:	f000 f8df 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200003c4 	.word	0x200003c4
 8001ea4:	40004400 	.word	0x40004400

08001ea8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <MX_DMA_Init+0x78>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <MX_DMA_Init+0x78>)
 8001eb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <MX_DMA_Init+0x78>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <MX_DMA_Init+0x78>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <MX_DMA_Init+0x78>)
 8001ed4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <MX_DMA_Init+0x78>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2010      	movs	r0, #16
 8001eec:	f001 faab 	bl	8003446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ef0:	2010      	movs	r0, #16
 8001ef2:	f001 fac4 	bl	800347e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2011      	movs	r0, #17
 8001efc:	f001 faa3 	bl	8003446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f00:	2011      	movs	r0, #17
 8001f02:	f001 fabc 	bl	800347e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2038      	movs	r0, #56	; 0x38
 8001f0c:	f001 fa9b 	bl	8003446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f10:	2038      	movs	r0, #56	; 0x38
 8001f12:	f001 fab4 	bl	800347e <HAL_NVIC_EnableIRQ>

}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	4b39      	ldr	r3, [pc, #228]	; (8002024 <MX_GPIO_Init+0x100>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a38      	ldr	r2, [pc, #224]	; (8002024 <MX_GPIO_Init+0x100>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b36      	ldr	r3, [pc, #216]	; (8002024 <MX_GPIO_Init+0x100>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b32      	ldr	r3, [pc, #200]	; (8002024 <MX_GPIO_Init+0x100>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a31      	ldr	r2, [pc, #196]	; (8002024 <MX_GPIO_Init+0x100>)
 8001f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <MX_GPIO_Init+0x100>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <MX_GPIO_Init+0x100>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a2a      	ldr	r2, [pc, #168]	; (8002024 <MX_GPIO_Init+0x100>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b28      	ldr	r3, [pc, #160]	; (8002024 <MX_GPIO_Init+0x100>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <MX_GPIO_Init+0x100>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a23      	ldr	r2, [pc, #140]	; (8002024 <MX_GPIO_Init+0x100>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b21      	ldr	r3, [pc, #132]	; (8002024 <MX_GPIO_Init+0x100>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_10, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001fb0:	481d      	ldr	r0, [pc, #116]	; (8002028 <MX_GPIO_Init+0x104>)
 8001fb2:	f002 fa23 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001fbc:	481b      	ldr	r0, [pc, #108]	; (800202c <MX_GPIO_Init+0x108>)
 8001fbe:	f002 fa1d 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fc8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4815      	ldr	r0, [pc, #84]	; (8002030 <MX_GPIO_Init+0x10c>)
 8001fda:	f002 f87b 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001fde:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480c      	ldr	r0, [pc, #48]	; (8002028 <MX_GPIO_Init+0x104>)
 8001ff8:	f002 f86c 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ffc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8002000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002002:	2301      	movs	r3, #1
 8002004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <MX_GPIO_Init+0x108>)
 8002016:	f002 f85d 	bl	80040d4 <HAL_GPIO_Init>

}
 800201a:	bf00      	nop
 800201c:	3728      	adds	r7, #40	; 0x28
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	40020000 	.word	0x40020000
 800202c:	40020400 	.word	0x40020400
 8002030:	40020800 	.word	0x40020800

08002034 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	// ADC Conversion Completed
	HAL_TIM_Base_Stop(&htim3);
 800203c:	4804      	ldr	r0, [pc, #16]	; (8002050 <HAL_ADC_ConvCpltCallback+0x1c>)
 800203e:	f003 f8e7 	bl	8005210 <HAL_TIM_Base_Stop>
	adcTransfer = 1;
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <HAL_ADC_ConvCpltCallback+0x20>)
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	2000037c 	.word	0x2000037c
 8002054:	2001c468 	.word	0x2001c468

08002058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800205c:	b672      	cpsid	i
}
 800205e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002060:	e7fe      	b.n	8002060 <Error_Handler+0x8>
	...

08002064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_MspInit+0x4c>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <HAL_MspInit+0x4c>)
 8002074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002078:	6453      	str	r3, [r2, #68]	; 0x44
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_MspInit+0x4c>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_MspInit+0x4c>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <HAL_MspInit+0x4c>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_MspInit+0x4c>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020a2:	2007      	movs	r0, #7
 80020a4:	f001 f9c4 	bl	8003430 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40023800 	.word	0x40023800

080020b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a32      	ldr	r2, [pc, #200]	; (800219c <HAL_ADC_MspInit+0xe8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d15e      	bne.n	8002194 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_ADC_MspInit+0xec>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a30      	ldr	r2, [pc, #192]	; (80021a0 <HAL_ADC_MspInit+0xec>)
 80020e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b2e      	ldr	r3, [pc, #184]	; (80021a0 <HAL_ADC_MspInit+0xec>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <HAL_ADC_MspInit+0xec>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a29      	ldr	r2, [pc, #164]	; (80021a0 <HAL_ADC_MspInit+0xec>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <HAL_ADC_MspInit+0xec>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800210e:	2302      	movs	r3, #2
 8002110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002112:	2303      	movs	r3, #3
 8002114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4820      	ldr	r0, [pc, #128]	; (80021a4 <HAL_ADC_MspInit+0xf0>)
 8002122:	f001 ffd7 	bl	80040d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_ADC_MspInit+0xf4>)
 8002128:	4a20      	ldr	r2, [pc, #128]	; (80021ac <HAL_ADC_MspInit+0xf8>)
 800212a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800212c:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <HAL_ADC_MspInit+0xf4>)
 800212e:	2200      	movs	r2, #0
 8002130:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002132:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <HAL_ADC_MspInit+0xf4>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <HAL_ADC_MspInit+0xf4>)
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <HAL_ADC_MspInit+0xf4>)
 8002140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002144:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_ADC_MspInit+0xf4>)
 8002148:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800214c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_ADC_MspInit+0xf4>)
 8002150:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002154:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <HAL_ADC_MspInit+0xf4>)
 8002158:	2200      	movs	r2, #0
 800215a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_ADC_MspInit+0xf4>)
 800215e:	2200      	movs	r2, #0
 8002160:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_ADC_MspInit+0xf4>)
 8002164:	2200      	movs	r2, #0
 8002166:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002168:	480f      	ldr	r0, [pc, #60]	; (80021a8 <HAL_ADC_MspInit+0xf4>)
 800216a:	f001 fbd3 	bl	8003914 <HAL_DMA_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002174:	f7ff ff70 	bl	8002058 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <HAL_ADC_MspInit+0xf4>)
 800217c:	639a      	str	r2, [r3, #56]	; 0x38
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <HAL_ADC_MspInit+0xf4>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	2012      	movs	r0, #18
 800218a:	f001 f95c 	bl	8003446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800218e:	2012      	movs	r0, #18
 8002190:	f001 f975 	bl	800347e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002194:	bf00      	nop
 8002196:	3728      	adds	r7, #40	; 0x28
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40012000 	.word	0x40012000
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40020000 	.word	0x40020000
 80021a8:	20000260 	.word	0x20000260
 80021ac:	40026410 	.word	0x40026410

080021b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a2f      	ldr	r2, [pc, #188]	; (800228c <HAL_DAC_MspInit+0xdc>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d158      	bne.n	8002284 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <HAL_DAC_MspInit+0xe0>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a2d      	ldr	r2, [pc, #180]	; (8002290 <HAL_DAC_MspInit+0xe0>)
 80021dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_DAC_MspInit+0xe0>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b27      	ldr	r3, [pc, #156]	; (8002290 <HAL_DAC_MspInit+0xe0>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a26      	ldr	r2, [pc, #152]	; (8002290 <HAL_DAC_MspInit+0xe0>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_DAC_MspInit+0xe0>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800220a:	2310      	movs	r3, #16
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800220e:	2303      	movs	r3, #3
 8002210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	481d      	ldr	r0, [pc, #116]	; (8002294 <HAL_DAC_MspInit+0xe4>)
 800221e:	f001 ff59 	bl	80040d4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_DAC_MspInit+0xe8>)
 8002224:	4a1d      	ldr	r2, [pc, #116]	; (800229c <HAL_DAC_MspInit+0xec>)
 8002226:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_DAC_MspInit+0xe8>)
 800222a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800222e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_DAC_MspInit+0xe8>)
 8002232:	2240      	movs	r2, #64	; 0x40
 8002234:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <HAL_DAC_MspInit+0xe8>)
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800223c:	4b16      	ldr	r3, [pc, #88]	; (8002298 <HAL_DAC_MspInit+0xe8>)
 800223e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002242:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <HAL_DAC_MspInit+0xe8>)
 8002246:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800224a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_DAC_MspInit+0xe8>)
 800224e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002252:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_DAC_MspInit+0xe8>)
 8002256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800225a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <HAL_DAC_MspInit+0xe8>)
 800225e:	2200      	movs	r2, #0
 8002260:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <HAL_DAC_MspInit+0xe8>)
 8002264:	2200      	movs	r2, #0
 8002266:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8002268:	480b      	ldr	r0, [pc, #44]	; (8002298 <HAL_DAC_MspInit+0xe8>)
 800226a:	f001 fb53 	bl	8003914 <HAL_DMA_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8002274:	f7ff fef0 	bl	8002058 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a07      	ldr	r2, [pc, #28]	; (8002298 <HAL_DAC_MspInit+0xe8>)
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	4a06      	ldr	r2, [pc, #24]	; (8002298 <HAL_DAC_MspInit+0xe8>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002284:	bf00      	nop
 8002286:	3728      	adds	r7, #40	; 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40007400 	.word	0x40007400
 8002290:	40023800 	.word	0x40023800
 8002294:	40020000 	.word	0x40020000
 8002298:	200002d4 	.word	0x200002d4
 800229c:	40026088 	.word	0x40026088

080022a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b0:	d116      	bne.n	80022e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_TIM_Base_MspInit+0x80>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	4a19      	ldr	r2, [pc, #100]	; (8002320 <HAL_TIM_Base_MspInit+0x80>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6413      	str	r3, [r2, #64]	; 0x40
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_TIM_Base_MspInit+0x80>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2100      	movs	r1, #0
 80022d2:	201c      	movs	r0, #28
 80022d4:	f001 f8b7 	bl	8003446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022d8:	201c      	movs	r0, #28
 80022da:	f001 f8d0 	bl	800347e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022de:	e01a      	b.n	8002316 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <HAL_TIM_Base_MspInit+0x84>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d115      	bne.n	8002316 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <HAL_TIM_Base_MspInit+0x80>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <HAL_TIM_Base_MspInit+0x80>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_TIM_Base_MspInit+0x80>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	201d      	movs	r0, #29
 800230c:	f001 f89b 	bl	8003446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002310:	201d      	movs	r0, #29
 8002312:	f001 f8b4 	bl	800347e <HAL_NVIC_EnableIRQ>
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	40000400 	.word	0x40000400

08002328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a30      	ldr	r2, [pc, #192]	; (8002408 <HAL_UART_MspInit+0xe0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d159      	bne.n	80023fe <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	4b2f      	ldr	r3, [pc, #188]	; (800240c <HAL_UART_MspInit+0xe4>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a2e      	ldr	r2, [pc, #184]	; (800240c <HAL_UART_MspInit+0xe4>)
 8002354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_UART_MspInit+0xe4>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b28      	ldr	r3, [pc, #160]	; (800240c <HAL_UART_MspInit+0xe4>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a27      	ldr	r2, [pc, #156]	; (800240c <HAL_UART_MspInit+0xe4>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b25      	ldr	r3, [pc, #148]	; (800240c <HAL_UART_MspInit+0xe4>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002382:	230c      	movs	r3, #12
 8002384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238e:	2303      	movs	r3, #3
 8002390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002392:	2307      	movs	r3, #7
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	481c      	ldr	r0, [pc, #112]	; (8002410 <HAL_UART_MspInit+0xe8>)
 800239e:	f001 fe99 	bl	80040d4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <HAL_UART_MspInit+0xec>)
 80023a4:	4a1c      	ldr	r2, [pc, #112]	; (8002418 <HAL_UART_MspInit+0xf0>)
 80023a6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80023a8:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <HAL_UART_MspInit+0xec>)
 80023aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <HAL_UART_MspInit+0xec>)
 80023b2:	2240      	movs	r2, #64	; 0x40
 80023b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_UART_MspInit+0xec>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_UART_MspInit+0xec>)
 80023be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_UART_MspInit+0xec>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_UART_MspInit+0xec>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_UART_MspInit+0xec>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_UART_MspInit+0xec>)
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <HAL_UART_MspInit+0xec>)
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023e2:	480c      	ldr	r0, [pc, #48]	; (8002414 <HAL_UART_MspInit+0xec>)
 80023e4:	f001 fa96 	bl	8003914 <HAL_DMA_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80023ee:	f7ff fe33 	bl	8002058 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a07      	ldr	r2, [pc, #28]	; (8002414 <HAL_UART_MspInit+0xec>)
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34
 80023f8:	4a06      	ldr	r2, [pc, #24]	; (8002414 <HAL_UART_MspInit+0xec>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023fe:	bf00      	nop
 8002400:	3728      	adds	r7, #40	; 0x28
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40004400 	.word	0x40004400
 800240c:	40023800 	.word	0x40023800
 8002410:	40020000 	.word	0x40020000
 8002414:	20000408 	.word	0x20000408
 8002418:	400260a0 	.word	0x400260a0

0800241c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002420:	e7fe      	b.n	8002420 <NMI_Handler+0x4>

08002422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002426:	e7fe      	b.n	8002426 <HardFault_Handler+0x4>

08002428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800242c:	e7fe      	b.n	800242c <MemManage_Handler+0x4>

0800242e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <BusFault_Handler+0x4>

08002434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <UsageFault_Handler+0x4>

0800243a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002468:	f000 f992 	bl	8002790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}

08002470 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <DMA1_Stream5_IRQHandler+0x10>)
 8002476:	f001 fbc3 	bl	8003c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200002d4 	.word	0x200002d4

08002484 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <DMA1_Stream6_IRQHandler+0x10>)
 800248a:	f001 fbb9 	bl	8003c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000408 	.word	0x20000408

08002498 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <ADC_IRQHandler+0x10>)
 800249e:	f000 f9fe 	bl	800289e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000218 	.word	0x20000218

080024ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <TIM2_IRQHandler+0x10>)
 80024b2:	f002 fed4 	bl	800525e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000334 	.word	0x20000334

080024c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <TIM3_IRQHandler+0x10>)
 80024c6:	f002 feca 	bl	800525e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2000037c 	.word	0x2000037c

080024d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <DMA2_Stream0_IRQHandler+0x10>)
 80024da:	f001 fb91 	bl	8003c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000260 	.word	0x20000260

080024e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
	return 1;
 80024ec:	2301      	movs	r3, #1
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <_kill>:

int _kill(int pid, int sig)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002502:	f004 fe69 	bl	80071d8 <__errno>
 8002506:	4603      	mov	r3, r0
 8002508:	2216      	movs	r2, #22
 800250a:	601a      	str	r2, [r3, #0]
	return -1;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <_exit>:

void _exit (int status)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002520:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ffe7 	bl	80024f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800252a:	e7fe      	b.n	800252a <_exit+0x12>

0800252c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	e00a      	b.n	8002554 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800253e:	f3af 8000 	nop.w
 8002542:	4601      	mov	r1, r0
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	60ba      	str	r2, [r7, #8]
 800254a:	b2ca      	uxtb	r2, r1
 800254c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3301      	adds	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	dbf0      	blt.n	800253e <_read+0x12>
	}

return len;
 800255c:	687b      	ldr	r3, [r7, #4]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af00      	add	r7, sp, #0
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	e009      	b.n	800258c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	60ba      	str	r2, [r7, #8]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3301      	adds	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	dbf1      	blt.n	8002578 <_write+0x12>
	}
	return len;
 8002594:	687b      	ldr	r3, [r7, #4]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <_close>:

int _close(int file)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
	return -1;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025c6:	605a      	str	r2, [r3, #4]
	return 0;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <_isatty>:

int _isatty(int file)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
	return 1;
 80025de:	2301      	movs	r3, #1
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
	return 0;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002610:	4a14      	ldr	r2, [pc, #80]	; (8002664 <_sbrk+0x5c>)
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <_sbrk+0x60>)
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <_sbrk+0x64>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d102      	bne.n	800262a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <_sbrk+0x64>)
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <_sbrk+0x68>)
 8002628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <_sbrk+0x64>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	429a      	cmp	r2, r3
 8002636:	d207      	bcs.n	8002648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002638:	f004 fdce 	bl	80071d8 <__errno>
 800263c:	4603      	mov	r3, r0
 800263e:	220c      	movs	r2, #12
 8002640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002646:	e009      	b.n	800265c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <_sbrk+0x64>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <_sbrk+0x64>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	4a05      	ldr	r2, [pc, #20]	; (800266c <_sbrk+0x64>)
 8002658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800265a:	68fb      	ldr	r3, [r7, #12]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20020000 	.word	0x20020000
 8002668:	00000400 	.word	0x00000400
 800266c:	2001c64c 	.word	0x2001c64c
 8002670:	2001c668 	.word	0x2001c668

08002674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <SystemInit+0x20>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <SystemInit+0x20>)
 8002680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800269c:	480d      	ldr	r0, [pc, #52]	; (80026d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800269e:	490e      	ldr	r1, [pc, #56]	; (80026d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026a0:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a4:	e002      	b.n	80026ac <LoopCopyDataInit>

080026a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026aa:	3304      	adds	r3, #4

080026ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b0:	d3f9      	bcc.n	80026a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026b2:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026b4:	4c0b      	ldr	r4, [pc, #44]	; (80026e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b8:	e001      	b.n	80026be <LoopFillZerobss>

080026ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026bc:	3204      	adds	r2, #4

080026be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c0:	d3fb      	bcc.n	80026ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026c2:	f7ff ffd7 	bl	8002674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026c6:	f004 fd8d 	bl	80071e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ca:	f7fe ffb9 	bl	8001640 <main>
  bx  lr    
 80026ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80026dc:	0801e848 	.word	0x0801e848
  ldr r2, =_sbss
 80026e0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80026e4:	2001c664 	.word	0x2001c664

080026e8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e8:	e7fe      	b.n	80026e8 <CAN1_RX0_IRQHandler>
	...

080026ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <HAL_Init+0x40>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0d      	ldr	r2, [pc, #52]	; (800272c <HAL_Init+0x40>)
 80026f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_Init+0x40>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <HAL_Init+0x40>)
 8002702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002706:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <HAL_Init+0x40>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a07      	ldr	r2, [pc, #28]	; (800272c <HAL_Init+0x40>)
 800270e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002714:	2003      	movs	r0, #3
 8002716:	f000 fe8b 	bl	8003430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800271a:	2000      	movs	r0, #0
 800271c:	f000 f808 	bl	8002730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002720:	f7ff fca0 	bl	8002064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40023c00 	.word	0x40023c00

08002730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_InitTick+0x54>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_InitTick+0x58>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002746:	fbb3 f3f1 	udiv	r3, r3, r1
 800274a:	fbb2 f3f3 	udiv	r3, r2, r3
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fea3 	bl	800349a <HAL_SYSTICK_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e00e      	b.n	800277c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b0f      	cmp	r3, #15
 8002762:	d80a      	bhi.n	800277a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002764:	2200      	movs	r2, #0
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800276c:	f000 fe6b 	bl	8003446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002770:	4a06      	ldr	r2, [pc, #24]	; (800278c <HAL_InitTick+0x5c>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e000      	b.n	800277c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000020 	.word	0x20000020
 8002788:	20000028 	.word	0x20000028
 800278c:	20000024 	.word	0x20000024

08002790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_IncTick+0x20>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_IncTick+0x24>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <HAL_IncTick+0x24>)
 80027a2:	6013      	str	r3, [r2, #0]
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000028 	.word	0x20000028
 80027b4:	2001c650 	.word	0x2001c650

080027b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return uwTick;
 80027bc:	4b03      	ldr	r3, [pc, #12]	; (80027cc <HAL_GetTick+0x14>)
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	2001c650 	.word	0x2001c650

080027d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d8:	f7ff ffee 	bl	80027b8 <HAL_GetTick>
 80027dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e8:	d005      	beq.n	80027f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_Delay+0x44>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027f6:	bf00      	nop
 80027f8:	f7ff ffde 	bl	80027b8 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	429a      	cmp	r2, r3
 8002806:	d8f7      	bhi.n	80027f8 <HAL_Delay+0x28>
  {
  }
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000028 	.word	0x20000028

08002818 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e033      	b.n	8002896 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff fc3c 	bl	80020b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	d118      	bne.n	8002888 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800285e:	f023 0302 	bic.w	r3, r3, #2
 8002862:	f043 0202 	orr.w	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fb88 	bl	8002f80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f023 0303 	bic.w	r3, r3, #3
 800287e:	f043 0201 	orr.w	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
 8002886:	e001      	b.n	800288c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d049      	beq.n	8002968 <HAL_ADC_IRQHandler+0xca>
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d046      	beq.n	8002968 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d105      	bne.n	80028f2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d12b      	bne.n	8002958 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002904:	2b00      	cmp	r3, #0
 8002906:	d127      	bne.n	8002958 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002912:	2b00      	cmp	r3, #0
 8002914:	d006      	beq.n	8002924 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002920:	2b00      	cmp	r3, #0
 8002922:	d119      	bne.n	8002958 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0220 	bic.w	r2, r2, #32
 8002932:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d105      	bne.n	8002958 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff fb6b 	bl	8002034 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f06f 0212 	mvn.w	r2, #18
 8002966:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002976:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d057      	beq.n	8002a2e <HAL_ADC_IRQHandler+0x190>
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d054      	beq.n	8002a2e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d139      	bne.n	8002a1e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d006      	beq.n	80029c6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d12b      	bne.n	8002a1e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d124      	bne.n	8002a1e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11d      	bne.n	8002a1e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d119      	bne.n	8002a1e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d105      	bne.n	8002a1e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fc2c 	bl	800327c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 020c 	mvn.w	r2, #12
 8002a2c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d017      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x1d6>
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d014      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d10d      	bne.n	8002a74 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f945 	bl	8002cf4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f06f 0201 	mvn.w	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a82:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d015      	beq.n	8002ab6 <HAL_ADC_IRQHandler+0x218>
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d012      	beq.n	8002ab6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	f043 0202 	orr.w	r2, r3, #2
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0220 	mvn.w	r2, #32
 8002aa4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f92e 	bl	8002d08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0220 	mvn.w	r2, #32
 8002ab4:	601a      	str	r2, [r3, #0]
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_Start_DMA+0x1e>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e0e9      	b.n	8002cb2 <HAL_ADC_Start_DMA+0x1f2>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d018      	beq.n	8002b26 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b04:	4b6d      	ldr	r3, [pc, #436]	; (8002cbc <HAL_ADC_Start_DMA+0x1fc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a6d      	ldr	r2, [pc, #436]	; (8002cc0 <HAL_ADC_Start_DMA+0x200>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0c9a      	lsrs	r2, r3, #18
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b18:	e002      	b.n	8002b20 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f9      	bne.n	8002b1a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b34:	d107      	bne.n	8002b46 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b44:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	f040 80a1 	bne.w	8002c98 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b94:	d106      	bne.n	8002ba4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f023 0206 	bic.w	r2, r3, #6
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44
 8002ba2:	e002      	b.n	8002baa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bb2:	4b44      	ldr	r3, [pc, #272]	; (8002cc4 <HAL_ADC_Start_DMA+0x204>)
 8002bb4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	4a43      	ldr	r2, [pc, #268]	; (8002cc8 <HAL_ADC_Start_DMA+0x208>)
 8002bbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	4a42      	ldr	r2, [pc, #264]	; (8002ccc <HAL_ADC_Start_DMA+0x20c>)
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bca:	4a41      	ldr	r2, [pc, #260]	; (8002cd0 <HAL_ADC_Start_DMA+0x210>)
 8002bcc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bd6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002be6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	334c      	adds	r3, #76	; 0x4c
 8002c02:	4619      	mov	r1, r3
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f000 ff32 	bl	8003a70 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d12a      	bne.n	8002c6e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a2d      	ldr	r2, [pc, #180]	; (8002cd4 <HAL_ADC_Start_DMA+0x214>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d015      	beq.n	8002c4e <HAL_ADC_Start_DMA+0x18e>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a2c      	ldr	r2, [pc, #176]	; (8002cd8 <HAL_ADC_Start_DMA+0x218>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d105      	bne.n	8002c38 <HAL_ADC_Start_DMA+0x178>
 8002c2c:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <HAL_ADC_Start_DMA+0x204>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a27      	ldr	r2, [pc, #156]	; (8002cdc <HAL_ADC_Start_DMA+0x21c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d136      	bne.n	8002cb0 <HAL_ADC_Start_DMA+0x1f0>
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <HAL_ADC_Start_DMA+0x204>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d130      	bne.n	8002cb0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d129      	bne.n	8002cb0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	e020      	b.n	8002cb0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <HAL_ADC_Start_DMA+0x214>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d11b      	bne.n	8002cb0 <HAL_ADC_Start_DMA+0x1f0>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d114      	bne.n	8002cb0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c94:	609a      	str	r2, [r3, #8]
 8002c96:	e00b      	b.n	8002cb0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	f043 0210 	orr.w	r2, r3, #16
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca8:	f043 0201 	orr.w	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000020 	.word	0x20000020
 8002cc0:	431bde83 	.word	0x431bde83
 8002cc4:	40012300 	.word	0x40012300
 8002cc8:	08003179 	.word	0x08003179
 8002ccc:	08003233 	.word	0x08003233
 8002cd0:	0800324f 	.word	0x0800324f
 8002cd4:	40012000 	.word	0x40012000
 8002cd8:	40012100 	.word	0x40012100
 8002cdc:	40012200 	.word	0x40012200

08002ce0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x1c>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e113      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x244>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	d925      	bls.n	8002d94 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68d9      	ldr	r1, [r3, #12]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	4613      	mov	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3b1e      	subs	r3, #30
 8002d5e:	2207      	movs	r2, #7
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43da      	mvns	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68d9      	ldr	r1, [r3, #12]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	4618      	mov	r0, r3
 8002d80:	4603      	mov	r3, r0
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4403      	add	r3, r0
 8002d86:	3b1e      	subs	r3, #30
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	e022      	b.n	8002dda <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6919      	ldr	r1, [r3, #16]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	2207      	movs	r2, #7
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43da      	mvns	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	400a      	ands	r2, r1
 8002db6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6919      	ldr	r1, [r3, #16]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4618      	mov	r0, r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4403      	add	r3, r0
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d824      	bhi.n	8002e2c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	3b05      	subs	r3, #5
 8002df4:	221f      	movs	r2, #31
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	400a      	ands	r2, r1
 8002e02:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	4618      	mov	r0, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3b05      	subs	r3, #5
 8002e1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	635a      	str	r2, [r3, #52]	; 0x34
 8002e2a:	e04c      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b0c      	cmp	r3, #12
 8002e32:	d824      	bhi.n	8002e7e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	3b23      	subs	r3, #35	; 0x23
 8002e46:	221f      	movs	r2, #31
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43da      	mvns	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	400a      	ands	r2, r1
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3b23      	subs	r3, #35	; 0x23
 8002e70:	fa00 f203 	lsl.w	r2, r0, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e7c:	e023      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3b41      	subs	r3, #65	; 0x41
 8002e90:	221f      	movs	r2, #31
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	4618      	mov	r0, r3
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3b41      	subs	r3, #65	; 0x41
 8002eba:	fa00 f203 	lsl.w	r2, r0, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ec6:	4b29      	ldr	r3, [pc, #164]	; (8002f6c <HAL_ADC_ConfigChannel+0x250>)
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <HAL_ADC_ConfigChannel+0x254>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d10f      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x1d8>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b12      	cmp	r3, #18
 8002eda:	d10b      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <HAL_ADC_ConfigChannel+0x254>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d12b      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x23a>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_ADC_ConfigChannel+0x258>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d003      	beq.n	8002f10 <HAL_ADC_ConfigChannel+0x1f4>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b11      	cmp	r3, #17
 8002f0e:	d122      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <HAL_ADC_ConfigChannel+0x258>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d111      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f32:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_ADC_ConfigChannel+0x25c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <HAL_ADC_ConfigChannel+0x260>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	0c9a      	lsrs	r2, r3, #18
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f48:	e002      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f9      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	40012300 	.word	0x40012300
 8002f70:	40012000 	.word	0x40012000
 8002f74:	10000012 	.word	0x10000012
 8002f78:	20000020 	.word	0x20000020
 8002f7c:	431bde83 	.word	0x431bde83

08002f80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f88:	4b79      	ldr	r3, [pc, #484]	; (8003170 <ADC_Init+0x1f0>)
 8002f8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6859      	ldr	r1, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	021a      	lsls	r2, r3, #8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ffa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6899      	ldr	r1, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	4a58      	ldr	r2, [pc, #352]	; (8003174 <ADC_Init+0x1f4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d022      	beq.n	800305e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003026:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6899      	ldr	r1, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6899      	ldr	r1, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	e00f      	b.n	800307e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800306c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800307c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0202 	bic.w	r2, r2, #2
 800308c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6899      	ldr	r1, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	7e1b      	ldrb	r3, [r3, #24]
 8003098:	005a      	lsls	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01b      	beq.n	80030e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	3b01      	subs	r3, #1
 80030d8:	035a      	lsls	r2, r3, #13
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	e007      	b.n	80030f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	3b01      	subs	r3, #1
 8003110:	051a      	lsls	r2, r3, #20
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6899      	ldr	r1, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003136:	025a      	lsls	r2, r3, #9
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6899      	ldr	r1, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	029a      	lsls	r2, r3, #10
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	609a      	str	r2, [r3, #8]
}
 8003164:	bf00      	nop
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	40012300 	.word	0x40012300
 8003174:	0f000001 	.word	0x0f000001

08003178 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800318e:	2b00      	cmp	r3, #0
 8003190:	d13c      	bne.n	800320c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d12b      	bne.n	8003204 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d127      	bne.n	8003204 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d006      	beq.n	80031d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d119      	bne.n	8003204 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0220 	bic.w	r2, r2, #32
 80031de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	f043 0201 	orr.w	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f7fe ff15 	bl	8002034 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800320a:	e00e      	b.n	800322a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f7ff fd75 	bl	8002d08 <HAL_ADC_ErrorCallback>
}
 800321e:	e004      	b.n	800322a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7ff fd4d 	bl	8002ce0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2240      	movs	r2, #64	; 0x40
 8003260:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	f043 0204 	orr.w	r2, r3, #4
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f7ff fd4a 	bl	8002d08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <__NVIC_SetPriorityGrouping+0x44>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032ac:	4013      	ands	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c2:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <__NVIC_SetPriorityGrouping+0x44>)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	60d3      	str	r3, [r2, #12]
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <__NVIC_GetPriorityGrouping+0x18>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	f003 0307 	and.w	r3, r3, #7
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	2b00      	cmp	r3, #0
 8003304:	db0b      	blt.n	800331e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	f003 021f 	and.w	r2, r3, #31
 800330c:	4907      	ldr	r1, [pc, #28]	; (800332c <__NVIC_EnableIRQ+0x38>)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2001      	movs	r0, #1
 8003316:	fa00 f202 	lsl.w	r2, r0, r2
 800331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	e000e100 	.word	0xe000e100

08003330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	6039      	str	r1, [r7, #0]
 800333a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	2b00      	cmp	r3, #0
 8003342:	db0a      	blt.n	800335a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	490c      	ldr	r1, [pc, #48]	; (800337c <__NVIC_SetPriority+0x4c>)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	0112      	lsls	r2, r2, #4
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	440b      	add	r3, r1
 8003354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003358:	e00a      	b.n	8003370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	4908      	ldr	r1, [pc, #32]	; (8003380 <__NVIC_SetPriority+0x50>)
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	3b04      	subs	r3, #4
 8003368:	0112      	lsls	r2, r2, #4
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	440b      	add	r3, r1
 800336e:	761a      	strb	r2, [r3, #24]
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000e100 	.word	0xe000e100
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	; 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f1c3 0307 	rsb	r3, r3, #7
 800339e:	2b04      	cmp	r3, #4
 80033a0:	bf28      	it	cs
 80033a2:	2304      	movcs	r3, #4
 80033a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3304      	adds	r3, #4
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d902      	bls.n	80033b4 <NVIC_EncodePriority+0x30>
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3b03      	subs	r3, #3
 80033b2:	e000      	b.n	80033b6 <NVIC_EncodePriority+0x32>
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43da      	mvns	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	401a      	ands	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	fa01 f303 	lsl.w	r3, r1, r3
 80033d6:	43d9      	mvns	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033dc:	4313      	orrs	r3, r2
         );
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3724      	adds	r7, #36	; 0x24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
	...

080033ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033fc:	d301      	bcc.n	8003402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033fe:	2301      	movs	r3, #1
 8003400:	e00f      	b.n	8003422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003402:	4a0a      	ldr	r2, [pc, #40]	; (800342c <SysTick_Config+0x40>)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3b01      	subs	r3, #1
 8003408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800340a:	210f      	movs	r1, #15
 800340c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003410:	f7ff ff8e 	bl	8003330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <SysTick_Config+0x40>)
 8003416:	2200      	movs	r2, #0
 8003418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800341a:	4b04      	ldr	r3, [pc, #16]	; (800342c <SysTick_Config+0x40>)
 800341c:	2207      	movs	r2, #7
 800341e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	e000e010 	.word	0xe000e010

08003430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ff29 	bl	8003290 <__NVIC_SetPriorityGrouping>
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003446:	b580      	push	{r7, lr}
 8003448:	b086      	sub	sp, #24
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003458:	f7ff ff3e 	bl	80032d8 <__NVIC_GetPriorityGrouping>
 800345c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	6978      	ldr	r0, [r7, #20]
 8003464:	f7ff ff8e 	bl	8003384 <NVIC_EncodePriority>
 8003468:	4602      	mov	r2, r0
 800346a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff5d 	bl	8003330 <__NVIC_SetPriority>
}
 8003476:	bf00      	nop
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	4603      	mov	r3, r0
 8003486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ff31 	bl	80032f4 <__NVIC_EnableIRQ>
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ffa2 	bl	80033ec <SysTick_Config>
 80034a8:	4603      	mov	r3, r0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e014      	b.n	80034ee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	791b      	ldrb	r3, [r3, #4]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d105      	bne.n	80034da <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7fe fe6b 	bl	80021b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	795b      	ldrb	r3, [r3, #5]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_DAC_Start_DMA+0x22>
 8003516:	2302      	movs	r3, #2
 8003518:	e0ab      	b.n	8003672 <HAL_DAC_Start_DMA+0x17a>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2202      	movs	r2, #2
 8003524:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d12f      	bne.n	800358c <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a52      	ldr	r2, [pc, #328]	; (800367c <HAL_DAC_Start_DMA+0x184>)
 8003532:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4a51      	ldr	r2, [pc, #324]	; (8003680 <HAL_DAC_Start_DMA+0x188>)
 800353a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a50      	ldr	r2, [pc, #320]	; (8003684 <HAL_DAC_Start_DMA+0x18c>)
 8003542:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003552:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	2b08      	cmp	r3, #8
 8003558:	d013      	beq.n	8003582 <HAL_DAC_Start_DMA+0x8a>
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d845      	bhi.n	80035ec <HAL_DAC_Start_DMA+0xf4>
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_DAC_Start_DMA+0x76>
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	2b04      	cmp	r3, #4
 800356a:	d005      	beq.n	8003578 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800356c:	e03e      	b.n	80035ec <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3308      	adds	r3, #8
 8003574:	613b      	str	r3, [r7, #16]
        break;
 8003576:	e03c      	b.n	80035f2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	330c      	adds	r3, #12
 800357e:	613b      	str	r3, [r7, #16]
        break;
 8003580:	e037      	b.n	80035f2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3310      	adds	r3, #16
 8003588:	613b      	str	r3, [r7, #16]
        break;
 800358a:	e032      	b.n	80035f2 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4a3d      	ldr	r2, [pc, #244]	; (8003688 <HAL_DAC_Start_DMA+0x190>)
 8003592:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a3c      	ldr	r2, [pc, #240]	; (800368c <HAL_DAC_Start_DMA+0x194>)
 800359a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a3b      	ldr	r2, [pc, #236]	; (8003690 <HAL_DAC_Start_DMA+0x198>)
 80035a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035b2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d013      	beq.n	80035e2 <HAL_DAC_Start_DMA+0xea>
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d817      	bhi.n	80035f0 <HAL_DAC_Start_DMA+0xf8>
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_DAC_Start_DMA+0xd6>
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d005      	beq.n	80035d8 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80035cc:	e010      	b.n	80035f0 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3314      	adds	r3, #20
 80035d4:	613b      	str	r3, [r7, #16]
        break;
 80035d6:	e00c      	b.n	80035f2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3318      	adds	r3, #24
 80035de:	613b      	str	r3, [r7, #16]
        break;
 80035e0:	e007      	b.n	80035f2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	331c      	adds	r3, #28
 80035e8:	613b      	str	r3, [r7, #16]
        break;
 80035ea:	e002      	b.n	80035f2 <HAL_DAC_Start_DMA+0xfa>
        break;
 80035ec:	bf00      	nop
 80035ee:	e000      	b.n	80035f2 <HAL_DAC_Start_DMA+0xfa>
        break;
 80035f0:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d111      	bne.n	800361c <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003606:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6898      	ldr	r0, [r3, #8]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	f000 fa2d 	bl	8003a70 <HAL_DMA_Start_IT>
 8003616:	4603      	mov	r3, r0
 8003618:	75fb      	strb	r3, [r7, #23]
 800361a:	e010      	b.n	800363e <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800362a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	68d8      	ldr	r0, [r3, #12]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	f000 fa1b 	bl	8003a70 <HAL_DMA_Start_IT>
 800363a:	4603      	mov	r3, r0
 800363c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10c      	bne.n	8003664 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6819      	ldr	r1, [r3, #0]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2201      	movs	r2, #1
 8003658:	409a      	lsls	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e005      	b.n	8003670 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f043 0204 	orr.w	r2, r3, #4
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003670:	7dfb      	ldrb	r3, [r7, #23]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	080037ff 	.word	0x080037ff
 8003680:	08003821 	.word	0x08003821
 8003684:	0800383d 	.word	0x0800383d
 8003688:	080038a7 	.word	0x080038a7
 800368c:	080038c9 	.word	0x080038c9
 8003690:	080038e5 	.word	0x080038e5

08003694 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6819      	ldr	r1, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43da      	mvns	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	400a      	ands	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6819      	ldr	r1, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2201      	movs	r2, #1
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43da      	mvns	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	400a      	ands	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fa1c 	bl	8003b20 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e00c      	b.n	8003714 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fa0e 	bl	8003b20 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003712:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	795b      	ldrb	r3, [r3, #5]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_DAC_ConfigChannel+0x18>
 8003774:	2302      	movs	r3, #2
 8003776:	e03c      	b.n	80037f2 <HAL_DAC_ConfigChannel+0x92>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2202      	movs	r2, #2
 8003782:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4013      	ands	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6819      	ldr	r1, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	22c0      	movs	r2, #192	; 0xc0
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43da      	mvns	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	400a      	ands	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f7ff ff89 	bl	8003724 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	711a      	strb	r2, [r3, #4]
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7ff ff82 	bl	8003738 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f043 0204 	orr.w	r2, r3, #4
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f7ff ff78 	bl	800374c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	711a      	strb	r2, [r3, #4]
}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f7ff ffd8 	bl	800386a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	711a      	strb	r2, [r3, #4]
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f7ff ffd1 	bl	800387e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f043 0204 	orr.w	r2, r3, #4
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff ffc7 	bl	8003892 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	711a      	strb	r2, [r3, #4]
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003920:	f7fe ff4a 	bl	80027b8 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e099      	b.n	8003a64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003950:	e00f      	b.n	8003972 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003952:	f7fe ff31 	bl	80027b8 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b05      	cmp	r3, #5
 800395e:	d908      	bls.n	8003972 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2203      	movs	r2, #3
 800396a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e078      	b.n	8003a64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e8      	bne.n	8003952 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4b38      	ldr	r3, [pc, #224]	; (8003a6c <HAL_DMA_Init+0x158>)
 800398c:	4013      	ands	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800399e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d107      	bne.n	80039dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	4313      	orrs	r3, r2
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f023 0307 	bic.w	r3, r3, #7
 80039f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d117      	bne.n	8003a36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00e      	beq.n	8003a36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fadf 	bl	8003fdc <DMA_CheckFifoParam>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2240      	movs	r2, #64	; 0x40
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a32:	2301      	movs	r3, #1
 8003a34:	e016      	b.n	8003a64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa96 	bl	8003f70 <DMA_CalcBaseAndBitshift>
 8003a44:	4603      	mov	r3, r0
 8003a46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	223f      	movs	r2, #63	; 0x3f
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	f010803f 	.word	0xf010803f

08003a70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_DMA_Start_IT+0x26>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e040      	b.n	8003b18 <HAL_DMA_Start_IT+0xa8>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d12f      	bne.n	8003b0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fa28 	bl	8003f14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac8:	223f      	movs	r2, #63	; 0x3f
 8003aca:	409a      	lsls	r2, r3
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0216 	orr.w	r2, r2, #22
 8003ade:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0208 	orr.w	r2, r2, #8
 8003af6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	e005      	b.n	8003b16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
 8003b14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b2e:	f7fe fe43 	bl	80027b8 <HAL_GetTick>
 8003b32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d008      	beq.n	8003b52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2280      	movs	r2, #128	; 0x80
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e052      	b.n	8003bf8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0216 	bic.w	r2, r2, #22
 8003b60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d103      	bne.n	8003b82 <HAL_DMA_Abort+0x62>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0208 	bic.w	r2, r2, #8
 8003b90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ba2:	e013      	b.n	8003bcc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ba4:	f7fe fe08 	bl	80027b8 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b05      	cmp	r3, #5
 8003bb0:	d90c      	bls.n	8003bcc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2203      	movs	r2, #3
 8003bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e015      	b.n	8003bf8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1e4      	bne.n	8003ba4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	223f      	movs	r2, #63	; 0x3f
 8003be0:	409a      	lsls	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c0c:	4b8e      	ldr	r3, [pc, #568]	; (8003e48 <HAL_DMA_IRQHandler+0x248>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a8e      	ldr	r2, [pc, #568]	; (8003e4c <HAL_DMA_IRQHandler+0x24c>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	0a9b      	lsrs	r3, r3, #10
 8003c18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2a:	2208      	movs	r2, #8
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01a      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d013      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0204 	bic.w	r2, r2, #4
 8003c52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c58:	2208      	movs	r2, #8
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c64:	f043 0201 	orr.w	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c70:	2201      	movs	r2, #1
 8003c72:	409a      	lsls	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d012      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00b      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8e:	2201      	movs	r2, #1
 8003c90:	409a      	lsls	r2, r3
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9a:	f043 0202 	orr.w	r2, r3, #2
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d012      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00b      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd0:	f043 0204 	orr.w	r2, r3, #4
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	2210      	movs	r2, #16
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d043      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d03c      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d018      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d108      	bne.n	8003d30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d024      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	4798      	blx	r3
 8003d2e:	e01f      	b.n	8003d70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01b      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3
 8003d40:	e016      	b.n	8003d70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d107      	bne.n	8003d60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0208 	bic.w	r2, r2, #8
 8003d5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d74:	2220      	movs	r2, #32
 8003d76:	409a      	lsls	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 808f 	beq.w	8003ea0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 8087 	beq.w	8003ea0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	2220      	movs	r2, #32
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b05      	cmp	r3, #5
 8003da8:	d136      	bne.n	8003e18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0216 	bic.w	r2, r2, #22
 8003db8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <HAL_DMA_IRQHandler+0x1da>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d007      	beq.n	8003dea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0208 	bic.w	r2, r2, #8
 8003de8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dee:	223f      	movs	r2, #63	; 0x3f
 8003df0:	409a      	lsls	r2, r3
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d07e      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	4798      	blx	r3
        }
        return;
 8003e16:	e079      	b.n	8003f0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d01d      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10d      	bne.n	8003e50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d031      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
 8003e44:	e02c      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x2a0>
 8003e46:	bf00      	nop
 8003e48:	20000020 	.word	0x20000020
 8003e4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d023      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4798      	blx	r3
 8003e60:	e01e      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10f      	bne.n	8003e90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0210 	bic.w	r2, r2, #16
 8003e7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d032      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d022      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2205      	movs	r2, #5
 8003eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d307      	bcc.n	8003ee8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f2      	bne.n	8003ecc <HAL_DMA_IRQHandler+0x2cc>
 8003ee6:	e000      	b.n	8003eea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ee8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	4798      	blx	r3
 8003f0a:	e000      	b.n	8003f0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f0c:	bf00      	nop
    }
  }
}
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b40      	cmp	r3, #64	; 0x40
 8003f40:	d108      	bne.n	8003f54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f52:	e007      	b.n	8003f64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	60da      	str	r2, [r3, #12]
}
 8003f64:	bf00      	nop
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	3b10      	subs	r3, #16
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <DMA_CalcBaseAndBitshift+0x64>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f8a:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <DMA_CalcBaseAndBitshift+0x68>)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d909      	bls.n	8003fb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fa6:	f023 0303 	bic.w	r3, r3, #3
 8003faa:	1d1a      	adds	r2, r3, #4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	659a      	str	r2, [r3, #88]	; 0x58
 8003fb0:	e007      	b.n	8003fc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fba:	f023 0303 	bic.w	r3, r3, #3
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	aaaaaaab 	.word	0xaaaaaaab
 8003fd8:	0800ae20 	.word	0x0800ae20

08003fdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d11f      	bne.n	8004036 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d856      	bhi.n	80040aa <DMA_CheckFifoParam+0xce>
 8003ffc:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <DMA_CheckFifoParam+0x28>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004015 	.word	0x08004015
 8004008:	08004027 	.word	0x08004027
 800400c:	08004015 	.word	0x08004015
 8004010:	080040ab 	.word	0x080040ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d046      	beq.n	80040ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004024:	e043      	b.n	80040ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800402e:	d140      	bne.n	80040b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004034:	e03d      	b.n	80040b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403e:	d121      	bne.n	8004084 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b03      	cmp	r3, #3
 8004044:	d837      	bhi.n	80040b6 <DMA_CheckFifoParam+0xda>
 8004046:	a201      	add	r2, pc, #4	; (adr r2, 800404c <DMA_CheckFifoParam+0x70>)
 8004048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404c:	0800405d 	.word	0x0800405d
 8004050:	08004063 	.word	0x08004063
 8004054:	0800405d 	.word	0x0800405d
 8004058:	08004075 	.word	0x08004075
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
      break;
 8004060:	e030      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d025      	beq.n	80040ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004072:	e022      	b.n	80040ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800407c:	d11f      	bne.n	80040be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004082:	e01c      	b.n	80040be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d903      	bls.n	8004092 <DMA_CheckFifoParam+0xb6>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d003      	beq.n	8004098 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004090:	e018      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	73fb      	strb	r3, [r7, #15]
      break;
 8004096:	e015      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00e      	beq.n	80040c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
      break;
 80040a8:	e00b      	b.n	80040c2 <DMA_CheckFifoParam+0xe6>
      break;
 80040aa:	bf00      	nop
 80040ac:	e00a      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;
 80040ae:	bf00      	nop
 80040b0:	e008      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;
 80040b2:	bf00      	nop
 80040b4:	e006      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;
 80040b6:	bf00      	nop
 80040b8:	e004      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;
 80040ba:	bf00      	nop
 80040bc:	e002      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <DMA_CheckFifoParam+0xe8>
      break;
 80040c2:	bf00      	nop
    }
  } 
  
  return status; 
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop

080040d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	e165      	b.n	80043bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040f0:	2201      	movs	r2, #1
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4013      	ands	r3, r2
 8004102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	429a      	cmp	r2, r3
 800410a:	f040 8154 	bne.w	80043b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b01      	cmp	r3, #1
 8004118:	d005      	beq.n	8004126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004122:	2b02      	cmp	r3, #2
 8004124:	d130      	bne.n	8004188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	2203      	movs	r2, #3
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43db      	mvns	r3, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4313      	orrs	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800415c:	2201      	movs	r2, #1
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4013      	ands	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 0201 	and.w	r2, r3, #1
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	2b03      	cmp	r3, #3
 8004192:	d017      	beq.n	80041c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	2203      	movs	r2, #3
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	43db      	mvns	r3, r3
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4013      	ands	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d123      	bne.n	8004218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	08da      	lsrs	r2, r3, #3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3208      	adds	r2, #8
 80041d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	220f      	movs	r2, #15
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	08da      	lsrs	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3208      	adds	r2, #8
 8004212:	69b9      	ldr	r1, [r7, #24]
 8004214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	2203      	movs	r2, #3
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 0203 	and.w	r2, r3, #3
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80ae 	beq.w	80043b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	4b5d      	ldr	r3, [pc, #372]	; (80043d4 <HAL_GPIO_Init+0x300>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	4a5c      	ldr	r2, [pc, #368]	; (80043d4 <HAL_GPIO_Init+0x300>)
 8004264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004268:	6453      	str	r3, [r2, #68]	; 0x44
 800426a:	4b5a      	ldr	r3, [pc, #360]	; (80043d4 <HAL_GPIO_Init+0x300>)
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004276:	4a58      	ldr	r2, [pc, #352]	; (80043d8 <HAL_GPIO_Init+0x304>)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	089b      	lsrs	r3, r3, #2
 800427c:	3302      	adds	r3, #2
 800427e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	220f      	movs	r2, #15
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a4f      	ldr	r2, [pc, #316]	; (80043dc <HAL_GPIO_Init+0x308>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d025      	beq.n	80042ee <HAL_GPIO_Init+0x21a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a4e      	ldr	r2, [pc, #312]	; (80043e0 <HAL_GPIO_Init+0x30c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d01f      	beq.n	80042ea <HAL_GPIO_Init+0x216>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4d      	ldr	r2, [pc, #308]	; (80043e4 <HAL_GPIO_Init+0x310>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d019      	beq.n	80042e6 <HAL_GPIO_Init+0x212>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4c      	ldr	r2, [pc, #304]	; (80043e8 <HAL_GPIO_Init+0x314>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <HAL_GPIO_Init+0x20e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a4b      	ldr	r2, [pc, #300]	; (80043ec <HAL_GPIO_Init+0x318>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00d      	beq.n	80042de <HAL_GPIO_Init+0x20a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a4a      	ldr	r2, [pc, #296]	; (80043f0 <HAL_GPIO_Init+0x31c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <HAL_GPIO_Init+0x206>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a49      	ldr	r2, [pc, #292]	; (80043f4 <HAL_GPIO_Init+0x320>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d101      	bne.n	80042d6 <HAL_GPIO_Init+0x202>
 80042d2:	2306      	movs	r3, #6
 80042d4:	e00c      	b.n	80042f0 <HAL_GPIO_Init+0x21c>
 80042d6:	2307      	movs	r3, #7
 80042d8:	e00a      	b.n	80042f0 <HAL_GPIO_Init+0x21c>
 80042da:	2305      	movs	r3, #5
 80042dc:	e008      	b.n	80042f0 <HAL_GPIO_Init+0x21c>
 80042de:	2304      	movs	r3, #4
 80042e0:	e006      	b.n	80042f0 <HAL_GPIO_Init+0x21c>
 80042e2:	2303      	movs	r3, #3
 80042e4:	e004      	b.n	80042f0 <HAL_GPIO_Init+0x21c>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e002      	b.n	80042f0 <HAL_GPIO_Init+0x21c>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <HAL_GPIO_Init+0x21c>
 80042ee:	2300      	movs	r3, #0
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	f002 0203 	and.w	r2, r2, #3
 80042f6:	0092      	lsls	r2, r2, #2
 80042f8:	4093      	lsls	r3, r2
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004300:	4935      	ldr	r1, [pc, #212]	; (80043d8 <HAL_GPIO_Init+0x304>)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	089b      	lsrs	r3, r3, #2
 8004306:	3302      	adds	r3, #2
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800430e:	4b3a      	ldr	r3, [pc, #232]	; (80043f8 <HAL_GPIO_Init+0x324>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	43db      	mvns	r3, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4013      	ands	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004332:	4a31      	ldr	r2, [pc, #196]	; (80043f8 <HAL_GPIO_Init+0x324>)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004338:	4b2f      	ldr	r3, [pc, #188]	; (80043f8 <HAL_GPIO_Init+0x324>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800435c:	4a26      	ldr	r2, [pc, #152]	; (80043f8 <HAL_GPIO_Init+0x324>)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004362:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <HAL_GPIO_Init+0x324>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	43db      	mvns	r3, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4013      	ands	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004386:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <HAL_GPIO_Init+0x324>)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800438c:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <HAL_GPIO_Init+0x324>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043b0:	4a11      	ldr	r2, [pc, #68]	; (80043f8 <HAL_GPIO_Init+0x324>)
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	3301      	adds	r3, #1
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	2b0f      	cmp	r3, #15
 80043c0:	f67f ae96 	bls.w	80040f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	3724      	adds	r7, #36	; 0x24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40013800 	.word	0x40013800
 80043dc:	40020000 	.word	0x40020000
 80043e0:	40020400 	.word	0x40020400
 80043e4:	40020800 	.word	0x40020800
 80043e8:	40020c00 	.word	0x40020c00
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40021400 	.word	0x40021400
 80043f4:	40021800 	.word	0x40021800
 80043f8:	40013c00 	.word	0x40013c00

080043fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
 8004408:	4613      	mov	r3, r2
 800440a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800440c:	787b      	ldrb	r3, [r7, #1]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004418:	e003      	b.n	8004422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800441a:	887b      	ldrh	r3, [r7, #2]
 800441c:	041a      	lsls	r2, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	619a      	str	r2, [r3, #24]
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	603b      	str	r3, [r7, #0]
 800443e:	4b20      	ldr	r3, [pc, #128]	; (80044c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	4a1f      	ldr	r2, [pc, #124]	; (80044c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	6413      	str	r3, [r2, #64]	; 0x40
 800444a:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <HAL_PWREx_EnableOverDrive+0x90>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004456:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800445c:	f7fe f9ac 	bl	80027b8 <HAL_GetTick>
 8004460:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004462:	e009      	b.n	8004478 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004464:	f7fe f9a8 	bl	80027b8 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004472:	d901      	bls.n	8004478 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e01f      	b.n	80044b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004478:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004484:	d1ee      	bne.n	8004464 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004486:	4b11      	ldr	r3, [pc, #68]	; (80044cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004488:	2201      	movs	r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800448c:	f7fe f994 	bl	80027b8 <HAL_GetTick>
 8004490:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004492:	e009      	b.n	80044a8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004494:	f7fe f990 	bl	80027b8 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a2:	d901      	bls.n	80044a8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e007      	b.n	80044b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044a8:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <HAL_PWREx_EnableOverDrive+0x98>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b4:	d1ee      	bne.n	8004494 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40023800 	.word	0x40023800
 80044c4:	420e0040 	.word	0x420e0040
 80044c8:	40007000 	.word	0x40007000
 80044cc:	420e0044 	.word	0x420e0044

080044d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0cc      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044e4:	4b68      	ldr	r3, [pc, #416]	; (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d90c      	bls.n	800450c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f2:	4b65      	ldr	r3, [pc, #404]	; (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fa:	4b63      	ldr	r3, [pc, #396]	; (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0b8      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d020      	beq.n	800455a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004524:	4b59      	ldr	r3, [pc, #356]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4a58      	ldr	r2, [pc, #352]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800452e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800453c:	4b53      	ldr	r3, [pc, #332]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4a52      	ldr	r2, [pc, #328]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004548:	4b50      	ldr	r3, [pc, #320]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	494d      	ldr	r1, [pc, #308]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d044      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d107      	bne.n	800457e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456e:	4b47      	ldr	r3, [pc, #284]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d119      	bne.n	80045ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e07f      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d003      	beq.n	800458e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800458a:	2b03      	cmp	r3, #3
 800458c:	d107      	bne.n	800459e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800458e:	4b3f      	ldr	r3, [pc, #252]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e06f      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459e:	4b3b      	ldr	r3, [pc, #236]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e067      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ae:	4b37      	ldr	r3, [pc, #220]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f023 0203 	bic.w	r2, r3, #3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4934      	ldr	r1, [pc, #208]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045c0:	f7fe f8fa 	bl	80027b8 <HAL_GetTick>
 80045c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c6:	e00a      	b.n	80045de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c8:	f7fe f8f6 	bl	80027b8 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e04f      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	4b2b      	ldr	r3, [pc, #172]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 020c 	and.w	r2, r3, #12
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d1eb      	bne.n	80045c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045f0:	4b25      	ldr	r3, [pc, #148]	; (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d20c      	bcs.n	8004618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fe:	4b22      	ldr	r3, [pc, #136]	; (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004606:	4b20      	ldr	r3, [pc, #128]	; (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d001      	beq.n	8004618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e032      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004624:	4b19      	ldr	r3, [pc, #100]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4916      	ldr	r1, [pc, #88]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	4313      	orrs	r3, r2
 8004634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004642:	4b12      	ldr	r3, [pc, #72]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	490e      	ldr	r1, [pc, #56]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004656:	f000 f855 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 800465a:	4602      	mov	r2, r0
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	490a      	ldr	r1, [pc, #40]	; (8004690 <HAL_RCC_ClockConfig+0x1c0>)
 8004668:	5ccb      	ldrb	r3, [r1, r3]
 800466a:	fa22 f303 	lsr.w	r3, r2, r3
 800466e:	4a09      	ldr	r2, [pc, #36]	; (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 8004670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004672:	4b09      	ldr	r3, [pc, #36]	; (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7fe f85a 	bl	8002730 <HAL_InitTick>

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40023c00 	.word	0x40023c00
 800468c:	40023800 	.word	0x40023800
 8004690:	0800ae08 	.word	0x0800ae08
 8004694:	20000020 	.word	0x20000020
 8004698:	20000024 	.word	0x20000024

0800469c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046a0:	4b03      	ldr	r3, [pc, #12]	; (80046b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046a2:	681b      	ldr	r3, [r3, #0]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	20000020 	.word	0x20000020

080046b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046b8:	f7ff fff0 	bl	800469c <HAL_RCC_GetHCLKFreq>
 80046bc:	4602      	mov	r2, r0
 80046be:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	0a9b      	lsrs	r3, r3, #10
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	4903      	ldr	r1, [pc, #12]	; (80046d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ca:	5ccb      	ldrb	r3, [r1, r3]
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40023800 	.word	0x40023800
 80046d8:	0800ae18 	.word	0x0800ae18

080046dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046e0:	f7ff ffdc 	bl	800469c <HAL_RCC_GetHCLKFreq>
 80046e4:	4602      	mov	r2, r0
 80046e6:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	0b5b      	lsrs	r3, r3, #13
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	4903      	ldr	r1, [pc, #12]	; (8004700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046f2:	5ccb      	ldrb	r3, [r1, r3]
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40023800 	.word	0x40023800
 8004700:	0800ae18 	.word	0x0800ae18

08004704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004708:	b0ae      	sub	sp, #184	; 0xb8
 800470a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800472a:	4bcb      	ldr	r3, [pc, #812]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x354>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 030c 	and.w	r3, r3, #12
 8004732:	2b0c      	cmp	r3, #12
 8004734:	f200 8206 	bhi.w	8004b44 <HAL_RCC_GetSysClockFreq+0x440>
 8004738:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <HAL_RCC_GetSysClockFreq+0x3c>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004775 	.word	0x08004775
 8004744:	08004b45 	.word	0x08004b45
 8004748:	08004b45 	.word	0x08004b45
 800474c:	08004b45 	.word	0x08004b45
 8004750:	0800477d 	.word	0x0800477d
 8004754:	08004b45 	.word	0x08004b45
 8004758:	08004b45 	.word	0x08004b45
 800475c:	08004b45 	.word	0x08004b45
 8004760:	08004785 	.word	0x08004785
 8004764:	08004b45 	.word	0x08004b45
 8004768:	08004b45 	.word	0x08004b45
 800476c:	08004b45 	.word	0x08004b45
 8004770:	08004975 	.word	0x08004975
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004774:	4bb9      	ldr	r3, [pc, #740]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x358>)
 8004776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800477a:	e1e7      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800477c:	4bb8      	ldr	r3, [pc, #736]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x35c>)
 800477e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004782:	e1e3      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004784:	4bb4      	ldr	r3, [pc, #720]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800478c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004790:	4bb1      	ldr	r3, [pc, #708]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d071      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800479c:	4bae      	ldr	r3, [pc, #696]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x354>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	099b      	lsrs	r3, r3, #6
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047a8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80047ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047b8:	2300      	movs	r3, #0
 80047ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047c2:	4622      	mov	r2, r4
 80047c4:	462b      	mov	r3, r5
 80047c6:	f04f 0000 	mov.w	r0, #0
 80047ca:	f04f 0100 	mov.w	r1, #0
 80047ce:	0159      	lsls	r1, r3, #5
 80047d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047d4:	0150      	lsls	r0, r2, #5
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	4621      	mov	r1, r4
 80047dc:	1a51      	subs	r1, r2, r1
 80047de:	6439      	str	r1, [r7, #64]	; 0x40
 80047e0:	4629      	mov	r1, r5
 80047e2:	eb63 0301 	sbc.w	r3, r3, r1
 80047e6:	647b      	str	r3, [r7, #68]	; 0x44
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80047f4:	4649      	mov	r1, r9
 80047f6:	018b      	lsls	r3, r1, #6
 80047f8:	4641      	mov	r1, r8
 80047fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047fe:	4641      	mov	r1, r8
 8004800:	018a      	lsls	r2, r1, #6
 8004802:	4641      	mov	r1, r8
 8004804:	1a51      	subs	r1, r2, r1
 8004806:	63b9      	str	r1, [r7, #56]	; 0x38
 8004808:	4649      	mov	r1, r9
 800480a:	eb63 0301 	sbc.w	r3, r3, r1
 800480e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800481c:	4649      	mov	r1, r9
 800481e:	00cb      	lsls	r3, r1, #3
 8004820:	4641      	mov	r1, r8
 8004822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004826:	4641      	mov	r1, r8
 8004828:	00ca      	lsls	r2, r1, #3
 800482a:	4610      	mov	r0, r2
 800482c:	4619      	mov	r1, r3
 800482e:	4603      	mov	r3, r0
 8004830:	4622      	mov	r2, r4
 8004832:	189b      	adds	r3, r3, r2
 8004834:	633b      	str	r3, [r7, #48]	; 0x30
 8004836:	462b      	mov	r3, r5
 8004838:	460a      	mov	r2, r1
 800483a:	eb42 0303 	adc.w	r3, r2, r3
 800483e:	637b      	str	r3, [r7, #52]	; 0x34
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800484c:	4629      	mov	r1, r5
 800484e:	024b      	lsls	r3, r1, #9
 8004850:	4621      	mov	r1, r4
 8004852:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004856:	4621      	mov	r1, r4
 8004858:	024a      	lsls	r2, r1, #9
 800485a:	4610      	mov	r0, r2
 800485c:	4619      	mov	r1, r3
 800485e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004862:	2200      	movs	r2, #0
 8004864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004868:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800486c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004870:	f7fc fa8a 	bl	8000d88 <__aeabi_uldivmod>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4613      	mov	r3, r2
 800487a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800487e:	e067      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004880:	4b75      	ldr	r3, [pc, #468]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	099b      	lsrs	r3, r3, #6
 8004886:	2200      	movs	r2, #0
 8004888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800488c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004898:	67bb      	str	r3, [r7, #120]	; 0x78
 800489a:	2300      	movs	r3, #0
 800489c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800489e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80048a2:	4622      	mov	r2, r4
 80048a4:	462b      	mov	r3, r5
 80048a6:	f04f 0000 	mov.w	r0, #0
 80048aa:	f04f 0100 	mov.w	r1, #0
 80048ae:	0159      	lsls	r1, r3, #5
 80048b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b4:	0150      	lsls	r0, r2, #5
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4621      	mov	r1, r4
 80048bc:	1a51      	subs	r1, r2, r1
 80048be:	62b9      	str	r1, [r7, #40]	; 0x28
 80048c0:	4629      	mov	r1, r5
 80048c2:	eb63 0301 	sbc.w	r3, r3, r1
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80048d4:	4649      	mov	r1, r9
 80048d6:	018b      	lsls	r3, r1, #6
 80048d8:	4641      	mov	r1, r8
 80048da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048de:	4641      	mov	r1, r8
 80048e0:	018a      	lsls	r2, r1, #6
 80048e2:	4641      	mov	r1, r8
 80048e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80048e8:	4649      	mov	r1, r9
 80048ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004902:	4692      	mov	sl, r2
 8004904:	469b      	mov	fp, r3
 8004906:	4623      	mov	r3, r4
 8004908:	eb1a 0303 	adds.w	r3, sl, r3
 800490c:	623b      	str	r3, [r7, #32]
 800490e:	462b      	mov	r3, r5
 8004910:	eb4b 0303 	adc.w	r3, fp, r3
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004922:	4629      	mov	r1, r5
 8004924:	028b      	lsls	r3, r1, #10
 8004926:	4621      	mov	r1, r4
 8004928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800492c:	4621      	mov	r1, r4
 800492e:	028a      	lsls	r2, r1, #10
 8004930:	4610      	mov	r0, r2
 8004932:	4619      	mov	r1, r3
 8004934:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004938:	2200      	movs	r2, #0
 800493a:	673b      	str	r3, [r7, #112]	; 0x70
 800493c:	677a      	str	r2, [r7, #116]	; 0x74
 800493e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004942:	f7fc fa21 	bl	8000d88 <__aeabi_uldivmod>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4613      	mov	r3, r2
 800494c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004950:	4b41      	ldr	r3, [pc, #260]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	3301      	adds	r3, #1
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004966:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800496a:	fbb2 f3f3 	udiv	r3, r2, r3
 800496e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004972:	e0eb      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004974:	4b38      	ldr	r3, [pc, #224]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800497c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004980:	4b35      	ldr	r3, [pc, #212]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d06b      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800498c:	4b32      	ldr	r3, [pc, #200]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x354>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	099b      	lsrs	r3, r3, #6
 8004992:	2200      	movs	r2, #0
 8004994:	66bb      	str	r3, [r7, #104]	; 0x68
 8004996:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004998:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800499a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499e:	663b      	str	r3, [r7, #96]	; 0x60
 80049a0:	2300      	movs	r3, #0
 80049a2:	667b      	str	r3, [r7, #100]	; 0x64
 80049a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80049a8:	4622      	mov	r2, r4
 80049aa:	462b      	mov	r3, r5
 80049ac:	f04f 0000 	mov.w	r0, #0
 80049b0:	f04f 0100 	mov.w	r1, #0
 80049b4:	0159      	lsls	r1, r3, #5
 80049b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ba:	0150      	lsls	r0, r2, #5
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4621      	mov	r1, r4
 80049c2:	1a51      	subs	r1, r2, r1
 80049c4:	61b9      	str	r1, [r7, #24]
 80049c6:	4629      	mov	r1, r5
 80049c8:	eb63 0301 	sbc.w	r3, r3, r1
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80049da:	4659      	mov	r1, fp
 80049dc:	018b      	lsls	r3, r1, #6
 80049de:	4651      	mov	r1, sl
 80049e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049e4:	4651      	mov	r1, sl
 80049e6:	018a      	lsls	r2, r1, #6
 80049e8:	4651      	mov	r1, sl
 80049ea:	ebb2 0801 	subs.w	r8, r2, r1
 80049ee:	4659      	mov	r1, fp
 80049f0:	eb63 0901 	sbc.w	r9, r3, r1
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a08:	4690      	mov	r8, r2
 8004a0a:	4699      	mov	r9, r3
 8004a0c:	4623      	mov	r3, r4
 8004a0e:	eb18 0303 	adds.w	r3, r8, r3
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	462b      	mov	r3, r5
 8004a16:	eb49 0303 	adc.w	r3, r9, r3
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a28:	4629      	mov	r1, r5
 8004a2a:	024b      	lsls	r3, r1, #9
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a32:	4621      	mov	r1, r4
 8004a34:	024a      	lsls	r2, r1, #9
 8004a36:	4610      	mov	r0, r2
 8004a38:	4619      	mov	r1, r3
 8004a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a3e:	2200      	movs	r2, #0
 8004a40:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a42:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a48:	f7fc f99e 	bl	8000d88 <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4613      	mov	r3, r2
 8004a52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a56:	e065      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x420>
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	00f42400 	.word	0x00f42400
 8004a60:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a64:	4b3d      	ldr	r3, [pc, #244]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x458>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	099b      	lsrs	r3, r3, #6
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	4611      	mov	r1, r2
 8004a70:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a74:	653b      	str	r3, [r7, #80]	; 0x50
 8004a76:	2300      	movs	r3, #0
 8004a78:	657b      	str	r3, [r7, #84]	; 0x54
 8004a7a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004a7e:	4642      	mov	r2, r8
 8004a80:	464b      	mov	r3, r9
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f04f 0100 	mov.w	r1, #0
 8004a8a:	0159      	lsls	r1, r3, #5
 8004a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a90:	0150      	lsls	r0, r2, #5
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4641      	mov	r1, r8
 8004a98:	1a51      	subs	r1, r2, r1
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	018b      	lsls	r3, r1, #6
 8004ab4:	4651      	mov	r1, sl
 8004ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aba:	4651      	mov	r1, sl
 8004abc:	018a      	lsls	r2, r1, #6
 8004abe:	4651      	mov	r1, sl
 8004ac0:	1a54      	subs	r4, r2, r1
 8004ac2:	4659      	mov	r1, fp
 8004ac4:	eb63 0501 	sbc.w	r5, r3, r1
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	00eb      	lsls	r3, r5, #3
 8004ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ad6:	00e2      	lsls	r2, r4, #3
 8004ad8:	4614      	mov	r4, r2
 8004ada:	461d      	mov	r5, r3
 8004adc:	4643      	mov	r3, r8
 8004ade:	18e3      	adds	r3, r4, r3
 8004ae0:	603b      	str	r3, [r7, #0]
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	eb45 0303 	adc.w	r3, r5, r3
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004af6:	4629      	mov	r1, r5
 8004af8:	028b      	lsls	r3, r1, #10
 8004afa:	4621      	mov	r1, r4
 8004afc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b00:	4621      	mov	r1, r4
 8004b02:	028a      	lsls	r2, r1, #10
 8004b04:	4610      	mov	r0, r2
 8004b06:	4619      	mov	r1, r3
 8004b08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b10:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b16:	f7fc f937 	bl	8000d88 <__aeabi_uldivmod>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4613      	mov	r3, r2
 8004b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b24:	4b0d      	ldr	r3, [pc, #52]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x458>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	0f1b      	lsrs	r3, r3, #28
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b42:	e003      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004b46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	37b8      	adds	r7, #184	; 0xb8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	00f42400 	.word	0x00f42400

08004b64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e28d      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8083 	beq.w	8004c8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b84:	4b94      	ldr	r3, [pc, #592]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 030c 	and.w	r3, r3, #12
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d019      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b90:	4b91      	ldr	r3, [pc, #580]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d106      	bne.n	8004baa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b9c:	4b8e      	ldr	r3, [pc, #568]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba8:	d00c      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004baa:	4b8b      	ldr	r3, [pc, #556]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	d112      	bne.n	8004bdc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bb6:	4b88      	ldr	r3, [pc, #544]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc2:	d10b      	bne.n	8004bdc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc4:	4b84      	ldr	r3, [pc, #528]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d05b      	beq.n	8004c88 <HAL_RCC_OscConfig+0x124>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d157      	bne.n	8004c88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e25a      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be4:	d106      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x90>
 8004be6:	4b7c      	ldr	r3, [pc, #496]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a7b      	ldr	r2, [pc, #492]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	e01d      	b.n	8004c30 <HAL_RCC_OscConfig+0xcc>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bfc:	d10c      	bne.n	8004c18 <HAL_RCC_OscConfig+0xb4>
 8004bfe:	4b76      	ldr	r3, [pc, #472]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a75      	ldr	r2, [pc, #468]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	4b73      	ldr	r3, [pc, #460]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a72      	ldr	r2, [pc, #456]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	e00b      	b.n	8004c30 <HAL_RCC_OscConfig+0xcc>
 8004c18:	4b6f      	ldr	r3, [pc, #444]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a6e      	ldr	r2, [pc, #440]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	4b6c      	ldr	r3, [pc, #432]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a6b      	ldr	r2, [pc, #428]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d013      	beq.n	8004c60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7fd fdbe 	bl	80027b8 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c40:	f7fd fdba 	bl	80027b8 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	; 0x64
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e21f      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c52:	4b61      	ldr	r3, [pc, #388]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0f0      	beq.n	8004c40 <HAL_RCC_OscConfig+0xdc>
 8004c5e:	e014      	b.n	8004c8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c60:	f7fd fdaa 	bl	80027b8 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c68:	f7fd fda6 	bl	80027b8 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b64      	cmp	r3, #100	; 0x64
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e20b      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7a:	4b57      	ldr	r3, [pc, #348]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCC_OscConfig+0x104>
 8004c86:	e000      	b.n	8004c8a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d06f      	beq.n	8004d76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c96:	4b50      	ldr	r3, [pc, #320]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d017      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ca2:	4b4d      	ldr	r3, [pc, #308]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d105      	bne.n	8004cba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cae:	4b4a      	ldr	r3, [pc, #296]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cba:	4b47      	ldr	r3, [pc, #284]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cc2:	2b0c      	cmp	r3, #12
 8004cc4:	d11c      	bne.n	8004d00 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cc6:	4b44      	ldr	r3, [pc, #272]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d116      	bne.n	8004d00 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd2:	4b41      	ldr	r3, [pc, #260]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d005      	beq.n	8004cea <HAL_RCC_OscConfig+0x186>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d001      	beq.n	8004cea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e1d3      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cea:	4b3b      	ldr	r3, [pc, #236]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	4937      	ldr	r1, [pc, #220]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cfe:	e03a      	b.n	8004d76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d020      	beq.n	8004d4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d08:	4b34      	ldr	r3, [pc, #208]	; (8004ddc <HAL_RCC_OscConfig+0x278>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0e:	f7fd fd53 	bl	80027b8 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d16:	f7fd fd4f 	bl	80027b8 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e1b4      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d28:	4b2b      	ldr	r3, [pc, #172]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d34:	4b28      	ldr	r3, [pc, #160]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	4925      	ldr	r1, [pc, #148]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	600b      	str	r3, [r1, #0]
 8004d48:	e015      	b.n	8004d76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d4a:	4b24      	ldr	r3, [pc, #144]	; (8004ddc <HAL_RCC_OscConfig+0x278>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d50:	f7fd fd32 	bl	80027b8 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d58:	f7fd fd2e 	bl	80027b8 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e193      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6a:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d036      	beq.n	8004df0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d016      	beq.n	8004db8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d8a:	4b15      	ldr	r3, [pc, #84]	; (8004de0 <HAL_RCC_OscConfig+0x27c>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d90:	f7fd fd12 	bl	80027b8 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d98:	f7fd fd0e 	bl	80027b8 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e173      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004daa:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_RCC_OscConfig+0x274>)
 8004dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f0      	beq.n	8004d98 <HAL_RCC_OscConfig+0x234>
 8004db6:	e01b      	b.n	8004df0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db8:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <HAL_RCC_OscConfig+0x27c>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbe:	f7fd fcfb 	bl	80027b8 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc4:	e00e      	b.n	8004de4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dc6:	f7fd fcf7 	bl	80027b8 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d907      	bls.n	8004de4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e15c      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	42470000 	.word	0x42470000
 8004de0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de4:	4b8a      	ldr	r3, [pc, #552]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1ea      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8097 	beq.w	8004f2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e02:	4b83      	ldr	r3, [pc, #524]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10f      	bne.n	8004e2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	4b7f      	ldr	r3, [pc, #508]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	4a7e      	ldr	r2, [pc, #504]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e1e:	4b7c      	ldr	r3, [pc, #496]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e26:	60bb      	str	r3, [r7, #8]
 8004e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2e:	4b79      	ldr	r3, [pc, #484]	; (8005014 <HAL_RCC_OscConfig+0x4b0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d118      	bne.n	8004e6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e3a:	4b76      	ldr	r3, [pc, #472]	; (8005014 <HAL_RCC_OscConfig+0x4b0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a75      	ldr	r2, [pc, #468]	; (8005014 <HAL_RCC_OscConfig+0x4b0>)
 8004e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e46:	f7fd fcb7 	bl	80027b8 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e4e:	f7fd fcb3 	bl	80027b8 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e118      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e60:	4b6c      	ldr	r3, [pc, #432]	; (8005014 <HAL_RCC_OscConfig+0x4b0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0f0      	beq.n	8004e4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d106      	bne.n	8004e82 <HAL_RCC_OscConfig+0x31e>
 8004e74:	4b66      	ldr	r3, [pc, #408]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	4a65      	ldr	r2, [pc, #404]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e80:	e01c      	b.n	8004ebc <HAL_RCC_OscConfig+0x358>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b05      	cmp	r3, #5
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x340>
 8004e8a:	4b61      	ldr	r3, [pc, #388]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8e:	4a60      	ldr	r2, [pc, #384]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004e90:	f043 0304 	orr.w	r3, r3, #4
 8004e94:	6713      	str	r3, [r2, #112]	; 0x70
 8004e96:	4b5e      	ldr	r3, [pc, #376]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	4a5d      	ldr	r2, [pc, #372]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea2:	e00b      	b.n	8004ebc <HAL_RCC_OscConfig+0x358>
 8004ea4:	4b5a      	ldr	r3, [pc, #360]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	4a59      	ldr	r2, [pc, #356]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004eaa:	f023 0301 	bic.w	r3, r3, #1
 8004eae:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb0:	4b57      	ldr	r3, [pc, #348]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb4:	4a56      	ldr	r2, [pc, #344]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004eb6:	f023 0304 	bic.w	r3, r3, #4
 8004eba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d015      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec4:	f7fd fc78 	bl	80027b8 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eca:	e00a      	b.n	8004ee2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ecc:	f7fd fc74 	bl	80027b8 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e0d7      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee2:	4b4b      	ldr	r3, [pc, #300]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0ee      	beq.n	8004ecc <HAL_RCC_OscConfig+0x368>
 8004eee:	e014      	b.n	8004f1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef0:	f7fd fc62 	bl	80027b8 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef8:	f7fd fc5e 	bl	80027b8 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e0c1      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f0e:	4b40      	ldr	r3, [pc, #256]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1ee      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f1a:	7dfb      	ldrb	r3, [r7, #23]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d105      	bne.n	8004f2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f20:	4b3b      	ldr	r3, [pc, #236]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	4a3a      	ldr	r2, [pc, #232]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80ad 	beq.w	8005090 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f36:	4b36      	ldr	r3, [pc, #216]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d060      	beq.n	8005004 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d145      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4a:	4b33      	ldr	r3, [pc, #204]	; (8005018 <HAL_RCC_OscConfig+0x4b4>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fd fc32 	bl	80027b8 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fd fc2e 	bl	80027b8 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e093      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6a:	4b29      	ldr	r3, [pc, #164]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69da      	ldr	r2, [r3, #28]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	019b      	lsls	r3, r3, #6
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	041b      	lsls	r3, r3, #16
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	061b      	lsls	r3, r3, #24
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	071b      	lsls	r3, r3, #28
 8004fa2:	491b      	ldr	r1, [pc, #108]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa8:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <HAL_RCC_OscConfig+0x4b4>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fae:	f7fd fc03 	bl	80027b8 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb6:	f7fd fbff 	bl	80027b8 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e064      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc8:	4b11      	ldr	r3, [pc, #68]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x452>
 8004fd4:	e05c      	b.n	8005090 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd6:	4b10      	ldr	r3, [pc, #64]	; (8005018 <HAL_RCC_OscConfig+0x4b4>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fd fbec 	bl	80027b8 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fd fbe8 	bl	80027b8 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e04d      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <HAL_RCC_OscConfig+0x4ac>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x480>
 8005002:	e045      	b.n	8005090 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d107      	bne.n	800501c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e040      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
 8005010:	40023800 	.word	0x40023800
 8005014:	40007000 	.word	0x40007000
 8005018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800501c:	4b1f      	ldr	r3, [pc, #124]	; (800509c <HAL_RCC_OscConfig+0x538>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d030      	beq.n	800508c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005034:	429a      	cmp	r2, r3
 8005036:	d129      	bne.n	800508c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005042:	429a      	cmp	r2, r3
 8005044:	d122      	bne.n	800508c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800504c:	4013      	ands	r3, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005054:	4293      	cmp	r3, r2
 8005056:	d119      	bne.n	800508c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005062:	085b      	lsrs	r3, r3, #1
 8005064:	3b01      	subs	r3, #1
 8005066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005068:	429a      	cmp	r2, r3
 800506a:	d10f      	bne.n	800508c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005078:	429a      	cmp	r2, r3
 800507a:	d107      	bne.n	800508c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005088:	429a      	cmp	r2, r3
 800508a:	d001      	beq.n	8005090 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40023800 	.word	0x40023800

080050a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e041      	b.n	8005136 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fd f8ea 	bl	80022a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3304      	adds	r3, #4
 80050dc:	4619      	mov	r1, r3
 80050de:	4610      	mov	r0, r2
 80050e0:	f000 fabe 	bl	8005660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	d001      	beq.n	8005158 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e046      	b.n	80051e6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a23      	ldr	r2, [pc, #140]	; (80051f4 <HAL_TIM_Base_Start+0xb4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d022      	beq.n	80051b0 <HAL_TIM_Base_Start+0x70>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005172:	d01d      	beq.n	80051b0 <HAL_TIM_Base_Start+0x70>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1f      	ldr	r2, [pc, #124]	; (80051f8 <HAL_TIM_Base_Start+0xb8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d018      	beq.n	80051b0 <HAL_TIM_Base_Start+0x70>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <HAL_TIM_Base_Start+0xbc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d013      	beq.n	80051b0 <HAL_TIM_Base_Start+0x70>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1c      	ldr	r2, [pc, #112]	; (8005200 <HAL_TIM_Base_Start+0xc0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00e      	beq.n	80051b0 <HAL_TIM_Base_Start+0x70>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1b      	ldr	r2, [pc, #108]	; (8005204 <HAL_TIM_Base_Start+0xc4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d009      	beq.n	80051b0 <HAL_TIM_Base_Start+0x70>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a19      	ldr	r2, [pc, #100]	; (8005208 <HAL_TIM_Base_Start+0xc8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d004      	beq.n	80051b0 <HAL_TIM_Base_Start+0x70>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a18      	ldr	r2, [pc, #96]	; (800520c <HAL_TIM_Base_Start+0xcc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d111      	bne.n	80051d4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b06      	cmp	r3, #6
 80051c0:	d010      	beq.n	80051e4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d2:	e007      	b.n	80051e4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40010000 	.word	0x40010000
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800
 8005200:	40000c00 	.word	0x40000c00
 8005204:	40010400 	.word	0x40010400
 8005208:	40014000 	.word	0x40014000
 800520c:	40001800 	.word	0x40001800

08005210 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6a1a      	ldr	r2, [r3, #32]
 800521e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005222:	4013      	ands	r3, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10f      	bne.n	8005248 <HAL_TIM_Base_Stop+0x38>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6a1a      	ldr	r2, [r3, #32]
 800522e:	f240 4344 	movw	r3, #1092	; 0x444
 8005232:	4013      	ands	r3, r2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d107      	bne.n	8005248 <HAL_TIM_Base_Stop+0x38>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0201 	bic.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b082      	sub	sp, #8
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b02      	cmp	r3, #2
 8005272:	d122      	bne.n	80052ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b02      	cmp	r3, #2
 8005280:	d11b      	bne.n	80052ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f06f 0202 	mvn.w	r2, #2
 800528a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	f003 0303 	and.w	r3, r3, #3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f9bf 	bl	8005624 <HAL_TIM_IC_CaptureCallback>
 80052a6:	e005      	b.n	80052b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f9b1 	bl	8005610 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f9c2 	bl	8005638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d122      	bne.n	800530e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d11b      	bne.n	800530e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f06f 0204 	mvn.w	r2, #4
 80052de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f995 	bl	8005624 <HAL_TIM_IC_CaptureCallback>
 80052fa:	e005      	b.n	8005308 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f987 	bl	8005610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f998 	bl	8005638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f003 0308 	and.w	r3, r3, #8
 8005318:	2b08      	cmp	r3, #8
 800531a:	d122      	bne.n	8005362 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b08      	cmp	r3, #8
 8005328:	d11b      	bne.n	8005362 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f06f 0208 	mvn.w	r2, #8
 8005332:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2204      	movs	r2, #4
 8005338:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	f003 0303 	and.w	r3, r3, #3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f96b 	bl	8005624 <HAL_TIM_IC_CaptureCallback>
 800534e:	e005      	b.n	800535c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f95d 	bl	8005610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f96e 	bl	8005638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2b10      	cmp	r3, #16
 800536e:	d122      	bne.n	80053b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b10      	cmp	r3, #16
 800537c:	d11b      	bne.n	80053b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f06f 0210 	mvn.w	r2, #16
 8005386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2208      	movs	r2, #8
 800538c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f941 	bl	8005624 <HAL_TIM_IC_CaptureCallback>
 80053a2:	e005      	b.n	80053b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f933 	bl	8005610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f944 	bl	8005638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d10e      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d107      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f06f 0201 	mvn.w	r2, #1
 80053da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f90d 	bl	80055fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ec:	2b80      	cmp	r3, #128	; 0x80
 80053ee:	d10e      	bne.n	800540e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	2b80      	cmp	r3, #128	; 0x80
 80053fc:	d107      	bne.n	800540e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fae9 	bl	80059e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	d10e      	bne.n	800543a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005426:	2b40      	cmp	r3, #64	; 0x40
 8005428:	d107      	bne.n	800543a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f909 	bl	800564c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f003 0320 	and.w	r3, r3, #32
 8005444:	2b20      	cmp	r3, #32
 8005446:	d10e      	bne.n	8005466 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b20      	cmp	r3, #32
 8005454:	d107      	bne.n	8005466 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f06f 0220 	mvn.w	r2, #32
 800545e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fab3 	bl	80059cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_TIM_ConfigClockSource+0x1c>
 8005486:	2302      	movs	r3, #2
 8005488:	e0b4      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x186>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054b0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c2:	d03e      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0xd4>
 80054c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c8:	f200 8087 	bhi.w	80055da <HAL_TIM_ConfigClockSource+0x16c>
 80054cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d0:	f000 8086 	beq.w	80055e0 <HAL_TIM_ConfigClockSource+0x172>
 80054d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d8:	d87f      	bhi.n	80055da <HAL_TIM_ConfigClockSource+0x16c>
 80054da:	2b70      	cmp	r3, #112	; 0x70
 80054dc:	d01a      	beq.n	8005514 <HAL_TIM_ConfigClockSource+0xa6>
 80054de:	2b70      	cmp	r3, #112	; 0x70
 80054e0:	d87b      	bhi.n	80055da <HAL_TIM_ConfigClockSource+0x16c>
 80054e2:	2b60      	cmp	r3, #96	; 0x60
 80054e4:	d050      	beq.n	8005588 <HAL_TIM_ConfigClockSource+0x11a>
 80054e6:	2b60      	cmp	r3, #96	; 0x60
 80054e8:	d877      	bhi.n	80055da <HAL_TIM_ConfigClockSource+0x16c>
 80054ea:	2b50      	cmp	r3, #80	; 0x50
 80054ec:	d03c      	beq.n	8005568 <HAL_TIM_ConfigClockSource+0xfa>
 80054ee:	2b50      	cmp	r3, #80	; 0x50
 80054f0:	d873      	bhi.n	80055da <HAL_TIM_ConfigClockSource+0x16c>
 80054f2:	2b40      	cmp	r3, #64	; 0x40
 80054f4:	d058      	beq.n	80055a8 <HAL_TIM_ConfigClockSource+0x13a>
 80054f6:	2b40      	cmp	r3, #64	; 0x40
 80054f8:	d86f      	bhi.n	80055da <HAL_TIM_ConfigClockSource+0x16c>
 80054fa:	2b30      	cmp	r3, #48	; 0x30
 80054fc:	d064      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x15a>
 80054fe:	2b30      	cmp	r3, #48	; 0x30
 8005500:	d86b      	bhi.n	80055da <HAL_TIM_ConfigClockSource+0x16c>
 8005502:	2b20      	cmp	r3, #32
 8005504:	d060      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x15a>
 8005506:	2b20      	cmp	r3, #32
 8005508:	d867      	bhi.n	80055da <HAL_TIM_ConfigClockSource+0x16c>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d05c      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x15a>
 800550e:	2b10      	cmp	r3, #16
 8005510:	d05a      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x15a>
 8005512:	e062      	b.n	80055da <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	6899      	ldr	r1, [r3, #8]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f000 f9b6 	bl	8005894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005536:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	609a      	str	r2, [r3, #8]
      break;
 8005540:	e04f      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6899      	ldr	r1, [r3, #8]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f000 f99f 	bl	8005894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005564:	609a      	str	r2, [r3, #8]
      break;
 8005566:	e03c      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	461a      	mov	r2, r3
 8005576:	f000 f913 	bl	80057a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2150      	movs	r1, #80	; 0x50
 8005580:	4618      	mov	r0, r3
 8005582:	f000 f96c 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 8005586:	e02c      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	6859      	ldr	r1, [r3, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	461a      	mov	r2, r3
 8005596:	f000 f932 	bl	80057fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2160      	movs	r1, #96	; 0x60
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 f95c 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 80055a6:	e01c      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	6859      	ldr	r1, [r3, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	461a      	mov	r2, r3
 80055b6:	f000 f8f3 	bl	80057a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2140      	movs	r1, #64	; 0x40
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 f94c 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 80055c6:	e00c      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f000 f943 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 80055d8:	e003      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	73fb      	strb	r3, [r7, #15]
      break;
 80055de:	e000      	b.n	80055e2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a40      	ldr	r2, [pc, #256]	; (8005774 <TIM_Base_SetConfig+0x114>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567e:	d00f      	beq.n	80056a0 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a3d      	ldr	r2, [pc, #244]	; (8005778 <TIM_Base_SetConfig+0x118>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00b      	beq.n	80056a0 <TIM_Base_SetConfig+0x40>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a3c      	ldr	r2, [pc, #240]	; (800577c <TIM_Base_SetConfig+0x11c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d007      	beq.n	80056a0 <TIM_Base_SetConfig+0x40>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a3b      	ldr	r2, [pc, #236]	; (8005780 <TIM_Base_SetConfig+0x120>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_Base_SetConfig+0x40>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a3a      	ldr	r2, [pc, #232]	; (8005784 <TIM_Base_SetConfig+0x124>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d108      	bne.n	80056b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2f      	ldr	r2, [pc, #188]	; (8005774 <TIM_Base_SetConfig+0x114>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d02b      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c0:	d027      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2c      	ldr	r2, [pc, #176]	; (8005778 <TIM_Base_SetConfig+0x118>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d023      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a2b      	ldr	r2, [pc, #172]	; (800577c <TIM_Base_SetConfig+0x11c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d01f      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2a      	ldr	r2, [pc, #168]	; (8005780 <TIM_Base_SetConfig+0x120>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d01b      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a29      	ldr	r2, [pc, #164]	; (8005784 <TIM_Base_SetConfig+0x124>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d017      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a28      	ldr	r2, [pc, #160]	; (8005788 <TIM_Base_SetConfig+0x128>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a27      	ldr	r2, [pc, #156]	; (800578c <TIM_Base_SetConfig+0x12c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00f      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a26      	ldr	r2, [pc, #152]	; (8005790 <TIM_Base_SetConfig+0x130>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a25      	ldr	r2, [pc, #148]	; (8005794 <TIM_Base_SetConfig+0x134>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a24      	ldr	r2, [pc, #144]	; (8005798 <TIM_Base_SetConfig+0x138>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a23      	ldr	r2, [pc, #140]	; (800579c <TIM_Base_SetConfig+0x13c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d108      	bne.n	8005724 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a0a      	ldr	r2, [pc, #40]	; (8005774 <TIM_Base_SetConfig+0x114>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d003      	beq.n	8005758 <TIM_Base_SetConfig+0xf8>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a0c      	ldr	r2, [pc, #48]	; (8005784 <TIM_Base_SetConfig+0x124>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d103      	bne.n	8005760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	615a      	str	r2, [r3, #20]
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40010000 	.word	0x40010000
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40000c00 	.word	0x40000c00
 8005784:	40010400 	.word	0x40010400
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400
 8005790:	40014800 	.word	0x40014800
 8005794:	40001800 	.word	0x40001800
 8005798:	40001c00 	.word	0x40001c00
 800579c:	40002000 	.word	0x40002000

080057a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f023 0201 	bic.w	r2, r3, #1
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f023 030a 	bic.w	r3, r3, #10
 80057dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	621a      	str	r2, [r3, #32]
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057fe:	b480      	push	{r7}
 8005800:	b087      	sub	sp, #28
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f023 0210 	bic.w	r2, r3, #16
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	031b      	lsls	r3, r3, #12
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800583a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	f043 0307 	orr.w	r3, r3, #7
 8005880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	609a      	str	r2, [r3, #8]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	021a      	lsls	r2, r3, #8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	bf00      	nop
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e05a      	b.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a21      	ldr	r2, [pc, #132]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d022      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005938:	d01d      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1d      	ldr	r2, [pc, #116]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d018      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1b      	ldr	r2, [pc, #108]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d013      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1a      	ldr	r2, [pc, #104]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00e      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a18      	ldr	r2, [pc, #96]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d009      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a17      	ldr	r2, [pc, #92]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a15      	ldr	r2, [pc, #84]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d10c      	bne.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800597c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	4313      	orrs	r3, r2
 8005986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	40010400 	.word	0x40010400
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40001800 	.word	0x40001800

080059cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e03f      	b.n	8005a86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fc fc84 	bl	8002328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2224      	movs	r2, #36	; 0x24
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f829 	bl	8005a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695a      	ldr	r2, [r3, #20]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a94:	b0c0      	sub	sp, #256	; 0x100
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aac:	68d9      	ldr	r1, [r3, #12]
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	ea40 0301 	orr.w	r3, r0, r1
 8005ab8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ae8:	f021 010c 	bic.w	r1, r1, #12
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005af6:	430b      	orrs	r3, r1
 8005af8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0a:	6999      	ldr	r1, [r3, #24]
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	ea40 0301 	orr.w	r3, r0, r1
 8005b16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b8f      	ldr	r3, [pc, #572]	; (8005d5c <UART_SetConfig+0x2cc>)
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d005      	beq.n	8005b30 <UART_SetConfig+0xa0>
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b8d      	ldr	r3, [pc, #564]	; (8005d60 <UART_SetConfig+0x2d0>)
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d104      	bne.n	8005b3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b30:	f7fe fdd4 	bl	80046dc <HAL_RCC_GetPCLK2Freq>
 8005b34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b38:	e003      	b.n	8005b42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b3a:	f7fe fdbb 	bl	80046b4 <HAL_RCC_GetPCLK1Freq>
 8005b3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b4c:	f040 810c 	bne.w	8005d68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b62:	4622      	mov	r2, r4
 8005b64:	462b      	mov	r3, r5
 8005b66:	1891      	adds	r1, r2, r2
 8005b68:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b6a:	415b      	adcs	r3, r3
 8005b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b72:	4621      	mov	r1, r4
 8005b74:	eb12 0801 	adds.w	r8, r2, r1
 8005b78:	4629      	mov	r1, r5
 8005b7a:	eb43 0901 	adc.w	r9, r3, r1
 8005b7e:	f04f 0200 	mov.w	r2, #0
 8005b82:	f04f 0300 	mov.w	r3, #0
 8005b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b92:	4690      	mov	r8, r2
 8005b94:	4699      	mov	r9, r3
 8005b96:	4623      	mov	r3, r4
 8005b98:	eb18 0303 	adds.w	r3, r8, r3
 8005b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ba0:	462b      	mov	r3, r5
 8005ba2:	eb49 0303 	adc.w	r3, r9, r3
 8005ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	18db      	adds	r3, r3, r3
 8005bc2:	653b      	str	r3, [r7, #80]	; 0x50
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	eb42 0303 	adc.w	r3, r2, r3
 8005bca:	657b      	str	r3, [r7, #84]	; 0x54
 8005bcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005bd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005bd4:	f7fb f8d8 	bl	8000d88 <__aeabi_uldivmod>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4b61      	ldr	r3, [pc, #388]	; (8005d64 <UART_SetConfig+0x2d4>)
 8005bde:	fba3 2302 	umull	r2, r3, r3, r2
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	011c      	lsls	r4, r3, #4
 8005be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bf0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005bf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005bf8:	4642      	mov	r2, r8
 8005bfa:	464b      	mov	r3, r9
 8005bfc:	1891      	adds	r1, r2, r2
 8005bfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c00:	415b      	adcs	r3, r3
 8005c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c08:	4641      	mov	r1, r8
 8005c0a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c0e:	4649      	mov	r1, r9
 8005c10:	eb43 0b01 	adc.w	fp, r3, r1
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c28:	4692      	mov	sl, r2
 8005c2a:	469b      	mov	fp, r3
 8005c2c:	4643      	mov	r3, r8
 8005c2e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c36:	464b      	mov	r3, r9
 8005c38:	eb4b 0303 	adc.w	r3, fp, r3
 8005c3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c54:	460b      	mov	r3, r1
 8005c56:	18db      	adds	r3, r3, r3
 8005c58:	643b      	str	r3, [r7, #64]	; 0x40
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	eb42 0303 	adc.w	r3, r2, r3
 8005c60:	647b      	str	r3, [r7, #68]	; 0x44
 8005c62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c6a:	f7fb f88d 	bl	8000d88 <__aeabi_uldivmod>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4611      	mov	r1, r2
 8005c74:	4b3b      	ldr	r3, [pc, #236]	; (8005d64 <UART_SetConfig+0x2d4>)
 8005c76:	fba3 2301 	umull	r2, r3, r3, r1
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	2264      	movs	r2, #100	; 0x64
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	1acb      	subs	r3, r1, r3
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c8a:	4b36      	ldr	r3, [pc, #216]	; (8005d64 <UART_SetConfig+0x2d4>)
 8005c8c:	fba3 2302 	umull	r2, r3, r3, r2
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c98:	441c      	add	r4, r3
 8005c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ca4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ca8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cac:	4642      	mov	r2, r8
 8005cae:	464b      	mov	r3, r9
 8005cb0:	1891      	adds	r1, r2, r2
 8005cb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cb4:	415b      	adcs	r3, r3
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	1851      	adds	r1, r2, r1
 8005cc0:	6339      	str	r1, [r7, #48]	; 0x30
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	414b      	adcs	r3, r1
 8005cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005cd4:	4659      	mov	r1, fp
 8005cd6:	00cb      	lsls	r3, r1, #3
 8005cd8:	4651      	mov	r1, sl
 8005cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cde:	4651      	mov	r1, sl
 8005ce0:	00ca      	lsls	r2, r1, #3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	4642      	mov	r2, r8
 8005cea:	189b      	adds	r3, r3, r2
 8005cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cf0:	464b      	mov	r3, r9
 8005cf2:	460a      	mov	r2, r1
 8005cf4:	eb42 0303 	adc.w	r3, r2, r3
 8005cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d10:	460b      	mov	r3, r1
 8005d12:	18db      	adds	r3, r3, r3
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d16:	4613      	mov	r3, r2
 8005d18:	eb42 0303 	adc.w	r3, r2, r3
 8005d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d26:	f7fb f82f 	bl	8000d88 <__aeabi_uldivmod>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4b0d      	ldr	r3, [pc, #52]	; (8005d64 <UART_SetConfig+0x2d4>)
 8005d30:	fba3 1302 	umull	r1, r3, r3, r2
 8005d34:	095b      	lsrs	r3, r3, #5
 8005d36:	2164      	movs	r1, #100	; 0x64
 8005d38:	fb01 f303 	mul.w	r3, r1, r3
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	3332      	adds	r3, #50	; 0x32
 8005d42:	4a08      	ldr	r2, [pc, #32]	; (8005d64 <UART_SetConfig+0x2d4>)
 8005d44:	fba2 2303 	umull	r2, r3, r2, r3
 8005d48:	095b      	lsrs	r3, r3, #5
 8005d4a:	f003 0207 	and.w	r2, r3, #7
 8005d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4422      	add	r2, r4
 8005d56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d58:	e105      	b.n	8005f66 <UART_SetConfig+0x4d6>
 8005d5a:	bf00      	nop
 8005d5c:	40011000 	.word	0x40011000
 8005d60:	40011400 	.word	0x40011400
 8005d64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d7a:	4642      	mov	r2, r8
 8005d7c:	464b      	mov	r3, r9
 8005d7e:	1891      	adds	r1, r2, r2
 8005d80:	6239      	str	r1, [r7, #32]
 8005d82:	415b      	adcs	r3, r3
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
 8005d86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d8a:	4641      	mov	r1, r8
 8005d8c:	1854      	adds	r4, r2, r1
 8005d8e:	4649      	mov	r1, r9
 8005d90:	eb43 0501 	adc.w	r5, r3, r1
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	00eb      	lsls	r3, r5, #3
 8005d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005da2:	00e2      	lsls	r2, r4, #3
 8005da4:	4614      	mov	r4, r2
 8005da6:	461d      	mov	r5, r3
 8005da8:	4643      	mov	r3, r8
 8005daa:	18e3      	adds	r3, r4, r3
 8005dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005db0:	464b      	mov	r3, r9
 8005db2:	eb45 0303 	adc.w	r3, r5, r3
 8005db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dca:	f04f 0200 	mov.w	r2, #0
 8005dce:	f04f 0300 	mov.w	r3, #0
 8005dd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	008b      	lsls	r3, r1, #2
 8005dda:	4621      	mov	r1, r4
 8005ddc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005de0:	4621      	mov	r1, r4
 8005de2:	008a      	lsls	r2, r1, #2
 8005de4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005de8:	f7fa ffce 	bl	8000d88 <__aeabi_uldivmod>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4b60      	ldr	r3, [pc, #384]	; (8005f74 <UART_SetConfig+0x4e4>)
 8005df2:	fba3 2302 	umull	r2, r3, r3, r2
 8005df6:	095b      	lsrs	r3, r3, #5
 8005df8:	011c      	lsls	r4, r3, #4
 8005dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	464b      	mov	r3, r9
 8005e10:	1891      	adds	r1, r2, r2
 8005e12:	61b9      	str	r1, [r7, #24]
 8005e14:	415b      	adcs	r3, r3
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e1c:	4641      	mov	r1, r8
 8005e1e:	1851      	adds	r1, r2, r1
 8005e20:	6139      	str	r1, [r7, #16]
 8005e22:	4649      	mov	r1, r9
 8005e24:	414b      	adcs	r3, r1
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e34:	4659      	mov	r1, fp
 8005e36:	00cb      	lsls	r3, r1, #3
 8005e38:	4651      	mov	r1, sl
 8005e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e3e:	4651      	mov	r1, sl
 8005e40:	00ca      	lsls	r2, r1, #3
 8005e42:	4610      	mov	r0, r2
 8005e44:	4619      	mov	r1, r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	4642      	mov	r2, r8
 8005e4a:	189b      	adds	r3, r3, r2
 8005e4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e50:	464b      	mov	r3, r9
 8005e52:	460a      	mov	r2, r1
 8005e54:	eb42 0303 	adc.w	r3, r2, r3
 8005e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e74:	4649      	mov	r1, r9
 8005e76:	008b      	lsls	r3, r1, #2
 8005e78:	4641      	mov	r1, r8
 8005e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e7e:	4641      	mov	r1, r8
 8005e80:	008a      	lsls	r2, r1, #2
 8005e82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e86:	f7fa ff7f 	bl	8000d88 <__aeabi_uldivmod>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4b39      	ldr	r3, [pc, #228]	; (8005f74 <UART_SetConfig+0x4e4>)
 8005e90:	fba3 1302 	umull	r1, r3, r3, r2
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	2164      	movs	r1, #100	; 0x64
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	3332      	adds	r3, #50	; 0x32
 8005ea2:	4a34      	ldr	r2, [pc, #208]	; (8005f74 <UART_SetConfig+0x4e4>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eae:	441c      	add	r4, r3
 8005eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	673b      	str	r3, [r7, #112]	; 0x70
 8005eb8:	677a      	str	r2, [r7, #116]	; 0x74
 8005eba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ebe:	4642      	mov	r2, r8
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	1891      	adds	r1, r2, r2
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	415b      	adcs	r3, r3
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ece:	4641      	mov	r1, r8
 8005ed0:	1851      	adds	r1, r2, r1
 8005ed2:	6039      	str	r1, [r7, #0]
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	414b      	adcs	r3, r1
 8005ed8:	607b      	str	r3, [r7, #4]
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ee6:	4659      	mov	r1, fp
 8005ee8:	00cb      	lsls	r3, r1, #3
 8005eea:	4651      	mov	r1, sl
 8005eec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ef0:	4651      	mov	r1, sl
 8005ef2:	00ca      	lsls	r2, r1, #3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4603      	mov	r3, r0
 8005efa:	4642      	mov	r2, r8
 8005efc:	189b      	adds	r3, r3, r2
 8005efe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f00:	464b      	mov	r3, r9
 8005f02:	460a      	mov	r2, r1
 8005f04:	eb42 0303 	adc.w	r3, r2, r3
 8005f08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	663b      	str	r3, [r7, #96]	; 0x60
 8005f14:	667a      	str	r2, [r7, #100]	; 0x64
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f22:	4649      	mov	r1, r9
 8005f24:	008b      	lsls	r3, r1, #2
 8005f26:	4641      	mov	r1, r8
 8005f28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	008a      	lsls	r2, r1, #2
 8005f30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f34:	f7fa ff28 	bl	8000d88 <__aeabi_uldivmod>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <UART_SetConfig+0x4e4>)
 8005f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	2164      	movs	r1, #100	; 0x64
 8005f46:	fb01 f303 	mul.w	r3, r1, r3
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	3332      	adds	r3, #50	; 0x32
 8005f50:	4a08      	ldr	r2, [pc, #32]	; (8005f74 <UART_SetConfig+0x4e4>)
 8005f52:	fba2 2303 	umull	r2, r3, r2, r3
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	f003 020f 	and.w	r2, r3, #15
 8005f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4422      	add	r2, r4
 8005f64:	609a      	str	r2, [r3, #8]
}
 8005f66:	bf00      	nop
 8005f68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f72:	bf00      	nop
 8005f74:	51eb851f 	.word	0x51eb851f

08005f78 <arm_max_f32>:
 8005f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7c:	1e4f      	subs	r7, r1, #1
 8005f7e:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8005f82:	f100 0e04 	add.w	lr, r0, #4
 8005f86:	edd0 7a00 	vldr	s15, [r0]
 8005f8a:	d058      	beq.n	800603e <arm_max_f32+0xc6>
 8005f8c:	3014      	adds	r0, #20
 8005f8e:	46c4      	mov	ip, r8
 8005f90:	2604      	movs	r6, #4
 8005f92:	2400      	movs	r4, #0
 8005f94:	ed10 6a04 	vldr	s12, [r0, #-16]
 8005f98:	ed50 6a03 	vldr	s13, [r0, #-12]
 8005f9c:	ed10 7a02 	vldr	s14, [r0, #-8]
 8005fa0:	ed50 5a01 	vldr	s11, [r0, #-4]
 8005fa4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8005fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fac:	bfc8      	it	gt
 8005fae:	eef0 7a46 	vmovgt.f32	s15, s12
 8005fb2:	f1a6 0503 	sub.w	r5, r6, #3
 8005fb6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005fba:	bfc8      	it	gt
 8005fbc:	462c      	movgt	r4, r5
 8005fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc2:	bf48      	it	mi
 8005fc4:	eef0 7a66 	vmovmi.f32	s15, s13
 8005fc8:	f1a6 0502 	sub.w	r5, r6, #2
 8005fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fd0:	bf48      	it	mi
 8005fd2:	462c      	movmi	r4, r5
 8005fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd8:	bf48      	it	mi
 8005fda:	eef0 7a47 	vmovmi.f32	s15, s14
 8005fde:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005fe2:	eef4 7ae5 	vcmpe.f32	s15, s11
 8005fe6:	bf48      	it	mi
 8005fe8:	462c      	movmi	r4, r5
 8005fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fee:	bf48      	it	mi
 8005ff0:	4634      	movmi	r4, r6
 8005ff2:	bf48      	it	mi
 8005ff4:	eef0 7a65 	vmovmi.f32	s15, s11
 8005ff8:	f1bc 0c01 	subs.w	ip, ip, #1
 8005ffc:	f100 0010 	add.w	r0, r0, #16
 8006000:	f106 0604 	add.w	r6, r6, #4
 8006004:	d1c6      	bne.n	8005f94 <arm_max_f32+0x1c>
 8006006:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 800600a:	f017 0003 	ands.w	r0, r7, #3
 800600e:	d018      	beq.n	8006042 <arm_max_f32+0xca>
 8006010:	1a08      	subs	r0, r1, r0
 8006012:	ecbe 7a01 	vldmia	lr!, {s14}
 8006016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800601a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800601e:	bfc8      	it	gt
 8006020:	4604      	movgt	r4, r0
 8006022:	f100 0001 	add.w	r0, r0, #1
 8006026:	bfd8      	it	le
 8006028:	eeb0 7a67 	vmovle.f32	s14, s15
 800602c:	4281      	cmp	r1, r0
 800602e:	eef0 7a47 	vmov.f32	s15, s14
 8006032:	d1ee      	bne.n	8006012 <arm_max_f32+0x9a>
 8006034:	ed82 7a00 	vstr	s14, [r2]
 8006038:	601c      	str	r4, [r3, #0]
 800603a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800603e:	4644      	mov	r4, r8
 8006040:	e7e3      	b.n	800600a <arm_max_f32+0x92>
 8006042:	eeb0 7a67 	vmov.f32	s14, s15
 8006046:	e7f5      	b.n	8006034 <arm_max_f32+0xbc>

08006048 <arm_rfft_fast_init_f32>:
 8006048:	084b      	lsrs	r3, r1, #1
 800604a:	2b80      	cmp	r3, #128	; 0x80
 800604c:	b410      	push	{r4}
 800604e:	8201      	strh	r1, [r0, #16]
 8006050:	8003      	strh	r3, [r0, #0]
 8006052:	d046      	beq.n	80060e2 <arm_rfft_fast_init_f32+0x9a>
 8006054:	d916      	bls.n	8006084 <arm_rfft_fast_init_f32+0x3c>
 8006056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800605a:	d03c      	beq.n	80060d6 <arm_rfft_fast_init_f32+0x8e>
 800605c:	d928      	bls.n	80060b0 <arm_rfft_fast_init_f32+0x68>
 800605e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006062:	d01f      	beq.n	80060a4 <arm_rfft_fast_init_f32+0x5c>
 8006064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006068:	d112      	bne.n	8006090 <arm_rfft_fast_init_f32+0x48>
 800606a:	4920      	ldr	r1, [pc, #128]	; (80060ec <arm_rfft_fast_init_f32+0xa4>)
 800606c:	4a20      	ldr	r2, [pc, #128]	; (80060f0 <arm_rfft_fast_init_f32+0xa8>)
 800606e:	4b21      	ldr	r3, [pc, #132]	; (80060f4 <arm_rfft_fast_init_f32+0xac>)
 8006070:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8006074:	8184      	strh	r4, [r0, #12]
 8006076:	6081      	str	r1, [r0, #8]
 8006078:	6042      	str	r2, [r0, #4]
 800607a:	6143      	str	r3, [r0, #20]
 800607c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006080:	2000      	movs	r0, #0
 8006082:	4770      	bx	lr
 8006084:	2b20      	cmp	r3, #32
 8006086:	d01c      	beq.n	80060c2 <arm_rfft_fast_init_f32+0x7a>
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d006      	beq.n	800609a <arm_rfft_fast_init_f32+0x52>
 800608c:	2b10      	cmp	r3, #16
 800608e:	d01d      	beq.n	80060cc <arm_rfft_fast_init_f32+0x84>
 8006090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006094:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	2438      	movs	r4, #56	; 0x38
 800609c:	4916      	ldr	r1, [pc, #88]	; (80060f8 <arm_rfft_fast_init_f32+0xb0>)
 800609e:	4a17      	ldr	r2, [pc, #92]	; (80060fc <arm_rfft_fast_init_f32+0xb4>)
 80060a0:	4b17      	ldr	r3, [pc, #92]	; (8006100 <arm_rfft_fast_init_f32+0xb8>)
 80060a2:	e7e7      	b.n	8006074 <arm_rfft_fast_init_f32+0x2c>
 80060a4:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80060a8:	4916      	ldr	r1, [pc, #88]	; (8006104 <arm_rfft_fast_init_f32+0xbc>)
 80060aa:	4a17      	ldr	r2, [pc, #92]	; (8006108 <arm_rfft_fast_init_f32+0xc0>)
 80060ac:	4b17      	ldr	r3, [pc, #92]	; (800610c <arm_rfft_fast_init_f32+0xc4>)
 80060ae:	e7e1      	b.n	8006074 <arm_rfft_fast_init_f32+0x2c>
 80060b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b4:	d1ec      	bne.n	8006090 <arm_rfft_fast_init_f32+0x48>
 80060b6:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80060ba:	4915      	ldr	r1, [pc, #84]	; (8006110 <arm_rfft_fast_init_f32+0xc8>)
 80060bc:	4a15      	ldr	r2, [pc, #84]	; (8006114 <arm_rfft_fast_init_f32+0xcc>)
 80060be:	4b16      	ldr	r3, [pc, #88]	; (8006118 <arm_rfft_fast_init_f32+0xd0>)
 80060c0:	e7d8      	b.n	8006074 <arm_rfft_fast_init_f32+0x2c>
 80060c2:	2430      	movs	r4, #48	; 0x30
 80060c4:	4915      	ldr	r1, [pc, #84]	; (800611c <arm_rfft_fast_init_f32+0xd4>)
 80060c6:	4a16      	ldr	r2, [pc, #88]	; (8006120 <arm_rfft_fast_init_f32+0xd8>)
 80060c8:	4b16      	ldr	r3, [pc, #88]	; (8006124 <arm_rfft_fast_init_f32+0xdc>)
 80060ca:	e7d3      	b.n	8006074 <arm_rfft_fast_init_f32+0x2c>
 80060cc:	2414      	movs	r4, #20
 80060ce:	4916      	ldr	r1, [pc, #88]	; (8006128 <arm_rfft_fast_init_f32+0xe0>)
 80060d0:	4a16      	ldr	r2, [pc, #88]	; (800612c <arm_rfft_fast_init_f32+0xe4>)
 80060d2:	4b17      	ldr	r3, [pc, #92]	; (8006130 <arm_rfft_fast_init_f32+0xe8>)
 80060d4:	e7ce      	b.n	8006074 <arm_rfft_fast_init_f32+0x2c>
 80060d6:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80060da:	4916      	ldr	r1, [pc, #88]	; (8006134 <arm_rfft_fast_init_f32+0xec>)
 80060dc:	4a16      	ldr	r2, [pc, #88]	; (8006138 <arm_rfft_fast_init_f32+0xf0>)
 80060de:	4b17      	ldr	r3, [pc, #92]	; (800613c <arm_rfft_fast_init_f32+0xf4>)
 80060e0:	e7c8      	b.n	8006074 <arm_rfft_fast_init_f32+0x2c>
 80060e2:	24d0      	movs	r4, #208	; 0xd0
 80060e4:	4916      	ldr	r1, [pc, #88]	; (8006140 <arm_rfft_fast_init_f32+0xf8>)
 80060e6:	4a17      	ldr	r2, [pc, #92]	; (8006144 <arm_rfft_fast_init_f32+0xfc>)
 80060e8:	4b17      	ldr	r3, [pc, #92]	; (8006148 <arm_rfft_fast_init_f32+0x100>)
 80060ea:	e7c3      	b.n	8006074 <arm_rfft_fast_init_f32+0x2c>
 80060ec:	08019c30 	.word	0x08019c30
 80060f0:	0800ae28 	.word	0x0800ae28
 80060f4:	08010f98 	.word	0x08010f98
 80060f8:	0800ef28 	.word	0x0800ef28
 80060fc:	0801b9f0 	.word	0x0801b9f0
 8006100:	0801dee0 	.word	0x0801dee0
 8006104:	08017918 	.word	0x08017918
 8006108:	08015818 	.word	0x08015818
 800610c:	0800ef98 	.word	0x0800ef98
 8006110:	0801db70 	.word	0x0801db70
 8006114:	08014f98 	.word	0x08014f98
 8006118:	0801bbf0 	.word	0x0801bbf0
 800611c:	080187d0 	.word	0x080187d0
 8006120:	08017818 	.word	0x08017818
 8006124:	0800ee28 	.word	0x0800ee28
 8006128:	08018728 	.word	0x08018728
 800612c:	08015798 	.word	0x08015798
 8006130:	08018750 	.word	0x08018750
 8006134:	0801c3f0 	.word	0x0801c3f0
 8006138:	08018c30 	.word	0x08018c30
 800613c:	0801c770 	.word	0x0801c770
 8006140:	0801e0e0 	.word	0x0801e0e0
 8006144:	08018830 	.word	0x08018830
 8006148:	0801d770 	.word	0x0801d770

0800614c <arm_rfft_fast_f32>:
 800614c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006150:	8a06      	ldrh	r6, [r0, #16]
 8006152:	0876      	lsrs	r6, r6, #1
 8006154:	4607      	mov	r7, r0
 8006156:	4615      	mov	r5, r2
 8006158:	8006      	strh	r6, [r0, #0]
 800615a:	460c      	mov	r4, r1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d15c      	bne.n	800621a <arm_rfft_fast_f32+0xce>
 8006160:	461a      	mov	r2, r3
 8006162:	2301      	movs	r3, #1
 8006164:	f000 fbe4 	bl	8006930 <arm_cfft_f32>
 8006168:	edd4 7a00 	vldr	s15, [r4]
 800616c:	ed94 7a01 	vldr	s14, [r4, #4]
 8006170:	883e      	ldrh	r6, [r7, #0]
 8006172:	6978      	ldr	r0, [r7, #20]
 8006174:	ee37 7a07 	vadd.f32	s14, s14, s14
 8006178:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800617c:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 8006180:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006184:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006188:	3e01      	subs	r6, #1
 800618a:	ee26 7a83 	vmul.f32	s14, s13, s6
 800618e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8006192:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8006196:	ed85 7a00 	vstr	s14, [r5]
 800619a:	edc5 7a01 	vstr	s15, [r5, #4]
 800619e:	3010      	adds	r0, #16
 80061a0:	f105 0210 	add.w	r2, r5, #16
 80061a4:	3b08      	subs	r3, #8
 80061a6:	f104 0110 	add.w	r1, r4, #16
 80061aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80061ae:	ed51 6a02 	vldr	s13, [r1, #-8]
 80061b2:	ed10 6a02 	vldr	s12, [r0, #-8]
 80061b6:	edd3 3a03 	vldr	s7, [r3, #12]
 80061ba:	ed11 5a01 	vldr	s10, [r1, #-4]
 80061be:	ed50 5a01 	vldr	s11, [r0, #-4]
 80061c2:	ee77 7a66 	vsub.f32	s15, s14, s13
 80061c6:	ee77 4a26 	vadd.f32	s9, s14, s13
 80061ca:	ee33 4a85 	vadd.f32	s8, s7, s10
 80061ce:	ee66 6a27 	vmul.f32	s13, s12, s15
 80061d2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80061d6:	ee35 5a63 	vsub.f32	s10, s10, s7
 80061da:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80061de:	ee77 7a05 	vadd.f32	s15, s14, s10
 80061e2:	ee26 6a04 	vmul.f32	s12, s12, s8
 80061e6:	ee65 5a84 	vmul.f32	s11, s11, s8
 80061ea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80061ee:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80061f2:	ee67 7a83 	vmul.f32	s15, s15, s6
 80061f6:	ee27 7a03 	vmul.f32	s14, s14, s6
 80061fa:	3e01      	subs	r6, #1
 80061fc:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006200:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006204:	f1a3 0308 	sub.w	r3, r3, #8
 8006208:	f101 0108 	add.w	r1, r1, #8
 800620c:	f100 0008 	add.w	r0, r0, #8
 8006210:	f102 0208 	add.w	r2, r2, #8
 8006214:	d1c9      	bne.n	80061aa <arm_rfft_fast_f32+0x5e>
 8006216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800621a:	edd1 7a00 	vldr	s15, [r1]
 800621e:	edd1 6a01 	vldr	s13, [r1, #4]
 8006222:	6941      	ldr	r1, [r0, #20]
 8006224:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006228:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800622c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8006230:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006234:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006238:	3e01      	subs	r6, #1
 800623a:	ed82 7a00 	vstr	s14, [r2]
 800623e:	edc2 7a01 	vstr	s15, [r2, #4]
 8006242:	00f0      	lsls	r0, r6, #3
 8006244:	b3ee      	cbz	r6, 80062c2 <arm_rfft_fast_f32+0x176>
 8006246:	3808      	subs	r0, #8
 8006248:	f101 0e10 	add.w	lr, r1, #16
 800624c:	4420      	add	r0, r4
 800624e:	f104 0110 	add.w	r1, r4, #16
 8006252:	f102 0c10 	add.w	ip, r2, #16
 8006256:	ed90 7a02 	vldr	s14, [r0, #8]
 800625a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800625e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8006262:	ed90 4a03 	vldr	s8, [r0, #12]
 8006266:	ed11 5a01 	vldr	s10, [r1, #-4]
 800626a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800626e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8006272:	ee74 4a05 	vadd.f32	s9, s8, s10
 8006276:	ee26 3a27 	vmul.f32	s6, s12, s15
 800627a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800627e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006282:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8006286:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800628a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800628e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006292:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8006296:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800629a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800629e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80062a2:	ee27 7a23 	vmul.f32	s14, s14, s7
 80062a6:	3e01      	subs	r6, #1
 80062a8:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80062ac:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80062b0:	f1a0 0008 	sub.w	r0, r0, #8
 80062b4:	f101 0108 	add.w	r1, r1, #8
 80062b8:	f10e 0e08 	add.w	lr, lr, #8
 80062bc:	f10c 0c08 	add.w	ip, ip, #8
 80062c0:	d1c9      	bne.n	8006256 <arm_rfft_fast_f32+0x10a>
 80062c2:	461a      	mov	r2, r3
 80062c4:	4629      	mov	r1, r5
 80062c6:	4638      	mov	r0, r7
 80062c8:	2301      	movs	r3, #1
 80062ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ce:	f000 bb2f 	b.w	8006930 <arm_cfft_f32>
 80062d2:	bf00      	nop

080062d4 <arm_cfft_radix8by2_f32>:
 80062d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d8:	ed2d 8b08 	vpush	{d8-d11}
 80062dc:	4607      	mov	r7, r0
 80062de:	4608      	mov	r0, r1
 80062e0:	f8b7 e000 	ldrh.w	lr, [r7]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80062ea:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80062ee:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80062f2:	f000 80b0 	beq.w	8006456 <arm_cfft_radix8by2_f32+0x182>
 80062f6:	008b      	lsls	r3, r1, #2
 80062f8:	3310      	adds	r3, #16
 80062fa:	18c6      	adds	r6, r0, r3
 80062fc:	3210      	adds	r2, #16
 80062fe:	4443      	add	r3, r8
 8006300:	f100 0510 	add.w	r5, r0, #16
 8006304:	f108 0410 	add.w	r4, r8, #16
 8006308:	ed54 1a04 	vldr	s3, [r4, #-16]
 800630c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8006310:	ed13 4a04 	vldr	s8, [r3, #-16]
 8006314:	ed53 3a03 	vldr	s7, [r3, #-12]
 8006318:	ed53 5a02 	vldr	s11, [r3, #-8]
 800631c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8006320:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006324:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006328:	ed16 2a04 	vldr	s4, [r6, #-16]
 800632c:	ed56 2a03 	vldr	s5, [r6, #-12]
 8006330:	ed15 6a03 	vldr	s12, [r5, #-12]
 8006334:	ed15 7a01 	vldr	s14, [r5, #-4]
 8006338:	ed15 3a04 	vldr	s6, [r5, #-16]
 800633c:	ed56 0a02 	vldr	s1, [r6, #-8]
 8006340:	ed16 1a01 	vldr	s2, [r6, #-4]
 8006344:	ed55 4a02 	vldr	s9, [r5, #-8]
 8006348:	ee73 ba21 	vadd.f32	s23, s6, s3
 800634c:	ee36 ba26 	vadd.f32	s22, s12, s13
 8006350:	ee37 aa27 	vadd.f32	s20, s14, s15
 8006354:	ee72 9a04 	vadd.f32	s19, s4, s8
 8006358:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800635c:	ee31 8a05 	vadd.f32	s16, s2, s10
 8006360:	ee74 aa80 	vadd.f32	s21, s9, s0
 8006364:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8006368:	ed45 ba04 	vstr	s23, [r5, #-16]
 800636c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8006370:	ed45 aa02 	vstr	s21, [r5, #-8]
 8006374:	ed05 aa01 	vstr	s20, [r5, #-4]
 8006378:	ed06 8a01 	vstr	s16, [r6, #-4]
 800637c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8006380:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006384:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006388:	ee76 6a66 	vsub.f32	s13, s12, s13
 800638c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8006390:	ed12 6a03 	vldr	s12, [r2, #-12]
 8006394:	ed52 2a04 	vldr	s5, [r2, #-16]
 8006398:	ee33 3a61 	vsub.f32	s6, s6, s3
 800639c:	ee34 4a42 	vsub.f32	s8, s8, s4
 80063a0:	ee26 8a86 	vmul.f32	s16, s13, s12
 80063a4:	ee24 2a06 	vmul.f32	s4, s8, s12
 80063a8:	ee63 1a22 	vmul.f32	s3, s6, s5
 80063ac:	ee24 4a22 	vmul.f32	s8, s8, s5
 80063b0:	ee23 3a06 	vmul.f32	s6, s6, s12
 80063b4:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80063b8:	ee23 6a86 	vmul.f32	s12, s7, s12
 80063bc:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80063c0:	ee36 6a04 	vadd.f32	s12, s12, s8
 80063c4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80063c8:	ee72 3a63 	vsub.f32	s7, s4, s7
 80063cc:	ee71 2a88 	vadd.f32	s5, s3, s16
 80063d0:	ed44 6a03 	vstr	s13, [r4, #-12]
 80063d4:	ed44 2a04 	vstr	s5, [r4, #-16]
 80063d8:	ed43 3a04 	vstr	s7, [r3, #-16]
 80063dc:	ed03 6a03 	vstr	s12, [r3, #-12]
 80063e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063e4:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80063e8:	ed12 7a01 	vldr	s14, [r2, #-4]
 80063ec:	ed52 5a02 	vldr	s11, [r2, #-8]
 80063f0:	ee35 6a41 	vsub.f32	s12, s10, s2
 80063f4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80063f8:	ee67 3a87 	vmul.f32	s7, s15, s14
 80063fc:	ee26 5a87 	vmul.f32	s10, s13, s14
 8006400:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8006404:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006408:	ee64 4a87 	vmul.f32	s9, s9, s14
 800640c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006410:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006414:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006418:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800641c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006420:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006424:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006428:	f1be 0e01 	subs.w	lr, lr, #1
 800642c:	ed44 5a02 	vstr	s11, [r4, #-8]
 8006430:	f105 0510 	add.w	r5, r5, #16
 8006434:	ed44 7a01 	vstr	s15, [r4, #-4]
 8006438:	f106 0610 	add.w	r6, r6, #16
 800643c:	ed03 6a02 	vstr	s12, [r3, #-8]
 8006440:	ed03 7a01 	vstr	s14, [r3, #-4]
 8006444:	f102 0210 	add.w	r2, r2, #16
 8006448:	f104 0410 	add.w	r4, r4, #16
 800644c:	f103 0310 	add.w	r3, r3, #16
 8006450:	f47f af5a 	bne.w	8006308 <arm_cfft_radix8by2_f32+0x34>
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	b28c      	uxth	r4, r1
 8006458:	4621      	mov	r1, r4
 800645a:	2302      	movs	r3, #2
 800645c:	f000 fbca 	bl	8006bf4 <arm_radix8_butterfly_f32>
 8006460:	ecbd 8b08 	vpop	{d8-d11}
 8006464:	4621      	mov	r1, r4
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	4640      	mov	r0, r8
 800646a:	2302      	movs	r3, #2
 800646c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006470:	f000 bbc0 	b.w	8006bf4 <arm_radix8_butterfly_f32>

08006474 <arm_cfft_radix8by4_f32>:
 8006474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006478:	ed2d 8b0a 	vpush	{d8-d12}
 800647c:	8802      	ldrh	r2, [r0, #0]
 800647e:	ed91 6a00 	vldr	s12, [r1]
 8006482:	b08f      	sub	sp, #60	; 0x3c
 8006484:	460f      	mov	r7, r1
 8006486:	0852      	lsrs	r2, r2, #1
 8006488:	6841      	ldr	r1, [r0, #4]
 800648a:	900c      	str	r0, [sp, #48]	; 0x30
 800648c:	0093      	lsls	r3, r2, #2
 800648e:	4638      	mov	r0, r7
 8006490:	4418      	add	r0, r3
 8006492:	4606      	mov	r6, r0
 8006494:	9009      	str	r0, [sp, #36]	; 0x24
 8006496:	4418      	add	r0, r3
 8006498:	edd0 6a00 	vldr	s13, [r0]
 800649c:	ed96 4a00 	vldr	s8, [r6]
 80064a0:	edd6 2a01 	vldr	s5, [r6, #4]
 80064a4:	edd0 7a01 	vldr	s15, [r0, #4]
 80064a8:	900a      	str	r0, [sp, #40]	; 0x28
 80064aa:	ee76 5a26 	vadd.f32	s11, s12, s13
 80064ae:	4604      	mov	r4, r0
 80064b0:	4625      	mov	r5, r4
 80064b2:	441c      	add	r4, r3
 80064b4:	edd4 4a00 	vldr	s9, [r4]
 80064b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80064bc:	ed94 3a01 	vldr	s6, [r4, #4]
 80064c0:	9401      	str	r4, [sp, #4]
 80064c2:	ee35 5a84 	vadd.f32	s10, s11, s8
 80064c6:	4630      	mov	r0, r6
 80064c8:	ee35 5a24 	vadd.f32	s10, s10, s9
 80064cc:	463e      	mov	r6, r7
 80064ce:	ee15 ea10 	vmov	lr, s10
 80064d2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80064d6:	f846 eb08 	str.w	lr, [r6], #8
 80064da:	ee37 6a27 	vadd.f32	s12, s14, s15
 80064de:	ed90 5a01 	vldr	s10, [r0, #4]
 80064e2:	9605      	str	r6, [sp, #20]
 80064e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064e8:	9e01      	ldr	r6, [sp, #4]
 80064ea:	9707      	str	r7, [sp, #28]
 80064ec:	ee76 3aa2 	vadd.f32	s7, s13, s5
 80064f0:	ed96 2a01 	vldr	s4, [r6, #4]
 80064f4:	ee36 7a05 	vadd.f32	s14, s12, s10
 80064f8:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80064fc:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8006500:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006504:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8006508:	4604      	mov	r4, r0
 800650a:	46a3      	mov	fp, r4
 800650c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006510:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006514:	ee14 8a10 	vmov	r8, s8
 8006518:	46a4      	mov	ip, r4
 800651a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800651e:	ed87 7a01 	vstr	s14, [r7, #4]
 8006522:	f84b 8b08 	str.w	r8, [fp], #8
 8006526:	f1ac 0704 	sub.w	r7, ip, #4
 800652a:	ed8c 5a01 	vstr	s10, [ip, #4]
 800652e:	f101 0c08 	add.w	ip, r1, #8
 8006532:	462c      	mov	r4, r5
 8006534:	f8cd c010 	str.w	ip, [sp, #16]
 8006538:	ee15 ca90 	vmov	ip, s11
 800653c:	ee36 6a62 	vsub.f32	s12, s12, s5
 8006540:	f844 cb08 	str.w	ip, [r4], #8
 8006544:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006548:	ee36 6a43 	vsub.f32	s12, s12, s6
 800654c:	9406      	str	r4, [sp, #24]
 800654e:	ee76 6a83 	vadd.f32	s13, s13, s6
 8006552:	f101 0410 	add.w	r4, r1, #16
 8006556:	0852      	lsrs	r2, r2, #1
 8006558:	9402      	str	r4, [sp, #8]
 800655a:	ed85 6a01 	vstr	s12, [r5, #4]
 800655e:	462c      	mov	r4, r5
 8006560:	f101 0518 	add.w	r5, r1, #24
 8006564:	920b      	str	r2, [sp, #44]	; 0x2c
 8006566:	46b2      	mov	sl, r6
 8006568:	9503      	str	r5, [sp, #12]
 800656a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800656e:	3a02      	subs	r2, #2
 8006570:	ee16 5a90 	vmov	r5, s13
 8006574:	46b6      	mov	lr, r6
 8006576:	4630      	mov	r0, r6
 8006578:	0852      	lsrs	r2, r2, #1
 800657a:	f84a 5b08 	str.w	r5, [sl], #8
 800657e:	f1a0 0604 	sub.w	r6, r0, #4
 8006582:	edce 7a01 	vstr	s15, [lr, #4]
 8006586:	9208      	str	r2, [sp, #32]
 8006588:	f000 8130 	beq.w	80067ec <arm_cfft_radix8by4_f32+0x378>
 800658c:	4691      	mov	r9, r2
 800658e:	9a07      	ldr	r2, [sp, #28]
 8006590:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006594:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006598:	3b08      	subs	r3, #8
 800659a:	f102 0510 	add.w	r5, r2, #16
 800659e:	f101 0c20 	add.w	ip, r1, #32
 80065a2:	f1a4 020c 	sub.w	r2, r4, #12
 80065a6:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80065aa:	4433      	add	r3, r6
 80065ac:	3410      	adds	r4, #16
 80065ae:	4650      	mov	r0, sl
 80065b0:	4659      	mov	r1, fp
 80065b2:	ed55 3a02 	vldr	s7, [r5, #-8]
 80065b6:	ed14 5a02 	vldr	s10, [r4, #-8]
 80065ba:	ed91 7a00 	vldr	s14, [r1]
 80065be:	edd0 7a00 	vldr	s15, [r0]
 80065c2:	ed54 5a01 	vldr	s11, [r4, #-4]
 80065c6:	ed15 4a01 	vldr	s8, [r5, #-4]
 80065ca:	edd0 6a01 	vldr	s13, [r0, #4]
 80065ce:	ed91 6a01 	vldr	s12, [r1, #4]
 80065d2:	ee33 8a85 	vadd.f32	s16, s7, s10
 80065d6:	ee34 0a25 	vadd.f32	s0, s8, s11
 80065da:	ee78 4a07 	vadd.f32	s9, s16, s14
 80065de:	ee74 5a65 	vsub.f32	s11, s8, s11
 80065e2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80065e6:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80065ea:	ed45 4a02 	vstr	s9, [r5, #-8]
 80065ee:	edd1 4a01 	vldr	s9, [r1, #4]
 80065f2:	ed90 4a01 	vldr	s8, [r0, #4]
 80065f6:	ee70 4a24 	vadd.f32	s9, s0, s9
 80065fa:	ee75 aa06 	vadd.f32	s21, s10, s12
 80065fe:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006602:	ee35 aac7 	vsub.f32	s20, s11, s14
 8006606:	ed45 4a01 	vstr	s9, [r5, #-4]
 800660a:	edd6 1a00 	vldr	s3, [r6]
 800660e:	edd7 0a00 	vldr	s1, [r7]
 8006612:	ed92 4a02 	vldr	s8, [r2, #8]
 8006616:	edd3 3a02 	vldr	s7, [r3, #8]
 800661a:	ed93 2a01 	vldr	s4, [r3, #4]
 800661e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8006622:	edd2 2a01 	vldr	s5, [r2, #4]
 8006626:	ed57 9a01 	vldr	s19, [r7, #-4]
 800662a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800662e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8006632:	ee74 8a84 	vadd.f32	s17, s9, s8
 8006636:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800663a:	ee78 8aa3 	vadd.f32	s17, s17, s7
 800663e:	ee7a aae6 	vsub.f32	s21, s21, s13
 8006642:	ee18 aa90 	vmov	sl, s17
 8006646:	f847 a908 	str.w	sl, [r7], #-8
 800664a:	edd2 8a01 	vldr	s17, [r2, #4]
 800664e:	ed93 9a01 	vldr	s18, [r3, #4]
 8006652:	ee73 8a28 	vadd.f32	s17, s6, s17
 8006656:	ee3a aa27 	vadd.f32	s20, s20, s15
 800665a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800665e:	ee74 0a63 	vsub.f32	s1, s8, s7
 8006662:	edc7 8a01 	vstr	s17, [r7, #4]
 8006666:	ed18 ba02 	vldr	s22, [r8, #-8]
 800666a:	ed58 8a01 	vldr	s17, [r8, #-4]
 800666e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8006672:	ee6a ba28 	vmul.f32	s23, s20, s17
 8006676:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800667a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800667e:	ee31 9a20 	vadd.f32	s18, s2, s1
 8006682:	ee79 9a82 	vadd.f32	s19, s19, s4
 8006686:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800668a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800668e:	ee69 baa8 	vmul.f32	s23, s19, s17
 8006692:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8006696:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800669a:	ee69 8a28 	vmul.f32	s17, s18, s17
 800669e:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80066a2:	ee1c aa10 	vmov	sl, s24
 80066a6:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80066aa:	f841 ab08 	str.w	sl, [r1], #8
 80066ae:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80066b2:	ee3b bacb 	vsub.f32	s22, s23, s22
 80066b6:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80066ba:	ee33 3a62 	vsub.f32	s6, s6, s5
 80066be:	ed01 aa01 	vstr	s20, [r1, #-4]
 80066c2:	edc2 8a01 	vstr	s17, [r2, #4]
 80066c6:	ed82 ba02 	vstr	s22, [r2, #8]
 80066ca:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80066ce:	ee74 3a63 	vsub.f32	s7, s8, s7
 80066d2:	ee38 8a47 	vsub.f32	s16, s16, s14
 80066d6:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80066da:	ee30 0a46 	vsub.f32	s0, s0, s12
 80066de:	ee33 3a42 	vsub.f32	s6, s6, s4
 80066e2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80066e6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80066ea:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80066ee:	ee63 8a04 	vmul.f32	s17, s6, s8
 80066f2:	ee28 aa24 	vmul.f32	s20, s16, s9
 80066f6:	ee60 9a04 	vmul.f32	s19, s0, s8
 80066fa:	ee28 8a04 	vmul.f32	s16, s16, s8
 80066fe:	ee20 0a24 	vmul.f32	s0, s0, s9
 8006702:	ee63 3a84 	vmul.f32	s7, s7, s8
 8006706:	ee39 4a68 	vsub.f32	s8, s18, s17
 800670a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800670e:	ee14 aa10 	vmov	sl, s8
 8006712:	ee30 0a48 	vsub.f32	s0, s0, s16
 8006716:	ee63 4a24 	vmul.f32	s9, s6, s9
 800671a:	ed44 9a02 	vstr	s19, [r4, #-8]
 800671e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8006722:	ed04 0a01 	vstr	s0, [r4, #-4]
 8006726:	f846 a908 	str.w	sl, [r6], #-8
 800672a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800672e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8006732:	edc6 3a01 	vstr	s7, [r6, #4]
 8006736:	ee76 6a26 	vadd.f32	s13, s12, s13
 800673a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800673e:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8006742:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8006746:	ee67 5a86 	vmul.f32	s11, s15, s12
 800674a:	ee26 5a87 	vmul.f32	s10, s13, s14
 800674e:	ee72 2a62 	vsub.f32	s5, s4, s5
 8006752:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8006756:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800675a:	ee75 5a25 	vadd.f32	s11, s10, s11
 800675e:	ee62 0a86 	vmul.f32	s1, s5, s12
 8006762:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800676a:	ee21 6a06 	vmul.f32	s12, s2, s12
 800676e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8006772:	ee21 1a07 	vmul.f32	s2, s2, s14
 8006776:	ee15 aa90 	vmov	sl, s11
 800677a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800677e:	f840 ab08 	str.w	sl, [r0], #8
 8006782:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8006786:	ee76 2a22 	vadd.f32	s5, s12, s5
 800678a:	f1b9 0901 	subs.w	r9, r9, #1
 800678e:	ed40 7a01 	vstr	s15, [r0, #-4]
 8006792:	f105 0508 	add.w	r5, r5, #8
 8006796:	ed83 1a02 	vstr	s2, [r3, #8]
 800679a:	edc3 2a01 	vstr	s5, [r3, #4]
 800679e:	f108 0808 	add.w	r8, r8, #8
 80067a2:	f1a2 0208 	sub.w	r2, r2, #8
 80067a6:	f10c 0c10 	add.w	ip, ip, #16
 80067aa:	f104 0408 	add.w	r4, r4, #8
 80067ae:	f10e 0e18 	add.w	lr, lr, #24
 80067b2:	f1a3 0308 	sub.w	r3, r3, #8
 80067b6:	f47f aefc 	bne.w	80065b2 <arm_cfft_radix8by4_f32+0x13e>
 80067ba:	9908      	ldr	r1, [sp, #32]
 80067bc:	9802      	ldr	r0, [sp, #8]
 80067be:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80067c2:	00cb      	lsls	r3, r1, #3
 80067c4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80067c8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80067cc:	9102      	str	r1, [sp, #8]
 80067ce:	9905      	ldr	r1, [sp, #20]
 80067d0:	4419      	add	r1, r3
 80067d2:	9105      	str	r1, [sp, #20]
 80067d4:	9904      	ldr	r1, [sp, #16]
 80067d6:	4419      	add	r1, r3
 80067d8:	9104      	str	r1, [sp, #16]
 80067da:	9906      	ldr	r1, [sp, #24]
 80067dc:	449b      	add	fp, r3
 80067de:	4419      	add	r1, r3
 80067e0:	449a      	add	sl, r3
 80067e2:	9b03      	ldr	r3, [sp, #12]
 80067e4:	9106      	str	r1, [sp, #24]
 80067e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067ea:	9303      	str	r3, [sp, #12]
 80067ec:	9a05      	ldr	r2, [sp, #20]
 80067ee:	9806      	ldr	r0, [sp, #24]
 80067f0:	ed92 4a00 	vldr	s8, [r2]
 80067f4:	ed90 7a00 	vldr	s14, [r0]
 80067f8:	ed9b 3a00 	vldr	s6, [fp]
 80067fc:	edda 3a00 	vldr	s7, [sl]
 8006800:	edd2 4a01 	vldr	s9, [r2, #4]
 8006804:	edd0 6a01 	vldr	s13, [r0, #4]
 8006808:	ed9a 2a01 	vldr	s4, [sl, #4]
 800680c:	eddb 7a01 	vldr	s15, [fp, #4]
 8006810:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8006814:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006816:	ee34 6a07 	vadd.f32	s12, s8, s14
 800681a:	ee74 5aa6 	vadd.f32	s11, s9, s13
 800681e:	ee36 5a03 	vadd.f32	s10, s12, s6
 8006822:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8006826:	ee35 5a23 	vadd.f32	s10, s10, s7
 800682a:	ee34 7a47 	vsub.f32	s14, s8, s14
 800682e:	ed82 5a00 	vstr	s10, [r2]
 8006832:	ed9b 5a01 	vldr	s10, [fp, #4]
 8006836:	edda 4a01 	vldr	s9, [sl, #4]
 800683a:	ee35 5a85 	vadd.f32	s10, s11, s10
 800683e:	ee37 4a27 	vadd.f32	s8, s14, s15
 8006842:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006846:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800684a:	ed82 5a01 	vstr	s10, [r2, #4]
 800684e:	9a04      	ldr	r2, [sp, #16]
 8006850:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8006854:	edd2 1a00 	vldr	s3, [r2]
 8006858:	edd2 2a01 	vldr	s5, [r2, #4]
 800685c:	9a02      	ldr	r2, [sp, #8]
 800685e:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006862:	ee36 6a43 	vsub.f32	s12, s12, s6
 8006866:	ee64 4a21 	vmul.f32	s9, s8, s3
 800686a:	ee24 4a22 	vmul.f32	s8, s8, s5
 800686e:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006872:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006876:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800687a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800687e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8006882:	edcb 2a00 	vstr	s5, [fp]
 8006886:	ed8b 5a01 	vstr	s10, [fp, #4]
 800688a:	ed92 4a01 	vldr	s8, [r2, #4]
 800688e:	ed92 5a00 	vldr	s10, [r2]
 8006892:	9a03      	ldr	r2, [sp, #12]
 8006894:	ee36 6a63 	vsub.f32	s12, s12, s7
 8006898:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800689c:	ee66 4a05 	vmul.f32	s9, s12, s10
 80068a0:	ee25 5a85 	vmul.f32	s10, s11, s10
 80068a4:	ee26 6a04 	vmul.f32	s12, s12, s8
 80068a8:	ee65 5a84 	vmul.f32	s11, s11, s8
 80068ac:	ee35 6a46 	vsub.f32	s12, s10, s12
 80068b0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80068b4:	ee76 6a83 	vadd.f32	s13, s13, s6
 80068b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068bc:	ed80 6a01 	vstr	s12, [r0, #4]
 80068c0:	edc0 5a00 	vstr	s11, [r0]
 80068c4:	edd2 5a01 	vldr	s11, [r2, #4]
 80068c8:	9807      	ldr	r0, [sp, #28]
 80068ca:	ee77 7a02 	vadd.f32	s15, s14, s4
 80068ce:	ee36 7ae3 	vsub.f32	s14, s13, s7
 80068d2:	edd2 6a00 	vldr	s13, [r2]
 80068d6:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80068da:	ee67 6a26 	vmul.f32	s13, s14, s13
 80068de:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80068e2:	ee27 7a25 	vmul.f32	s14, s14, s11
 80068e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80068ea:	ee36 7a07 	vadd.f32	s14, s12, s14
 80068ee:	edca 7a01 	vstr	s15, [sl, #4]
 80068f2:	ed8a 7a00 	vstr	s14, [sl]
 80068f6:	6872      	ldr	r2, [r6, #4]
 80068f8:	4621      	mov	r1, r4
 80068fa:	2304      	movs	r3, #4
 80068fc:	f000 f97a 	bl	8006bf4 <arm_radix8_butterfly_f32>
 8006900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006902:	6872      	ldr	r2, [r6, #4]
 8006904:	4621      	mov	r1, r4
 8006906:	2304      	movs	r3, #4
 8006908:	f000 f974 	bl	8006bf4 <arm_radix8_butterfly_f32>
 800690c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800690e:	6872      	ldr	r2, [r6, #4]
 8006910:	4621      	mov	r1, r4
 8006912:	2304      	movs	r3, #4
 8006914:	f000 f96e 	bl	8006bf4 <arm_radix8_butterfly_f32>
 8006918:	6872      	ldr	r2, [r6, #4]
 800691a:	9801      	ldr	r0, [sp, #4]
 800691c:	4621      	mov	r1, r4
 800691e:	2304      	movs	r3, #4
 8006920:	b00f      	add	sp, #60	; 0x3c
 8006922:	ecbd 8b0a 	vpop	{d8-d12}
 8006926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692a:	f000 b963 	b.w	8006bf4 <arm_radix8_butterfly_f32>
 800692e:	bf00      	nop

08006930 <arm_cfft_f32>:
 8006930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006934:	2a01      	cmp	r2, #1
 8006936:	4606      	mov	r6, r0
 8006938:	4617      	mov	r7, r2
 800693a:	460c      	mov	r4, r1
 800693c:	4698      	mov	r8, r3
 800693e:	8805      	ldrh	r5, [r0, #0]
 8006940:	d054      	beq.n	80069ec <arm_cfft_f32+0xbc>
 8006942:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8006946:	d04c      	beq.n	80069e2 <arm_cfft_f32+0xb2>
 8006948:	d916      	bls.n	8006978 <arm_cfft_f32+0x48>
 800694a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800694e:	d01a      	beq.n	8006986 <arm_cfft_f32+0x56>
 8006950:	d95c      	bls.n	8006a0c <arm_cfft_f32+0xdc>
 8006952:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8006956:	d044      	beq.n	80069e2 <arm_cfft_f32+0xb2>
 8006958:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800695c:	d105      	bne.n	800696a <arm_cfft_f32+0x3a>
 800695e:	2301      	movs	r3, #1
 8006960:	6872      	ldr	r2, [r6, #4]
 8006962:	4629      	mov	r1, r5
 8006964:	4620      	mov	r0, r4
 8006966:	f000 f945 	bl	8006bf4 <arm_radix8_butterfly_f32>
 800696a:	f1b8 0f00 	cmp.w	r8, #0
 800696e:	d111      	bne.n	8006994 <arm_cfft_f32+0x64>
 8006970:	2f01      	cmp	r7, #1
 8006972:	d016      	beq.n	80069a2 <arm_cfft_f32+0x72>
 8006974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006978:	2d20      	cmp	r5, #32
 800697a:	d032      	beq.n	80069e2 <arm_cfft_f32+0xb2>
 800697c:	d94a      	bls.n	8006a14 <arm_cfft_f32+0xe4>
 800697e:	2d40      	cmp	r5, #64	; 0x40
 8006980:	d0ed      	beq.n	800695e <arm_cfft_f32+0x2e>
 8006982:	2d80      	cmp	r5, #128	; 0x80
 8006984:	d1f1      	bne.n	800696a <arm_cfft_f32+0x3a>
 8006986:	4621      	mov	r1, r4
 8006988:	4630      	mov	r0, r6
 800698a:	f7ff fca3 	bl	80062d4 <arm_cfft_radix8by2_f32>
 800698e:	f1b8 0f00 	cmp.w	r8, #0
 8006992:	d0ed      	beq.n	8006970 <arm_cfft_f32+0x40>
 8006994:	68b2      	ldr	r2, [r6, #8]
 8006996:	89b1      	ldrh	r1, [r6, #12]
 8006998:	4620      	mov	r0, r4
 800699a:	f7f9 fc39 	bl	8000210 <arm_bitreversal_32>
 800699e:	2f01      	cmp	r7, #1
 80069a0:	d1e8      	bne.n	8006974 <arm_cfft_f32+0x44>
 80069a2:	ee07 5a90 	vmov	s15, r5
 80069a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80069b2:	2d00      	cmp	r5, #0
 80069b4:	d0de      	beq.n	8006974 <arm_cfft_f32+0x44>
 80069b6:	f104 0108 	add.w	r1, r4, #8
 80069ba:	2300      	movs	r3, #0
 80069bc:	3301      	adds	r3, #1
 80069be:	429d      	cmp	r5, r3
 80069c0:	f101 0108 	add.w	r1, r1, #8
 80069c4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80069c8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80069cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80069d0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80069d4:	ed01 7a04 	vstr	s14, [r1, #-16]
 80069d8:	ed41 7a03 	vstr	s15, [r1, #-12]
 80069dc:	d1ee      	bne.n	80069bc <arm_cfft_f32+0x8c>
 80069de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e2:	4621      	mov	r1, r4
 80069e4:	4630      	mov	r0, r6
 80069e6:	f7ff fd45 	bl	8006474 <arm_cfft_radix8by4_f32>
 80069ea:	e7be      	b.n	800696a <arm_cfft_f32+0x3a>
 80069ec:	b1ad      	cbz	r5, 8006a1a <arm_cfft_f32+0xea>
 80069ee:	f101 030c 	add.w	r3, r1, #12
 80069f2:	2200      	movs	r2, #0
 80069f4:	ed53 7a02 	vldr	s15, [r3, #-8]
 80069f8:	3201      	adds	r2, #1
 80069fa:	eef1 7a67 	vneg.f32	s15, s15
 80069fe:	4295      	cmp	r5, r2
 8006a00:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006a04:	f103 0308 	add.w	r3, r3, #8
 8006a08:	d1f4      	bne.n	80069f4 <arm_cfft_f32+0xc4>
 8006a0a:	e79a      	b.n	8006942 <arm_cfft_f32+0x12>
 8006a0c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8006a10:	d0a5      	beq.n	800695e <arm_cfft_f32+0x2e>
 8006a12:	e7aa      	b.n	800696a <arm_cfft_f32+0x3a>
 8006a14:	2d10      	cmp	r5, #16
 8006a16:	d0b6      	beq.n	8006986 <arm_cfft_f32+0x56>
 8006a18:	e7a7      	b.n	800696a <arm_cfft_f32+0x3a>
 8006a1a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8006a1e:	d894      	bhi.n	800694a <arm_cfft_f32+0x1a>
 8006a20:	e7aa      	b.n	8006978 <arm_cfft_f32+0x48>
 8006a22:	bf00      	nop

08006a24 <arm_cmplx_mag_f32>:
 8006a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a28:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	d07f      	beq.n	8006b30 <arm_cmplx_mag_f32+0x10c>
 8006a30:	2700      	movs	r7, #0
 8006a32:	f100 0420 	add.w	r4, r0, #32
 8006a36:	f101 0510 	add.w	r5, r1, #16
 8006a3a:	4646      	mov	r6, r8
 8006a3c:	e05a      	b.n	8006af4 <arm_cmplx_mag_f32+0xd0>
 8006a3e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8006a42:	eeb4 0a40 	vcmp.f32	s0, s0
 8006a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a4a:	f040 80a4 	bne.w	8006b96 <arm_cmplx_mag_f32+0x172>
 8006a4e:	ed05 0a04 	vstr	s0, [r5, #-16]
 8006a52:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8006a56:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8006a5a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006a5e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006a62:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006a66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6e:	f2c0 808f 	blt.w	8006b90 <arm_cmplx_mag_f32+0x16c>
 8006a72:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8006a76:	eeb4 0a40 	vcmp.f32	s0, s0
 8006a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a7e:	f040 80af 	bne.w	8006be0 <arm_cmplx_mag_f32+0x1bc>
 8006a82:	ed05 0a03 	vstr	s0, [r5, #-12]
 8006a86:	ed54 7a04 	vldr	s15, [r4, #-16]
 8006a8a:	ed14 0a03 	vldr	s0, [r4, #-12]
 8006a8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006a92:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006a96:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006a9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa2:	db72      	blt.n	8006b8a <arm_cmplx_mag_f32+0x166>
 8006aa4:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8006aa8:	eeb4 0a40 	vcmp.f32	s0, s0
 8006aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab0:	f040 808c 	bne.w	8006bcc <arm_cmplx_mag_f32+0x1a8>
 8006ab4:	ed05 0a02 	vstr	s0, [r5, #-8]
 8006ab8:	ed54 7a02 	vldr	s15, [r4, #-8]
 8006abc:	ed14 0a01 	vldr	s0, [r4, #-4]
 8006ac0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ac4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006ac8:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad4:	db20      	blt.n	8006b18 <arm_cmplx_mag_f32+0xf4>
 8006ad6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8006ada:	eeb4 0a40 	vcmp.f32	s0, s0
 8006ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae2:	d169      	bne.n	8006bb8 <arm_cmplx_mag_f32+0x194>
 8006ae4:	3e01      	subs	r6, #1
 8006ae6:	ed05 0a01 	vstr	s0, [r5, #-4]
 8006aea:	f104 0420 	add.w	r4, r4, #32
 8006aee:	f105 0510 	add.w	r5, r5, #16
 8006af2:	d019      	beq.n	8006b28 <arm_cmplx_mag_f32+0x104>
 8006af4:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8006af8:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8006afc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006b00:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006b04:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006b08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b10:	da95      	bge.n	8006a3e <arm_cmplx_mag_f32+0x1a>
 8006b12:	f845 7c10 	str.w	r7, [r5, #-16]
 8006b16:	e79c      	b.n	8006a52 <arm_cmplx_mag_f32+0x2e>
 8006b18:	3e01      	subs	r6, #1
 8006b1a:	f845 7c04 	str.w	r7, [r5, #-4]
 8006b1e:	f104 0420 	add.w	r4, r4, #32
 8006b22:	f105 0510 	add.w	r5, r5, #16
 8006b26:	d1e5      	bne.n	8006af4 <arm_cmplx_mag_f32+0xd0>
 8006b28:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8006b2c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8006b30:	f012 0503 	ands.w	r5, r2, #3
 8006b34:	d026      	beq.n	8006b84 <arm_cmplx_mag_f32+0x160>
 8006b36:	2600      	movs	r6, #0
 8006b38:	f100 0408 	add.w	r4, r0, #8
 8006b3c:	e00c      	b.n	8006b58 <arm_cmplx_mag_f32+0x134>
 8006b3e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8006b42:	eeb4 0a40 	vcmp.f32	s0, s0
 8006b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4a:	d12e      	bne.n	8006baa <arm_cmplx_mag_f32+0x186>
 8006b4c:	3d01      	subs	r5, #1
 8006b4e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8006b52:	f104 0408 	add.w	r4, r4, #8
 8006b56:	d015      	beq.n	8006b84 <arm_cmplx_mag_f32+0x160>
 8006b58:	ed54 7a02 	vldr	s15, [r4, #-8]
 8006b5c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8006b60:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006b64:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006b68:	3104      	adds	r1, #4
 8006b6a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006b6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b76:	dae2      	bge.n	8006b3e <arm_cmplx_mag_f32+0x11a>
 8006b78:	3d01      	subs	r5, #1
 8006b7a:	f841 6c04 	str.w	r6, [r1, #-4]
 8006b7e:	f104 0408 	add.w	r4, r4, #8
 8006b82:	d1e9      	bne.n	8006b58 <arm_cmplx_mag_f32+0x134>
 8006b84:	b004      	add	sp, #16
 8006b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b8a:	f845 7c08 	str.w	r7, [r5, #-8]
 8006b8e:	e793      	b.n	8006ab8 <arm_cmplx_mag_f32+0x94>
 8006b90:	f845 7c0c 	str.w	r7, [r5, #-12]
 8006b94:	e777      	b.n	8006a86 <arm_cmplx_mag_f32+0x62>
 8006b96:	eeb0 0a67 	vmov.f32	s0, s15
 8006b9a:	9203      	str	r2, [sp, #12]
 8006b9c:	9102      	str	r1, [sp, #8]
 8006b9e:	9001      	str	r0, [sp, #4]
 8006ba0:	f003 f90e 	bl	8009dc0 <sqrtf>
 8006ba4:	a801      	add	r0, sp, #4
 8006ba6:	c807      	ldmia	r0, {r0, r1, r2}
 8006ba8:	e751      	b.n	8006a4e <arm_cmplx_mag_f32+0x2a>
 8006baa:	eeb0 0a67 	vmov.f32	s0, s15
 8006bae:	9101      	str	r1, [sp, #4]
 8006bb0:	f003 f906 	bl	8009dc0 <sqrtf>
 8006bb4:	9901      	ldr	r1, [sp, #4]
 8006bb6:	e7c9      	b.n	8006b4c <arm_cmplx_mag_f32+0x128>
 8006bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8006bbc:	9203      	str	r2, [sp, #12]
 8006bbe:	9102      	str	r1, [sp, #8]
 8006bc0:	9001      	str	r0, [sp, #4]
 8006bc2:	f003 f8fd 	bl	8009dc0 <sqrtf>
 8006bc6:	a801      	add	r0, sp, #4
 8006bc8:	c807      	ldmia	r0, {r0, r1, r2}
 8006bca:	e78b      	b.n	8006ae4 <arm_cmplx_mag_f32+0xc0>
 8006bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8006bd0:	9203      	str	r2, [sp, #12]
 8006bd2:	9102      	str	r1, [sp, #8]
 8006bd4:	9001      	str	r0, [sp, #4]
 8006bd6:	f003 f8f3 	bl	8009dc0 <sqrtf>
 8006bda:	a801      	add	r0, sp, #4
 8006bdc:	c807      	ldmia	r0, {r0, r1, r2}
 8006bde:	e769      	b.n	8006ab4 <arm_cmplx_mag_f32+0x90>
 8006be0:	eeb0 0a67 	vmov.f32	s0, s15
 8006be4:	9203      	str	r2, [sp, #12]
 8006be6:	9102      	str	r1, [sp, #8]
 8006be8:	9001      	str	r0, [sp, #4]
 8006bea:	f003 f8e9 	bl	8009dc0 <sqrtf>
 8006bee:	a801      	add	r0, sp, #4
 8006bf0:	c807      	ldmia	r0, {r0, r1, r2}
 8006bf2:	e746      	b.n	8006a82 <arm_cmplx_mag_f32+0x5e>

08006bf4 <arm_radix8_butterfly_f32>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	ed2d 8b10 	vpush	{d8-d15}
 8006bfc:	461c      	mov	r4, r3
 8006bfe:	b09d      	sub	sp, #116	; 0x74
 8006c00:	4603      	mov	r3, r0
 8006c02:	3304      	adds	r3, #4
 8006c04:	ed9f bac4 	vldr	s22, [pc, #784]	; 8006f18 <arm_radix8_butterfly_f32+0x324>
 8006c08:	9019      	str	r0, [sp, #100]	; 0x64
 8006c0a:	921a      	str	r2, [sp, #104]	; 0x68
 8006c0c:	468b      	mov	fp, r1
 8006c0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006c10:	468a      	mov	sl, r1
 8006c12:	46a1      	mov	r9, r4
 8006c14:	4607      	mov	r7, r0
 8006c16:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8006c1a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8006c1e:	eb03 0508 	add.w	r5, r3, r8
 8006c22:	195c      	adds	r4, r3, r5
 8006c24:	00de      	lsls	r6, r3, #3
 8006c26:	191a      	adds	r2, r3, r4
 8006c28:	9600      	str	r6, [sp, #0]
 8006c2a:	1898      	adds	r0, r3, r2
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	9e00      	ldr	r6, [sp, #0]
 8006c30:	9311      	str	r3, [sp, #68]	; 0x44
 8006c32:	4401      	add	r1, r0
 8006c34:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8006c38:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8006c3c:	19be      	adds	r6, r7, r6
 8006c3e:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8006c42:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8006c46:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8006c4a:	9f00      	ldr	r7, [sp, #0]
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	eb06 0e07 	add.w	lr, r6, r7
 8006c52:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006c54:	9302      	str	r3, [sp, #8]
 8006c56:	3204      	adds	r2, #4
 8006c58:	3104      	adds	r1, #4
 8006c5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c5e:	f04f 0c00 	mov.w	ip, #0
 8006c62:	edde 7a00 	vldr	s15, [lr]
 8006c66:	edd6 6a00 	vldr	s13, [r6]
 8006c6a:	ed95 2a00 	vldr	s4, [r5]
 8006c6e:	ed17 aa01 	vldr	s20, [r7, #-4]
 8006c72:	edd4 4a00 	vldr	s9, [r4]
 8006c76:	ed90 5a00 	vldr	s10, [r0]
 8006c7a:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006c7e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8006c82:	ee77 8a85 	vadd.f32	s17, s15, s10
 8006c86:	ee76 3a87 	vadd.f32	s7, s13, s14
 8006c8a:	ee32 4a20 	vadd.f32	s8, s4, s1
 8006c8e:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8006c92:	ee33 6a84 	vadd.f32	s12, s7, s8
 8006c96:	ee73 5a28 	vadd.f32	s11, s6, s17
 8006c9a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006c9e:	ee75 6a86 	vadd.f32	s13, s11, s12
 8006ca2:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8006ca6:	ed47 6a01 	vstr	s13, [r7, #-4]
 8006caa:	edc4 5a00 	vstr	s11, [r4]
 8006cae:	ed92 9a00 	vldr	s18, [r2]
 8006cb2:	ed95 1a01 	vldr	s2, [r5, #4]
 8006cb6:	edd6 5a01 	vldr	s11, [r6, #4]
 8006cba:	ed91 6a00 	vldr	s12, [r1]
 8006cbe:	edd7 2a00 	vldr	s5, [r7]
 8006cc2:	edd4 1a01 	vldr	s3, [r4, #4]
 8006cc6:	edde 6a01 	vldr	s13, [lr, #4]
 8006cca:	edd0 9a01 	vldr	s19, [r0, #4]
 8006cce:	ee72 0a60 	vsub.f32	s1, s4, s1
 8006cd2:	ee71 aa46 	vsub.f32	s21, s2, s12
 8006cd6:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8006cda:	ee37 0a60 	vsub.f32	s0, s14, s1
 8006cde:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8006ce2:	ee37 7a20 	vadd.f32	s14, s14, s1
 8006ce6:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8006cea:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8006cee:	ee75 5a89 	vadd.f32	s11, s11, s18
 8006cf2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8006cf6:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8006cfa:	ee31 6a06 	vadd.f32	s12, s2, s12
 8006cfe:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8006d02:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8006d06:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8006d0a:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8006d0e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8006d12:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8006d16:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8006d1a:	ee33 3a68 	vsub.f32	s6, s6, s17
 8006d1e:	ee36 0a88 	vadd.f32	s0, s13, s16
 8006d22:	ee75 8a86 	vadd.f32	s17, s11, s12
 8006d26:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8006d2a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006d2e:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8006d32:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8006d36:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8006d3a:	ee75 4a27 	vadd.f32	s9, s10, s15
 8006d3e:	ee71 5a49 	vsub.f32	s11, s2, s18
 8006d42:	ee31 2a09 	vadd.f32	s4, s2, s18
 8006d46:	ee75 7a67 	vsub.f32	s15, s10, s15
 8006d4a:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8006d4e:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8006d52:	ee73 0a06 	vadd.f32	s1, s6, s12
 8006d56:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8006d5a:	ee36 5a87 	vadd.f32	s10, s13, s14
 8006d5e:	ee32 8a28 	vadd.f32	s16, s4, s17
 8006d62:	ee33 6a46 	vsub.f32	s12, s6, s12
 8006d66:	ee34 4a25 	vadd.f32	s8, s8, s11
 8006d6a:	ee33 3a80 	vadd.f32	s6, s7, s0
 8006d6e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006d72:	ee71 5a64 	vsub.f32	s11, s2, s9
 8006d76:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8006d7a:	ee32 2a68 	vsub.f32	s4, s4, s17
 8006d7e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8006d82:	ee74 4a81 	vadd.f32	s9, s9, s2
 8006d86:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8006d8a:	44dc      	add	ip, fp
 8006d8c:	45e2      	cmp	sl, ip
 8006d8e:	ed87 8a00 	vstr	s16, [r7]
 8006d92:	ed84 2a01 	vstr	s4, [r4, #4]
 8006d96:	441f      	add	r7, r3
 8006d98:	edce 0a00 	vstr	s1, [lr]
 8006d9c:	441c      	add	r4, r3
 8006d9e:	ed80 6a00 	vstr	s12, [r0]
 8006da2:	edce 1a01 	vstr	s3, [lr, #4]
 8006da6:	ed80 4a01 	vstr	s8, [r0, #4]
 8006daa:	449e      	add	lr, r3
 8006dac:	ed86 3a00 	vstr	s6, [r6]
 8006db0:	4418      	add	r0, r3
 8006db2:	ed41 3a01 	vstr	s7, [r1, #-4]
 8006db6:	ed02 5a01 	vstr	s10, [r2, #-4]
 8006dba:	ed85 7a00 	vstr	s14, [r5]
 8006dbe:	edc6 5a01 	vstr	s11, [r6, #4]
 8006dc2:	edc1 4a00 	vstr	s9, [r1]
 8006dc6:	441e      	add	r6, r3
 8006dc8:	edc2 6a00 	vstr	s13, [r2]
 8006dcc:	4419      	add	r1, r3
 8006dce:	edc5 7a01 	vstr	s15, [r5, #4]
 8006dd2:	441a      	add	r2, r3
 8006dd4:	441d      	add	r5, r3
 8006dd6:	f63f af44 	bhi.w	8006c62 <arm_radix8_butterfly_f32+0x6e>
 8006dda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ddc:	2a07      	cmp	r2, #7
 8006dde:	f240 81f5 	bls.w	80071cc <arm_radix8_butterfly_f32+0x5d8>
 8006de2:	f108 0101 	add.w	r1, r8, #1
 8006de6:	188f      	adds	r7, r1, r2
 8006de8:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8006dec:	19d6      	adds	r6, r2, r7
 8006dee:	eb08 0c09 	add.w	ip, r8, r9
 8006df2:	1994      	adds	r4, r2, r6
 8006df4:	eb0c 0e09 	add.w	lr, ip, r9
 8006df8:	4610      	mov	r0, r2
 8006dfa:	9701      	str	r7, [sp, #4]
 8006dfc:	4420      	add	r0, r4
 8006dfe:	eb0e 0709 	add.w	r7, lr, r9
 8006e02:	1815      	adds	r5, r2, r0
 8006e04:	eb07 0209 	add.w	r2, r7, r9
 8006e08:	9203      	str	r2, [sp, #12]
 8006e0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006e0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e10:	9117      	str	r1, [sp, #92]	; 0x5c
 8006e12:	440a      	add	r2, r1
 8006e14:	9900      	ldr	r1, [sp, #0]
 8006e16:	3108      	adds	r1, #8
 8006e18:	9100      	str	r1, [sp, #0]
 8006e1a:	9902      	ldr	r1, [sp, #8]
 8006e1c:	3108      	adds	r1, #8
 8006e1e:	9102      	str	r1, [sp, #8]
 8006e20:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006e22:	00ff      	lsls	r7, r7, #3
 8006e24:	9715      	str	r7, [sp, #84]	; 0x54
 8006e26:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8006e2a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006e2e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8006e32:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8006e34:	9903      	ldr	r1, [sp, #12]
 8006e36:	19d7      	adds	r7, r2, r7
 8006e38:	00c9      	lsls	r1, r1, #3
 8006e3a:	9114      	str	r1, [sp, #80]	; 0x50
 8006e3c:	9710      	str	r7, [sp, #64]	; 0x40
 8006e3e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006e40:	9f00      	ldr	r7, [sp, #0]
 8006e42:	19cf      	adds	r7, r1, r7
 8006e44:	970d      	str	r7, [sp, #52]	; 0x34
 8006e46:	9f02      	ldr	r7, [sp, #8]
 8006e48:	19cf      	adds	r7, r1, r7
 8006e4a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8006e4e:	970c      	str	r7, [sp, #48]	; 0x30
 8006e50:	9f01      	ldr	r7, [sp, #4]
 8006e52:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8006e56:	3504      	adds	r5, #4
 8006e58:	3004      	adds	r0, #4
 8006e5a:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8006e5e:	9508      	str	r5, [sp, #32]
 8006e60:	9009      	str	r0, [sp, #36]	; 0x24
 8006e62:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8006e64:	981a      	ldr	r0, [sp, #104]	; 0x68
 8006e66:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8006e6a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8006e6e:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8006e72:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006e74:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8006e78:	1945      	adds	r5, r0, r5
 8006e7a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8006e7e:	460f      	mov	r7, r1
 8006e80:	3404      	adds	r4, #4
 8006e82:	4641      	mov	r1, r8
 8006e84:	1841      	adds	r1, r0, r1
 8006e86:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8006e8a:	940a      	str	r4, [sp, #40]	; 0x28
 8006e8c:	eb00 0c06 	add.w	ip, r0, r6
 8006e90:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006e94:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006e96:	9506      	str	r5, [sp, #24]
 8006e98:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8006e9a:	9105      	str	r1, [sp, #20]
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	1905      	adds	r5, r0, r4
 8006ea0:	3108      	adds	r1, #8
 8006ea2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8006ea4:	9507      	str	r5, [sp, #28]
 8006ea6:	910f      	str	r1, [sp, #60]	; 0x3c
 8006ea8:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8006eac:	2101      	movs	r1, #1
 8006eae:	eb00 0e06 	add.w	lr, r0, r6
 8006eb2:	9518      	str	r5, [sp, #96]	; 0x60
 8006eb4:	9404      	str	r4, [sp, #16]
 8006eb6:	9103      	str	r1, [sp, #12]
 8006eb8:	4620      	mov	r0, r4
 8006eba:	4689      	mov	r9, r1
 8006ebc:	9e06      	ldr	r6, [sp, #24]
 8006ebe:	ed90 fa00 	vldr	s30, [r0]
 8006ec2:	edd6 7a01 	vldr	s15, [r6, #4]
 8006ec6:	edd0 ba01 	vldr	s23, [r0, #4]
 8006eca:	edcd 7a00 	vstr	s15, [sp]
 8006ece:	a80d      	add	r0, sp, #52	; 0x34
 8006ed0:	edde 7a01 	vldr	s15, [lr, #4]
 8006ed4:	9c05      	ldr	r4, [sp, #20]
 8006ed6:	9d07      	ldr	r5, [sp, #28]
 8006ed8:	edd2 fa00 	vldr	s31, [r2]
 8006edc:	ed92 ca01 	vldr	s24, [r2, #4]
 8006ee0:	edcd 7a01 	vstr	s15, [sp, #4]
 8006ee4:	c807      	ldmia	r0, {r0, r1, r2}
 8006ee6:	eddc 7a01 	vldr	s15, [ip, #4]
 8006eea:	edd4 ea00 	vldr	s29, [r4]
 8006eee:	ed95 ea00 	vldr	s28, [r5]
 8006ef2:	edd6 da00 	vldr	s27, [r6]
 8006ef6:	edd4 aa01 	vldr	s21, [r4, #4]
 8006efa:	ed95 aa01 	vldr	s20, [r5, #4]
 8006efe:	ed9e da00 	vldr	s26, [lr]
 8006f02:	eddc ca00 	vldr	s25, [ip]
 8006f06:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006f0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006f0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006f10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006f12:	edcd 7a02 	vstr	s15, [sp, #8]
 8006f16:	e001      	b.n	8006f1c <arm_radix8_butterfly_f32+0x328>
 8006f18:	3f3504f3 	.word	0x3f3504f3
 8006f1c:	ed16 6a01 	vldr	s12, [r6, #-4]
 8006f20:	ed91 5a00 	vldr	s10, [r1]
 8006f24:	ed57 9a01 	vldr	s19, [r7, #-4]
 8006f28:	edd5 7a00 	vldr	s15, [r5]
 8006f2c:	ed18 7a01 	vldr	s14, [r8, #-4]
 8006f30:	edd2 3a00 	vldr	s7, [r2]
 8006f34:	ed94 3a00 	vldr	s6, [r4]
 8006f38:	ed90 2a00 	vldr	s4, [r0]
 8006f3c:	ed92 0a01 	vldr	s0, [r2, #4]
 8006f40:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006f44:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006f48:	ee33 4a29 	vadd.f32	s8, s6, s19
 8006f4c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8006f50:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006f54:	ee71 6a24 	vadd.f32	s13, s2, s9
 8006f58:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006f5c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8006f60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f64:	ed82 6a00 	vstr	s12, [r2]
 8006f68:	edd5 8a01 	vldr	s17, [r5, #4]
 8006f6c:	ed90 9a01 	vldr	s18, [r0, #4]
 8006f70:	edd6 2a00 	vldr	s5, [r6]
 8006f74:	ed98 7a00 	vldr	s14, [r8]
 8006f78:	edd4 0a01 	vldr	s1, [r4, #4]
 8006f7c:	ed91 6a01 	vldr	s12, [r1, #4]
 8006f80:	edd7 5a00 	vldr	s11, [r7]
 8006f84:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006f88:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006f8c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006f90:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8006f94:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006f98:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006f9c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8006fa0:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006fa4:	ee75 8a69 	vsub.f32	s17, s10, s19
 8006fa8:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006fac:	ee35 5a29 	vadd.f32	s10, s10, s19
 8006fb0:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006fb4:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006fb8:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8006fbc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006fc0:	ee32 9a08 	vadd.f32	s18, s4, s16
 8006fc4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006fc8:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006fcc:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006fd0:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006fd4:	ee32 1a87 	vadd.f32	s2, s5, s14
 8006fd8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006fdc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006fe0:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006fe4:	ee73 0a29 	vadd.f32	s1, s6, s19
 8006fe8:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006fec:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006ff0:	ee32 7a64 	vsub.f32	s14, s4, s9
 8006ff4:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8006ff8:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006ffc:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8007000:	ee75 8a85 	vadd.f32	s17, s11, s10
 8007004:	ee74 3a22 	vadd.f32	s7, s8, s5
 8007008:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800700c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8007010:	ee79 1a41 	vsub.f32	s3, s18, s2
 8007014:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8007018:	ee76 5a43 	vsub.f32	s11, s12, s6
 800701c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8007020:	ee74 4a82 	vadd.f32	s9, s9, s4
 8007024:	ee30 4a60 	vsub.f32	s8, s0, s1
 8007028:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800702c:	ee30 0a80 	vadd.f32	s0, s1, s0
 8007030:	ee77 9a85 	vadd.f32	s19, s15, s10
 8007034:	ee33 6a06 	vadd.f32	s12, s6, s12
 8007038:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800703c:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8007040:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8007044:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8007048:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800704c:	ee39 1a01 	vadd.f32	s2, s18, s2
 8007050:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8007054:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8007058:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800705c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8007060:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8007064:	ee35 3a03 	vadd.f32	s6, s10, s6
 8007068:	ee72 6a66 	vsub.f32	s13, s4, s13
 800706c:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8007070:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8007074:	ed9d 4a02 	vldr	s8, [sp, #8]
 8007078:	ed82 1a01 	vstr	s2, [r2, #4]
 800707c:	ee77 3a63 	vsub.f32	s7, s14, s7
 8007080:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007084:	ed9d 7a01 	vldr	s14, [sp, #4]
 8007088:	ed81 3a00 	vstr	s6, [r1]
 800708c:	ee30 9a89 	vadd.f32	s18, s1, s18
 8007090:	ee32 2a05 	vadd.f32	s4, s4, s10
 8007094:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8007098:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800709c:	ee67 2a22 	vmul.f32	s5, s14, s5
 80070a0:	ee64 1a00 	vmul.f32	s3, s8, s0
 80070a4:	ee27 7a24 	vmul.f32	s14, s14, s9
 80070a8:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80070ac:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80070b0:	ee64 8a28 	vmul.f32	s17, s8, s17
 80070b4:	ed9d 4a00 	vldr	s8, [sp]
 80070b8:	edc1 6a01 	vstr	s13, [r1, #4]
 80070bc:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80070c0:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80070c4:	ee64 9a29 	vmul.f32	s19, s8, s19
 80070c8:	ee24 4a25 	vmul.f32	s8, s8, s11
 80070cc:	ee30 7a87 	vadd.f32	s14, s1, s14
 80070d0:	ee74 4a84 	vadd.f32	s9, s9, s8
 80070d4:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80070d8:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80070dc:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80070e0:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80070e4:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80070e8:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80070ec:	ee75 1a21 	vadd.f32	s3, s10, s3
 80070f0:	ee30 0a68 	vsub.f32	s0, s0, s17
 80070f4:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80070f8:	ee70 0a84 	vadd.f32	s1, s1, s8
 80070fc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007100:	44d9      	add	r9, fp
 8007102:	45ca      	cmp	sl, r9
 8007104:	ed84 9a00 	vstr	s18, [r4]
 8007108:	edc4 3a01 	vstr	s7, [r4, #4]
 800710c:	441a      	add	r2, r3
 800710e:	ed07 7a01 	vstr	s14, [r7, #-4]
 8007112:	edc7 2a00 	vstr	s5, [r7]
 8007116:	4419      	add	r1, r3
 8007118:	ed80 2a00 	vstr	s4, [r0]
 800711c:	ed80 8a01 	vstr	s16, [r0, #4]
 8007120:	441c      	add	r4, r3
 8007122:	ed48 1a01 	vstr	s3, [r8, #-4]
 8007126:	ed88 0a00 	vstr	s0, [r8]
 800712a:	441f      	add	r7, r3
 800712c:	ed46 4a01 	vstr	s9, [r6, #-4]
 8007130:	4418      	add	r0, r3
 8007132:	edc6 9a00 	vstr	s19, [r6]
 8007136:	4498      	add	r8, r3
 8007138:	edc5 0a00 	vstr	s1, [r5]
 800713c:	ed85 6a01 	vstr	s12, [r5, #4]
 8007140:	441e      	add	r6, r3
 8007142:	441d      	add	r5, r3
 8007144:	f63f aeea 	bhi.w	8006f1c <arm_radix8_butterfly_f32+0x328>
 8007148:	9a03      	ldr	r2, [sp, #12]
 800714a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800714c:	3201      	adds	r2, #1
 800714e:	4611      	mov	r1, r2
 8007150:	9203      	str	r2, [sp, #12]
 8007152:	9a04      	ldr	r2, [sp, #16]
 8007154:	4402      	add	r2, r0
 8007156:	9204      	str	r2, [sp, #16]
 8007158:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800715a:	9a05      	ldr	r2, [sp, #20]
 800715c:	4402      	add	r2, r0
 800715e:	9205      	str	r2, [sp, #20]
 8007160:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007162:	9a07      	ldr	r2, [sp, #28]
 8007164:	4402      	add	r2, r0
 8007166:	9207      	str	r2, [sp, #28]
 8007168:	9816      	ldr	r0, [sp, #88]	; 0x58
 800716a:	9a06      	ldr	r2, [sp, #24]
 800716c:	4402      	add	r2, r0
 800716e:	9206      	str	r2, [sp, #24]
 8007170:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007172:	4496      	add	lr, r2
 8007174:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007176:	4494      	add	ip, r2
 8007178:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800717a:	3208      	adds	r2, #8
 800717c:	920f      	str	r2, [sp, #60]	; 0x3c
 800717e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007180:	3208      	adds	r2, #8
 8007182:	920e      	str	r2, [sp, #56]	; 0x38
 8007184:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007186:	3208      	adds	r2, #8
 8007188:	920d      	str	r2, [sp, #52]	; 0x34
 800718a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800718c:	3208      	adds	r2, #8
 800718e:	920c      	str	r2, [sp, #48]	; 0x30
 8007190:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007192:	3208      	adds	r2, #8
 8007194:	920b      	str	r2, [sp, #44]	; 0x2c
 8007196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007198:	3208      	adds	r2, #8
 800719a:	920a      	str	r2, [sp, #40]	; 0x28
 800719c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800719e:	3208      	adds	r2, #8
 80071a0:	9209      	str	r2, [sp, #36]	; 0x24
 80071a2:	9a08      	ldr	r2, [sp, #32]
 80071a4:	3208      	adds	r2, #8
 80071a6:	9208      	str	r2, [sp, #32]
 80071a8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80071aa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80071ac:	4288      	cmp	r0, r1
 80071ae:	4622      	mov	r2, r4
 80071b0:	d007      	beq.n	80071c2 <arm_radix8_butterfly_f32+0x5ce>
 80071b2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80071b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80071b8:	4621      	mov	r1, r4
 80071ba:	4401      	add	r1, r0
 80071bc:	9110      	str	r1, [sp, #64]	; 0x40
 80071be:	9804      	ldr	r0, [sp, #16]
 80071c0:	e67c      	b.n	8006ebc <arm_radix8_butterfly_f32+0x2c8>
 80071c2:	4683      	mov	fp, r0
 80071c4:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 80071c8:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80071ca:	e524      	b.n	8006c16 <arm_radix8_butterfly_f32+0x22>
 80071cc:	b01d      	add	sp, #116	; 0x74
 80071ce:	ecbd 8b10 	vpop	{d8-d15}
 80071d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d6:	bf00      	nop

080071d8 <__errno>:
 80071d8:	4b01      	ldr	r3, [pc, #4]	; (80071e0 <__errno+0x8>)
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	2000002c 	.word	0x2000002c

080071e4 <__libc_init_array>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	4d0d      	ldr	r5, [pc, #52]	; (800721c <__libc_init_array+0x38>)
 80071e8:	4c0d      	ldr	r4, [pc, #52]	; (8007220 <__libc_init_array+0x3c>)
 80071ea:	1b64      	subs	r4, r4, r5
 80071ec:	10a4      	asrs	r4, r4, #2
 80071ee:	2600      	movs	r6, #0
 80071f0:	42a6      	cmp	r6, r4
 80071f2:	d109      	bne.n	8007208 <__libc_init_array+0x24>
 80071f4:	4d0b      	ldr	r5, [pc, #44]	; (8007224 <__libc_init_array+0x40>)
 80071f6:	4c0c      	ldr	r4, [pc, #48]	; (8007228 <__libc_init_array+0x44>)
 80071f8:	f003 fdf8 	bl	800adec <_init>
 80071fc:	1b64      	subs	r4, r4, r5
 80071fe:	10a4      	asrs	r4, r4, #2
 8007200:	2600      	movs	r6, #0
 8007202:	42a6      	cmp	r6, r4
 8007204:	d105      	bne.n	8007212 <__libc_init_array+0x2e>
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	f855 3b04 	ldr.w	r3, [r5], #4
 800720c:	4798      	blx	r3
 800720e:	3601      	adds	r6, #1
 8007210:	e7ee      	b.n	80071f0 <__libc_init_array+0xc>
 8007212:	f855 3b04 	ldr.w	r3, [r5], #4
 8007216:	4798      	blx	r3
 8007218:	3601      	adds	r6, #1
 800721a:	e7f2      	b.n	8007202 <__libc_init_array+0x1e>
 800721c:	0801e840 	.word	0x0801e840
 8007220:	0801e840 	.word	0x0801e840
 8007224:	0801e840 	.word	0x0801e840
 8007228:	0801e844 	.word	0x0801e844

0800722c <memset>:
 800722c:	4402      	add	r2, r0
 800722e:	4603      	mov	r3, r0
 8007230:	4293      	cmp	r3, r2
 8007232:	d100      	bne.n	8007236 <memset+0xa>
 8007234:	4770      	bx	lr
 8007236:	f803 1b01 	strb.w	r1, [r3], #1
 800723a:	e7f9      	b.n	8007230 <memset+0x4>

0800723c <__cvt>:
 800723c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007240:	ec55 4b10 	vmov	r4, r5, d0
 8007244:	2d00      	cmp	r5, #0
 8007246:	460e      	mov	r6, r1
 8007248:	4619      	mov	r1, r3
 800724a:	462b      	mov	r3, r5
 800724c:	bfbb      	ittet	lt
 800724e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007252:	461d      	movlt	r5, r3
 8007254:	2300      	movge	r3, #0
 8007256:	232d      	movlt	r3, #45	; 0x2d
 8007258:	700b      	strb	r3, [r1, #0]
 800725a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800725c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007260:	4691      	mov	r9, r2
 8007262:	f023 0820 	bic.w	r8, r3, #32
 8007266:	bfbc      	itt	lt
 8007268:	4622      	movlt	r2, r4
 800726a:	4614      	movlt	r4, r2
 800726c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007270:	d005      	beq.n	800727e <__cvt+0x42>
 8007272:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007276:	d100      	bne.n	800727a <__cvt+0x3e>
 8007278:	3601      	adds	r6, #1
 800727a:	2102      	movs	r1, #2
 800727c:	e000      	b.n	8007280 <__cvt+0x44>
 800727e:	2103      	movs	r1, #3
 8007280:	ab03      	add	r3, sp, #12
 8007282:	9301      	str	r3, [sp, #4]
 8007284:	ab02      	add	r3, sp, #8
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	ec45 4b10 	vmov	d0, r4, r5
 800728c:	4653      	mov	r3, sl
 800728e:	4632      	mov	r2, r6
 8007290:	f000 fcca 	bl	8007c28 <_dtoa_r>
 8007294:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007298:	4607      	mov	r7, r0
 800729a:	d102      	bne.n	80072a2 <__cvt+0x66>
 800729c:	f019 0f01 	tst.w	r9, #1
 80072a0:	d022      	beq.n	80072e8 <__cvt+0xac>
 80072a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072a6:	eb07 0906 	add.w	r9, r7, r6
 80072aa:	d110      	bne.n	80072ce <__cvt+0x92>
 80072ac:	783b      	ldrb	r3, [r7, #0]
 80072ae:	2b30      	cmp	r3, #48	; 0x30
 80072b0:	d10a      	bne.n	80072c8 <__cvt+0x8c>
 80072b2:	2200      	movs	r2, #0
 80072b4:	2300      	movs	r3, #0
 80072b6:	4620      	mov	r0, r4
 80072b8:	4629      	mov	r1, r5
 80072ba:	f7f9 fc85 	bl	8000bc8 <__aeabi_dcmpeq>
 80072be:	b918      	cbnz	r0, 80072c8 <__cvt+0x8c>
 80072c0:	f1c6 0601 	rsb	r6, r6, #1
 80072c4:	f8ca 6000 	str.w	r6, [sl]
 80072c8:	f8da 3000 	ldr.w	r3, [sl]
 80072cc:	4499      	add	r9, r3
 80072ce:	2200      	movs	r2, #0
 80072d0:	2300      	movs	r3, #0
 80072d2:	4620      	mov	r0, r4
 80072d4:	4629      	mov	r1, r5
 80072d6:	f7f9 fc77 	bl	8000bc8 <__aeabi_dcmpeq>
 80072da:	b108      	cbz	r0, 80072e0 <__cvt+0xa4>
 80072dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80072e0:	2230      	movs	r2, #48	; 0x30
 80072e2:	9b03      	ldr	r3, [sp, #12]
 80072e4:	454b      	cmp	r3, r9
 80072e6:	d307      	bcc.n	80072f8 <__cvt+0xbc>
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072ec:	1bdb      	subs	r3, r3, r7
 80072ee:	4638      	mov	r0, r7
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	b004      	add	sp, #16
 80072f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f8:	1c59      	adds	r1, r3, #1
 80072fa:	9103      	str	r1, [sp, #12]
 80072fc:	701a      	strb	r2, [r3, #0]
 80072fe:	e7f0      	b.n	80072e2 <__cvt+0xa6>

08007300 <__exponent>:
 8007300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007302:	4603      	mov	r3, r0
 8007304:	2900      	cmp	r1, #0
 8007306:	bfb8      	it	lt
 8007308:	4249      	neglt	r1, r1
 800730a:	f803 2b02 	strb.w	r2, [r3], #2
 800730e:	bfb4      	ite	lt
 8007310:	222d      	movlt	r2, #45	; 0x2d
 8007312:	222b      	movge	r2, #43	; 0x2b
 8007314:	2909      	cmp	r1, #9
 8007316:	7042      	strb	r2, [r0, #1]
 8007318:	dd2a      	ble.n	8007370 <__exponent+0x70>
 800731a:	f10d 0407 	add.w	r4, sp, #7
 800731e:	46a4      	mov	ip, r4
 8007320:	270a      	movs	r7, #10
 8007322:	46a6      	mov	lr, r4
 8007324:	460a      	mov	r2, r1
 8007326:	fb91 f6f7 	sdiv	r6, r1, r7
 800732a:	fb07 1516 	mls	r5, r7, r6, r1
 800732e:	3530      	adds	r5, #48	; 0x30
 8007330:	2a63      	cmp	r2, #99	; 0x63
 8007332:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007336:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800733a:	4631      	mov	r1, r6
 800733c:	dcf1      	bgt.n	8007322 <__exponent+0x22>
 800733e:	3130      	adds	r1, #48	; 0x30
 8007340:	f1ae 0502 	sub.w	r5, lr, #2
 8007344:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007348:	1c44      	adds	r4, r0, #1
 800734a:	4629      	mov	r1, r5
 800734c:	4561      	cmp	r1, ip
 800734e:	d30a      	bcc.n	8007366 <__exponent+0x66>
 8007350:	f10d 0209 	add.w	r2, sp, #9
 8007354:	eba2 020e 	sub.w	r2, r2, lr
 8007358:	4565      	cmp	r5, ip
 800735a:	bf88      	it	hi
 800735c:	2200      	movhi	r2, #0
 800735e:	4413      	add	r3, r2
 8007360:	1a18      	subs	r0, r3, r0
 8007362:	b003      	add	sp, #12
 8007364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007366:	f811 2b01 	ldrb.w	r2, [r1], #1
 800736a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800736e:	e7ed      	b.n	800734c <__exponent+0x4c>
 8007370:	2330      	movs	r3, #48	; 0x30
 8007372:	3130      	adds	r1, #48	; 0x30
 8007374:	7083      	strb	r3, [r0, #2]
 8007376:	70c1      	strb	r1, [r0, #3]
 8007378:	1d03      	adds	r3, r0, #4
 800737a:	e7f1      	b.n	8007360 <__exponent+0x60>

0800737c <_printf_float>:
 800737c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007380:	ed2d 8b02 	vpush	{d8}
 8007384:	b08d      	sub	sp, #52	; 0x34
 8007386:	460c      	mov	r4, r1
 8007388:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800738c:	4616      	mov	r6, r2
 800738e:	461f      	mov	r7, r3
 8007390:	4605      	mov	r5, r0
 8007392:	f001 fa37 	bl	8008804 <_localeconv_r>
 8007396:	f8d0 a000 	ldr.w	sl, [r0]
 800739a:	4650      	mov	r0, sl
 800739c:	f7f8 ff98 	bl	80002d0 <strlen>
 80073a0:	2300      	movs	r3, #0
 80073a2:	930a      	str	r3, [sp, #40]	; 0x28
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	9305      	str	r3, [sp, #20]
 80073a8:	f8d8 3000 	ldr.w	r3, [r8]
 80073ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80073b0:	3307      	adds	r3, #7
 80073b2:	f023 0307 	bic.w	r3, r3, #7
 80073b6:	f103 0208 	add.w	r2, r3, #8
 80073ba:	f8c8 2000 	str.w	r2, [r8]
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80073c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80073ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80073ce:	9307      	str	r3, [sp, #28]
 80073d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80073d4:	ee08 0a10 	vmov	s16, r0
 80073d8:	4b9f      	ldr	r3, [pc, #636]	; (8007658 <_printf_float+0x2dc>)
 80073da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073e2:	f7f9 fc23 	bl	8000c2c <__aeabi_dcmpun>
 80073e6:	bb88      	cbnz	r0, 800744c <_printf_float+0xd0>
 80073e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073ec:	4b9a      	ldr	r3, [pc, #616]	; (8007658 <_printf_float+0x2dc>)
 80073ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073f2:	f7f9 fbfd 	bl	8000bf0 <__aeabi_dcmple>
 80073f6:	bb48      	cbnz	r0, 800744c <_printf_float+0xd0>
 80073f8:	2200      	movs	r2, #0
 80073fa:	2300      	movs	r3, #0
 80073fc:	4640      	mov	r0, r8
 80073fe:	4649      	mov	r1, r9
 8007400:	f7f9 fbec 	bl	8000bdc <__aeabi_dcmplt>
 8007404:	b110      	cbz	r0, 800740c <_printf_float+0x90>
 8007406:	232d      	movs	r3, #45	; 0x2d
 8007408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800740c:	4b93      	ldr	r3, [pc, #588]	; (800765c <_printf_float+0x2e0>)
 800740e:	4894      	ldr	r0, [pc, #592]	; (8007660 <_printf_float+0x2e4>)
 8007410:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007414:	bf94      	ite	ls
 8007416:	4698      	movls	r8, r3
 8007418:	4680      	movhi	r8, r0
 800741a:	2303      	movs	r3, #3
 800741c:	6123      	str	r3, [r4, #16]
 800741e:	9b05      	ldr	r3, [sp, #20]
 8007420:	f023 0204 	bic.w	r2, r3, #4
 8007424:	6022      	str	r2, [r4, #0]
 8007426:	f04f 0900 	mov.w	r9, #0
 800742a:	9700      	str	r7, [sp, #0]
 800742c:	4633      	mov	r3, r6
 800742e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007430:	4621      	mov	r1, r4
 8007432:	4628      	mov	r0, r5
 8007434:	f000 f9d8 	bl	80077e8 <_printf_common>
 8007438:	3001      	adds	r0, #1
 800743a:	f040 8090 	bne.w	800755e <_printf_float+0x1e2>
 800743e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007442:	b00d      	add	sp, #52	; 0x34
 8007444:	ecbd 8b02 	vpop	{d8}
 8007448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744c:	4642      	mov	r2, r8
 800744e:	464b      	mov	r3, r9
 8007450:	4640      	mov	r0, r8
 8007452:	4649      	mov	r1, r9
 8007454:	f7f9 fbea 	bl	8000c2c <__aeabi_dcmpun>
 8007458:	b140      	cbz	r0, 800746c <_printf_float+0xf0>
 800745a:	464b      	mov	r3, r9
 800745c:	2b00      	cmp	r3, #0
 800745e:	bfbc      	itt	lt
 8007460:	232d      	movlt	r3, #45	; 0x2d
 8007462:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007466:	487f      	ldr	r0, [pc, #508]	; (8007664 <_printf_float+0x2e8>)
 8007468:	4b7f      	ldr	r3, [pc, #508]	; (8007668 <_printf_float+0x2ec>)
 800746a:	e7d1      	b.n	8007410 <_printf_float+0x94>
 800746c:	6863      	ldr	r3, [r4, #4]
 800746e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007472:	9206      	str	r2, [sp, #24]
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	d13f      	bne.n	80074f8 <_printf_float+0x17c>
 8007478:	2306      	movs	r3, #6
 800747a:	6063      	str	r3, [r4, #4]
 800747c:	9b05      	ldr	r3, [sp, #20]
 800747e:	6861      	ldr	r1, [r4, #4]
 8007480:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007484:	2300      	movs	r3, #0
 8007486:	9303      	str	r3, [sp, #12]
 8007488:	ab0a      	add	r3, sp, #40	; 0x28
 800748a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800748e:	ab09      	add	r3, sp, #36	; 0x24
 8007490:	ec49 8b10 	vmov	d0, r8, r9
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	6022      	str	r2, [r4, #0]
 8007498:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800749c:	4628      	mov	r0, r5
 800749e:	f7ff fecd 	bl	800723c <__cvt>
 80074a2:	9b06      	ldr	r3, [sp, #24]
 80074a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074a6:	2b47      	cmp	r3, #71	; 0x47
 80074a8:	4680      	mov	r8, r0
 80074aa:	d108      	bne.n	80074be <_printf_float+0x142>
 80074ac:	1cc8      	adds	r0, r1, #3
 80074ae:	db02      	blt.n	80074b6 <_printf_float+0x13a>
 80074b0:	6863      	ldr	r3, [r4, #4]
 80074b2:	4299      	cmp	r1, r3
 80074b4:	dd41      	ble.n	800753a <_printf_float+0x1be>
 80074b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80074ba:	fa5f fb8b 	uxtb.w	fp, fp
 80074be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074c2:	d820      	bhi.n	8007506 <_printf_float+0x18a>
 80074c4:	3901      	subs	r1, #1
 80074c6:	465a      	mov	r2, fp
 80074c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80074cc:	9109      	str	r1, [sp, #36]	; 0x24
 80074ce:	f7ff ff17 	bl	8007300 <__exponent>
 80074d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074d4:	1813      	adds	r3, r2, r0
 80074d6:	2a01      	cmp	r2, #1
 80074d8:	4681      	mov	r9, r0
 80074da:	6123      	str	r3, [r4, #16]
 80074dc:	dc02      	bgt.n	80074e4 <_printf_float+0x168>
 80074de:	6822      	ldr	r2, [r4, #0]
 80074e0:	07d2      	lsls	r2, r2, #31
 80074e2:	d501      	bpl.n	80074e8 <_printf_float+0x16c>
 80074e4:	3301      	adds	r3, #1
 80074e6:	6123      	str	r3, [r4, #16]
 80074e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d09c      	beq.n	800742a <_printf_float+0xae>
 80074f0:	232d      	movs	r3, #45	; 0x2d
 80074f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074f6:	e798      	b.n	800742a <_printf_float+0xae>
 80074f8:	9a06      	ldr	r2, [sp, #24]
 80074fa:	2a47      	cmp	r2, #71	; 0x47
 80074fc:	d1be      	bne.n	800747c <_printf_float+0x100>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1bc      	bne.n	800747c <_printf_float+0x100>
 8007502:	2301      	movs	r3, #1
 8007504:	e7b9      	b.n	800747a <_printf_float+0xfe>
 8007506:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800750a:	d118      	bne.n	800753e <_printf_float+0x1c2>
 800750c:	2900      	cmp	r1, #0
 800750e:	6863      	ldr	r3, [r4, #4]
 8007510:	dd0b      	ble.n	800752a <_printf_float+0x1ae>
 8007512:	6121      	str	r1, [r4, #16]
 8007514:	b913      	cbnz	r3, 800751c <_printf_float+0x1a0>
 8007516:	6822      	ldr	r2, [r4, #0]
 8007518:	07d0      	lsls	r0, r2, #31
 800751a:	d502      	bpl.n	8007522 <_printf_float+0x1a6>
 800751c:	3301      	adds	r3, #1
 800751e:	440b      	add	r3, r1
 8007520:	6123      	str	r3, [r4, #16]
 8007522:	65a1      	str	r1, [r4, #88]	; 0x58
 8007524:	f04f 0900 	mov.w	r9, #0
 8007528:	e7de      	b.n	80074e8 <_printf_float+0x16c>
 800752a:	b913      	cbnz	r3, 8007532 <_printf_float+0x1b6>
 800752c:	6822      	ldr	r2, [r4, #0]
 800752e:	07d2      	lsls	r2, r2, #31
 8007530:	d501      	bpl.n	8007536 <_printf_float+0x1ba>
 8007532:	3302      	adds	r3, #2
 8007534:	e7f4      	b.n	8007520 <_printf_float+0x1a4>
 8007536:	2301      	movs	r3, #1
 8007538:	e7f2      	b.n	8007520 <_printf_float+0x1a4>
 800753a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800753e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007540:	4299      	cmp	r1, r3
 8007542:	db05      	blt.n	8007550 <_printf_float+0x1d4>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	6121      	str	r1, [r4, #16]
 8007548:	07d8      	lsls	r0, r3, #31
 800754a:	d5ea      	bpl.n	8007522 <_printf_float+0x1a6>
 800754c:	1c4b      	adds	r3, r1, #1
 800754e:	e7e7      	b.n	8007520 <_printf_float+0x1a4>
 8007550:	2900      	cmp	r1, #0
 8007552:	bfd4      	ite	le
 8007554:	f1c1 0202 	rsble	r2, r1, #2
 8007558:	2201      	movgt	r2, #1
 800755a:	4413      	add	r3, r2
 800755c:	e7e0      	b.n	8007520 <_printf_float+0x1a4>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	055a      	lsls	r2, r3, #21
 8007562:	d407      	bmi.n	8007574 <_printf_float+0x1f8>
 8007564:	6923      	ldr	r3, [r4, #16]
 8007566:	4642      	mov	r2, r8
 8007568:	4631      	mov	r1, r6
 800756a:	4628      	mov	r0, r5
 800756c:	47b8      	blx	r7
 800756e:	3001      	adds	r0, #1
 8007570:	d12c      	bne.n	80075cc <_printf_float+0x250>
 8007572:	e764      	b.n	800743e <_printf_float+0xc2>
 8007574:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007578:	f240 80e0 	bls.w	800773c <_printf_float+0x3c0>
 800757c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007580:	2200      	movs	r2, #0
 8007582:	2300      	movs	r3, #0
 8007584:	f7f9 fb20 	bl	8000bc8 <__aeabi_dcmpeq>
 8007588:	2800      	cmp	r0, #0
 800758a:	d034      	beq.n	80075f6 <_printf_float+0x27a>
 800758c:	4a37      	ldr	r2, [pc, #220]	; (800766c <_printf_float+0x2f0>)
 800758e:	2301      	movs	r3, #1
 8007590:	4631      	mov	r1, r6
 8007592:	4628      	mov	r0, r5
 8007594:	47b8      	blx	r7
 8007596:	3001      	adds	r0, #1
 8007598:	f43f af51 	beq.w	800743e <_printf_float+0xc2>
 800759c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075a0:	429a      	cmp	r2, r3
 80075a2:	db02      	blt.n	80075aa <_printf_float+0x22e>
 80075a4:	6823      	ldr	r3, [r4, #0]
 80075a6:	07d8      	lsls	r0, r3, #31
 80075a8:	d510      	bpl.n	80075cc <_printf_float+0x250>
 80075aa:	ee18 3a10 	vmov	r3, s16
 80075ae:	4652      	mov	r2, sl
 80075b0:	4631      	mov	r1, r6
 80075b2:	4628      	mov	r0, r5
 80075b4:	47b8      	blx	r7
 80075b6:	3001      	adds	r0, #1
 80075b8:	f43f af41 	beq.w	800743e <_printf_float+0xc2>
 80075bc:	f04f 0800 	mov.w	r8, #0
 80075c0:	f104 091a 	add.w	r9, r4, #26
 80075c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c6:	3b01      	subs	r3, #1
 80075c8:	4543      	cmp	r3, r8
 80075ca:	dc09      	bgt.n	80075e0 <_printf_float+0x264>
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	079b      	lsls	r3, r3, #30
 80075d0:	f100 8105 	bmi.w	80077de <_printf_float+0x462>
 80075d4:	68e0      	ldr	r0, [r4, #12]
 80075d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d8:	4298      	cmp	r0, r3
 80075da:	bfb8      	it	lt
 80075dc:	4618      	movlt	r0, r3
 80075de:	e730      	b.n	8007442 <_printf_float+0xc6>
 80075e0:	2301      	movs	r3, #1
 80075e2:	464a      	mov	r2, r9
 80075e4:	4631      	mov	r1, r6
 80075e6:	4628      	mov	r0, r5
 80075e8:	47b8      	blx	r7
 80075ea:	3001      	adds	r0, #1
 80075ec:	f43f af27 	beq.w	800743e <_printf_float+0xc2>
 80075f0:	f108 0801 	add.w	r8, r8, #1
 80075f4:	e7e6      	b.n	80075c4 <_printf_float+0x248>
 80075f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	dc39      	bgt.n	8007670 <_printf_float+0x2f4>
 80075fc:	4a1b      	ldr	r2, [pc, #108]	; (800766c <_printf_float+0x2f0>)
 80075fe:	2301      	movs	r3, #1
 8007600:	4631      	mov	r1, r6
 8007602:	4628      	mov	r0, r5
 8007604:	47b8      	blx	r7
 8007606:	3001      	adds	r0, #1
 8007608:	f43f af19 	beq.w	800743e <_printf_float+0xc2>
 800760c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007610:	4313      	orrs	r3, r2
 8007612:	d102      	bne.n	800761a <_printf_float+0x29e>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	07d9      	lsls	r1, r3, #31
 8007618:	d5d8      	bpl.n	80075cc <_printf_float+0x250>
 800761a:	ee18 3a10 	vmov	r3, s16
 800761e:	4652      	mov	r2, sl
 8007620:	4631      	mov	r1, r6
 8007622:	4628      	mov	r0, r5
 8007624:	47b8      	blx	r7
 8007626:	3001      	adds	r0, #1
 8007628:	f43f af09 	beq.w	800743e <_printf_float+0xc2>
 800762c:	f04f 0900 	mov.w	r9, #0
 8007630:	f104 0a1a 	add.w	sl, r4, #26
 8007634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007636:	425b      	negs	r3, r3
 8007638:	454b      	cmp	r3, r9
 800763a:	dc01      	bgt.n	8007640 <_printf_float+0x2c4>
 800763c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800763e:	e792      	b.n	8007566 <_printf_float+0x1ea>
 8007640:	2301      	movs	r3, #1
 8007642:	4652      	mov	r2, sl
 8007644:	4631      	mov	r1, r6
 8007646:	4628      	mov	r0, r5
 8007648:	47b8      	blx	r7
 800764a:	3001      	adds	r0, #1
 800764c:	f43f aef7 	beq.w	800743e <_printf_float+0xc2>
 8007650:	f109 0901 	add.w	r9, r9, #1
 8007654:	e7ee      	b.n	8007634 <_printf_float+0x2b8>
 8007656:	bf00      	nop
 8007658:	7fefffff 	.word	0x7fefffff
 800765c:	0801e284 	.word	0x0801e284
 8007660:	0801e288 	.word	0x0801e288
 8007664:	0801e290 	.word	0x0801e290
 8007668:	0801e28c 	.word	0x0801e28c
 800766c:	0801e294 	.word	0x0801e294
 8007670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007672:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007674:	429a      	cmp	r2, r3
 8007676:	bfa8      	it	ge
 8007678:	461a      	movge	r2, r3
 800767a:	2a00      	cmp	r2, #0
 800767c:	4691      	mov	r9, r2
 800767e:	dc37      	bgt.n	80076f0 <_printf_float+0x374>
 8007680:	f04f 0b00 	mov.w	fp, #0
 8007684:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007688:	f104 021a 	add.w	r2, r4, #26
 800768c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800768e:	9305      	str	r3, [sp, #20]
 8007690:	eba3 0309 	sub.w	r3, r3, r9
 8007694:	455b      	cmp	r3, fp
 8007696:	dc33      	bgt.n	8007700 <_printf_float+0x384>
 8007698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800769c:	429a      	cmp	r2, r3
 800769e:	db3b      	blt.n	8007718 <_printf_float+0x39c>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	07da      	lsls	r2, r3, #31
 80076a4:	d438      	bmi.n	8007718 <_printf_float+0x39c>
 80076a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a8:	9a05      	ldr	r2, [sp, #20]
 80076aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076ac:	1a9a      	subs	r2, r3, r2
 80076ae:	eba3 0901 	sub.w	r9, r3, r1
 80076b2:	4591      	cmp	r9, r2
 80076b4:	bfa8      	it	ge
 80076b6:	4691      	movge	r9, r2
 80076b8:	f1b9 0f00 	cmp.w	r9, #0
 80076bc:	dc35      	bgt.n	800772a <_printf_float+0x3ae>
 80076be:	f04f 0800 	mov.w	r8, #0
 80076c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076c6:	f104 0a1a 	add.w	sl, r4, #26
 80076ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076ce:	1a9b      	subs	r3, r3, r2
 80076d0:	eba3 0309 	sub.w	r3, r3, r9
 80076d4:	4543      	cmp	r3, r8
 80076d6:	f77f af79 	ble.w	80075cc <_printf_float+0x250>
 80076da:	2301      	movs	r3, #1
 80076dc:	4652      	mov	r2, sl
 80076de:	4631      	mov	r1, r6
 80076e0:	4628      	mov	r0, r5
 80076e2:	47b8      	blx	r7
 80076e4:	3001      	adds	r0, #1
 80076e6:	f43f aeaa 	beq.w	800743e <_printf_float+0xc2>
 80076ea:	f108 0801 	add.w	r8, r8, #1
 80076ee:	e7ec      	b.n	80076ca <_printf_float+0x34e>
 80076f0:	4613      	mov	r3, r2
 80076f2:	4631      	mov	r1, r6
 80076f4:	4642      	mov	r2, r8
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b8      	blx	r7
 80076fa:	3001      	adds	r0, #1
 80076fc:	d1c0      	bne.n	8007680 <_printf_float+0x304>
 80076fe:	e69e      	b.n	800743e <_printf_float+0xc2>
 8007700:	2301      	movs	r3, #1
 8007702:	4631      	mov	r1, r6
 8007704:	4628      	mov	r0, r5
 8007706:	9205      	str	r2, [sp, #20]
 8007708:	47b8      	blx	r7
 800770a:	3001      	adds	r0, #1
 800770c:	f43f ae97 	beq.w	800743e <_printf_float+0xc2>
 8007710:	9a05      	ldr	r2, [sp, #20]
 8007712:	f10b 0b01 	add.w	fp, fp, #1
 8007716:	e7b9      	b.n	800768c <_printf_float+0x310>
 8007718:	ee18 3a10 	vmov	r3, s16
 800771c:	4652      	mov	r2, sl
 800771e:	4631      	mov	r1, r6
 8007720:	4628      	mov	r0, r5
 8007722:	47b8      	blx	r7
 8007724:	3001      	adds	r0, #1
 8007726:	d1be      	bne.n	80076a6 <_printf_float+0x32a>
 8007728:	e689      	b.n	800743e <_printf_float+0xc2>
 800772a:	9a05      	ldr	r2, [sp, #20]
 800772c:	464b      	mov	r3, r9
 800772e:	4442      	add	r2, r8
 8007730:	4631      	mov	r1, r6
 8007732:	4628      	mov	r0, r5
 8007734:	47b8      	blx	r7
 8007736:	3001      	adds	r0, #1
 8007738:	d1c1      	bne.n	80076be <_printf_float+0x342>
 800773a:	e680      	b.n	800743e <_printf_float+0xc2>
 800773c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800773e:	2a01      	cmp	r2, #1
 8007740:	dc01      	bgt.n	8007746 <_printf_float+0x3ca>
 8007742:	07db      	lsls	r3, r3, #31
 8007744:	d538      	bpl.n	80077b8 <_printf_float+0x43c>
 8007746:	2301      	movs	r3, #1
 8007748:	4642      	mov	r2, r8
 800774a:	4631      	mov	r1, r6
 800774c:	4628      	mov	r0, r5
 800774e:	47b8      	blx	r7
 8007750:	3001      	adds	r0, #1
 8007752:	f43f ae74 	beq.w	800743e <_printf_float+0xc2>
 8007756:	ee18 3a10 	vmov	r3, s16
 800775a:	4652      	mov	r2, sl
 800775c:	4631      	mov	r1, r6
 800775e:	4628      	mov	r0, r5
 8007760:	47b8      	blx	r7
 8007762:	3001      	adds	r0, #1
 8007764:	f43f ae6b 	beq.w	800743e <_printf_float+0xc2>
 8007768:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800776c:	2200      	movs	r2, #0
 800776e:	2300      	movs	r3, #0
 8007770:	f7f9 fa2a 	bl	8000bc8 <__aeabi_dcmpeq>
 8007774:	b9d8      	cbnz	r0, 80077ae <_printf_float+0x432>
 8007776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007778:	f108 0201 	add.w	r2, r8, #1
 800777c:	3b01      	subs	r3, #1
 800777e:	4631      	mov	r1, r6
 8007780:	4628      	mov	r0, r5
 8007782:	47b8      	blx	r7
 8007784:	3001      	adds	r0, #1
 8007786:	d10e      	bne.n	80077a6 <_printf_float+0x42a>
 8007788:	e659      	b.n	800743e <_printf_float+0xc2>
 800778a:	2301      	movs	r3, #1
 800778c:	4652      	mov	r2, sl
 800778e:	4631      	mov	r1, r6
 8007790:	4628      	mov	r0, r5
 8007792:	47b8      	blx	r7
 8007794:	3001      	adds	r0, #1
 8007796:	f43f ae52 	beq.w	800743e <_printf_float+0xc2>
 800779a:	f108 0801 	add.w	r8, r8, #1
 800779e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077a0:	3b01      	subs	r3, #1
 80077a2:	4543      	cmp	r3, r8
 80077a4:	dcf1      	bgt.n	800778a <_printf_float+0x40e>
 80077a6:	464b      	mov	r3, r9
 80077a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80077ac:	e6dc      	b.n	8007568 <_printf_float+0x1ec>
 80077ae:	f04f 0800 	mov.w	r8, #0
 80077b2:	f104 0a1a 	add.w	sl, r4, #26
 80077b6:	e7f2      	b.n	800779e <_printf_float+0x422>
 80077b8:	2301      	movs	r3, #1
 80077ba:	4642      	mov	r2, r8
 80077bc:	e7df      	b.n	800777e <_printf_float+0x402>
 80077be:	2301      	movs	r3, #1
 80077c0:	464a      	mov	r2, r9
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b8      	blx	r7
 80077c8:	3001      	adds	r0, #1
 80077ca:	f43f ae38 	beq.w	800743e <_printf_float+0xc2>
 80077ce:	f108 0801 	add.w	r8, r8, #1
 80077d2:	68e3      	ldr	r3, [r4, #12]
 80077d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077d6:	1a5b      	subs	r3, r3, r1
 80077d8:	4543      	cmp	r3, r8
 80077da:	dcf0      	bgt.n	80077be <_printf_float+0x442>
 80077dc:	e6fa      	b.n	80075d4 <_printf_float+0x258>
 80077de:	f04f 0800 	mov.w	r8, #0
 80077e2:	f104 0919 	add.w	r9, r4, #25
 80077e6:	e7f4      	b.n	80077d2 <_printf_float+0x456>

080077e8 <_printf_common>:
 80077e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077ec:	4616      	mov	r6, r2
 80077ee:	4699      	mov	r9, r3
 80077f0:	688a      	ldr	r2, [r1, #8]
 80077f2:	690b      	ldr	r3, [r1, #16]
 80077f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077f8:	4293      	cmp	r3, r2
 80077fa:	bfb8      	it	lt
 80077fc:	4613      	movlt	r3, r2
 80077fe:	6033      	str	r3, [r6, #0]
 8007800:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007804:	4607      	mov	r7, r0
 8007806:	460c      	mov	r4, r1
 8007808:	b10a      	cbz	r2, 800780e <_printf_common+0x26>
 800780a:	3301      	adds	r3, #1
 800780c:	6033      	str	r3, [r6, #0]
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	0699      	lsls	r1, r3, #26
 8007812:	bf42      	ittt	mi
 8007814:	6833      	ldrmi	r3, [r6, #0]
 8007816:	3302      	addmi	r3, #2
 8007818:	6033      	strmi	r3, [r6, #0]
 800781a:	6825      	ldr	r5, [r4, #0]
 800781c:	f015 0506 	ands.w	r5, r5, #6
 8007820:	d106      	bne.n	8007830 <_printf_common+0x48>
 8007822:	f104 0a19 	add.w	sl, r4, #25
 8007826:	68e3      	ldr	r3, [r4, #12]
 8007828:	6832      	ldr	r2, [r6, #0]
 800782a:	1a9b      	subs	r3, r3, r2
 800782c:	42ab      	cmp	r3, r5
 800782e:	dc26      	bgt.n	800787e <_printf_common+0x96>
 8007830:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007834:	1e13      	subs	r3, r2, #0
 8007836:	6822      	ldr	r2, [r4, #0]
 8007838:	bf18      	it	ne
 800783a:	2301      	movne	r3, #1
 800783c:	0692      	lsls	r2, r2, #26
 800783e:	d42b      	bmi.n	8007898 <_printf_common+0xb0>
 8007840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007844:	4649      	mov	r1, r9
 8007846:	4638      	mov	r0, r7
 8007848:	47c0      	blx	r8
 800784a:	3001      	adds	r0, #1
 800784c:	d01e      	beq.n	800788c <_printf_common+0xa4>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	68e5      	ldr	r5, [r4, #12]
 8007852:	6832      	ldr	r2, [r6, #0]
 8007854:	f003 0306 	and.w	r3, r3, #6
 8007858:	2b04      	cmp	r3, #4
 800785a:	bf08      	it	eq
 800785c:	1aad      	subeq	r5, r5, r2
 800785e:	68a3      	ldr	r3, [r4, #8]
 8007860:	6922      	ldr	r2, [r4, #16]
 8007862:	bf0c      	ite	eq
 8007864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007868:	2500      	movne	r5, #0
 800786a:	4293      	cmp	r3, r2
 800786c:	bfc4      	itt	gt
 800786e:	1a9b      	subgt	r3, r3, r2
 8007870:	18ed      	addgt	r5, r5, r3
 8007872:	2600      	movs	r6, #0
 8007874:	341a      	adds	r4, #26
 8007876:	42b5      	cmp	r5, r6
 8007878:	d11a      	bne.n	80078b0 <_printf_common+0xc8>
 800787a:	2000      	movs	r0, #0
 800787c:	e008      	b.n	8007890 <_printf_common+0xa8>
 800787e:	2301      	movs	r3, #1
 8007880:	4652      	mov	r2, sl
 8007882:	4649      	mov	r1, r9
 8007884:	4638      	mov	r0, r7
 8007886:	47c0      	blx	r8
 8007888:	3001      	adds	r0, #1
 800788a:	d103      	bne.n	8007894 <_printf_common+0xac>
 800788c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007894:	3501      	adds	r5, #1
 8007896:	e7c6      	b.n	8007826 <_printf_common+0x3e>
 8007898:	18e1      	adds	r1, r4, r3
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	2030      	movs	r0, #48	; 0x30
 800789e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078a2:	4422      	add	r2, r4
 80078a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078ac:	3302      	adds	r3, #2
 80078ae:	e7c7      	b.n	8007840 <_printf_common+0x58>
 80078b0:	2301      	movs	r3, #1
 80078b2:	4622      	mov	r2, r4
 80078b4:	4649      	mov	r1, r9
 80078b6:	4638      	mov	r0, r7
 80078b8:	47c0      	blx	r8
 80078ba:	3001      	adds	r0, #1
 80078bc:	d0e6      	beq.n	800788c <_printf_common+0xa4>
 80078be:	3601      	adds	r6, #1
 80078c0:	e7d9      	b.n	8007876 <_printf_common+0x8e>
	...

080078c4 <_printf_i>:
 80078c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078c8:	7e0f      	ldrb	r7, [r1, #24]
 80078ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078cc:	2f78      	cmp	r7, #120	; 0x78
 80078ce:	4691      	mov	r9, r2
 80078d0:	4680      	mov	r8, r0
 80078d2:	460c      	mov	r4, r1
 80078d4:	469a      	mov	sl, r3
 80078d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078da:	d807      	bhi.n	80078ec <_printf_i+0x28>
 80078dc:	2f62      	cmp	r7, #98	; 0x62
 80078de:	d80a      	bhi.n	80078f6 <_printf_i+0x32>
 80078e0:	2f00      	cmp	r7, #0
 80078e2:	f000 80d8 	beq.w	8007a96 <_printf_i+0x1d2>
 80078e6:	2f58      	cmp	r7, #88	; 0x58
 80078e8:	f000 80a3 	beq.w	8007a32 <_printf_i+0x16e>
 80078ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078f4:	e03a      	b.n	800796c <_printf_i+0xa8>
 80078f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078fa:	2b15      	cmp	r3, #21
 80078fc:	d8f6      	bhi.n	80078ec <_printf_i+0x28>
 80078fe:	a101      	add	r1, pc, #4	; (adr r1, 8007904 <_printf_i+0x40>)
 8007900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007904:	0800795d 	.word	0x0800795d
 8007908:	08007971 	.word	0x08007971
 800790c:	080078ed 	.word	0x080078ed
 8007910:	080078ed 	.word	0x080078ed
 8007914:	080078ed 	.word	0x080078ed
 8007918:	080078ed 	.word	0x080078ed
 800791c:	08007971 	.word	0x08007971
 8007920:	080078ed 	.word	0x080078ed
 8007924:	080078ed 	.word	0x080078ed
 8007928:	080078ed 	.word	0x080078ed
 800792c:	080078ed 	.word	0x080078ed
 8007930:	08007a7d 	.word	0x08007a7d
 8007934:	080079a1 	.word	0x080079a1
 8007938:	08007a5f 	.word	0x08007a5f
 800793c:	080078ed 	.word	0x080078ed
 8007940:	080078ed 	.word	0x080078ed
 8007944:	08007a9f 	.word	0x08007a9f
 8007948:	080078ed 	.word	0x080078ed
 800794c:	080079a1 	.word	0x080079a1
 8007950:	080078ed 	.word	0x080078ed
 8007954:	080078ed 	.word	0x080078ed
 8007958:	08007a67 	.word	0x08007a67
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	1d1a      	adds	r2, r3, #4
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	602a      	str	r2, [r5, #0]
 8007964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800796c:	2301      	movs	r3, #1
 800796e:	e0a3      	b.n	8007ab8 <_printf_i+0x1f4>
 8007970:	6820      	ldr	r0, [r4, #0]
 8007972:	6829      	ldr	r1, [r5, #0]
 8007974:	0606      	lsls	r6, r0, #24
 8007976:	f101 0304 	add.w	r3, r1, #4
 800797a:	d50a      	bpl.n	8007992 <_printf_i+0xce>
 800797c:	680e      	ldr	r6, [r1, #0]
 800797e:	602b      	str	r3, [r5, #0]
 8007980:	2e00      	cmp	r6, #0
 8007982:	da03      	bge.n	800798c <_printf_i+0xc8>
 8007984:	232d      	movs	r3, #45	; 0x2d
 8007986:	4276      	negs	r6, r6
 8007988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800798c:	485e      	ldr	r0, [pc, #376]	; (8007b08 <_printf_i+0x244>)
 800798e:	230a      	movs	r3, #10
 8007990:	e019      	b.n	80079c6 <_printf_i+0x102>
 8007992:	680e      	ldr	r6, [r1, #0]
 8007994:	602b      	str	r3, [r5, #0]
 8007996:	f010 0f40 	tst.w	r0, #64	; 0x40
 800799a:	bf18      	it	ne
 800799c:	b236      	sxthne	r6, r6
 800799e:	e7ef      	b.n	8007980 <_printf_i+0xbc>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	6820      	ldr	r0, [r4, #0]
 80079a4:	1d19      	adds	r1, r3, #4
 80079a6:	6029      	str	r1, [r5, #0]
 80079a8:	0601      	lsls	r1, r0, #24
 80079aa:	d501      	bpl.n	80079b0 <_printf_i+0xec>
 80079ac:	681e      	ldr	r6, [r3, #0]
 80079ae:	e002      	b.n	80079b6 <_printf_i+0xf2>
 80079b0:	0646      	lsls	r6, r0, #25
 80079b2:	d5fb      	bpl.n	80079ac <_printf_i+0xe8>
 80079b4:	881e      	ldrh	r6, [r3, #0]
 80079b6:	4854      	ldr	r0, [pc, #336]	; (8007b08 <_printf_i+0x244>)
 80079b8:	2f6f      	cmp	r7, #111	; 0x6f
 80079ba:	bf0c      	ite	eq
 80079bc:	2308      	moveq	r3, #8
 80079be:	230a      	movne	r3, #10
 80079c0:	2100      	movs	r1, #0
 80079c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079c6:	6865      	ldr	r5, [r4, #4]
 80079c8:	60a5      	str	r5, [r4, #8]
 80079ca:	2d00      	cmp	r5, #0
 80079cc:	bfa2      	ittt	ge
 80079ce:	6821      	ldrge	r1, [r4, #0]
 80079d0:	f021 0104 	bicge.w	r1, r1, #4
 80079d4:	6021      	strge	r1, [r4, #0]
 80079d6:	b90e      	cbnz	r6, 80079dc <_printf_i+0x118>
 80079d8:	2d00      	cmp	r5, #0
 80079da:	d04d      	beq.n	8007a78 <_printf_i+0x1b4>
 80079dc:	4615      	mov	r5, r2
 80079de:	fbb6 f1f3 	udiv	r1, r6, r3
 80079e2:	fb03 6711 	mls	r7, r3, r1, r6
 80079e6:	5dc7      	ldrb	r7, [r0, r7]
 80079e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079ec:	4637      	mov	r7, r6
 80079ee:	42bb      	cmp	r3, r7
 80079f0:	460e      	mov	r6, r1
 80079f2:	d9f4      	bls.n	80079de <_printf_i+0x11a>
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	d10b      	bne.n	8007a10 <_printf_i+0x14c>
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	07de      	lsls	r6, r3, #31
 80079fc:	d508      	bpl.n	8007a10 <_printf_i+0x14c>
 80079fe:	6923      	ldr	r3, [r4, #16]
 8007a00:	6861      	ldr	r1, [r4, #4]
 8007a02:	4299      	cmp	r1, r3
 8007a04:	bfde      	ittt	le
 8007a06:	2330      	movle	r3, #48	; 0x30
 8007a08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a0c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007a10:	1b52      	subs	r2, r2, r5
 8007a12:	6122      	str	r2, [r4, #16]
 8007a14:	f8cd a000 	str.w	sl, [sp]
 8007a18:	464b      	mov	r3, r9
 8007a1a:	aa03      	add	r2, sp, #12
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	4640      	mov	r0, r8
 8007a20:	f7ff fee2 	bl	80077e8 <_printf_common>
 8007a24:	3001      	adds	r0, #1
 8007a26:	d14c      	bne.n	8007ac2 <_printf_i+0x1fe>
 8007a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a2c:	b004      	add	sp, #16
 8007a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a32:	4835      	ldr	r0, [pc, #212]	; (8007b08 <_printf_i+0x244>)
 8007a34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a38:	6829      	ldr	r1, [r5, #0]
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a40:	6029      	str	r1, [r5, #0]
 8007a42:	061d      	lsls	r5, r3, #24
 8007a44:	d514      	bpl.n	8007a70 <_printf_i+0x1ac>
 8007a46:	07df      	lsls	r7, r3, #31
 8007a48:	bf44      	itt	mi
 8007a4a:	f043 0320 	orrmi.w	r3, r3, #32
 8007a4e:	6023      	strmi	r3, [r4, #0]
 8007a50:	b91e      	cbnz	r6, 8007a5a <_printf_i+0x196>
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	f023 0320 	bic.w	r3, r3, #32
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	2310      	movs	r3, #16
 8007a5c:	e7b0      	b.n	80079c0 <_printf_i+0xfc>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	f043 0320 	orr.w	r3, r3, #32
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	2378      	movs	r3, #120	; 0x78
 8007a68:	4828      	ldr	r0, [pc, #160]	; (8007b0c <_printf_i+0x248>)
 8007a6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a6e:	e7e3      	b.n	8007a38 <_printf_i+0x174>
 8007a70:	0659      	lsls	r1, r3, #25
 8007a72:	bf48      	it	mi
 8007a74:	b2b6      	uxthmi	r6, r6
 8007a76:	e7e6      	b.n	8007a46 <_printf_i+0x182>
 8007a78:	4615      	mov	r5, r2
 8007a7a:	e7bb      	b.n	80079f4 <_printf_i+0x130>
 8007a7c:	682b      	ldr	r3, [r5, #0]
 8007a7e:	6826      	ldr	r6, [r4, #0]
 8007a80:	6961      	ldr	r1, [r4, #20]
 8007a82:	1d18      	adds	r0, r3, #4
 8007a84:	6028      	str	r0, [r5, #0]
 8007a86:	0635      	lsls	r5, r6, #24
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	d501      	bpl.n	8007a90 <_printf_i+0x1cc>
 8007a8c:	6019      	str	r1, [r3, #0]
 8007a8e:	e002      	b.n	8007a96 <_printf_i+0x1d2>
 8007a90:	0670      	lsls	r0, r6, #25
 8007a92:	d5fb      	bpl.n	8007a8c <_printf_i+0x1c8>
 8007a94:	8019      	strh	r1, [r3, #0]
 8007a96:	2300      	movs	r3, #0
 8007a98:	6123      	str	r3, [r4, #16]
 8007a9a:	4615      	mov	r5, r2
 8007a9c:	e7ba      	b.n	8007a14 <_printf_i+0x150>
 8007a9e:	682b      	ldr	r3, [r5, #0]
 8007aa0:	1d1a      	adds	r2, r3, #4
 8007aa2:	602a      	str	r2, [r5, #0]
 8007aa4:	681d      	ldr	r5, [r3, #0]
 8007aa6:	6862      	ldr	r2, [r4, #4]
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f7f8 fc18 	bl	80002e0 <memchr>
 8007ab0:	b108      	cbz	r0, 8007ab6 <_printf_i+0x1f2>
 8007ab2:	1b40      	subs	r0, r0, r5
 8007ab4:	6060      	str	r0, [r4, #4]
 8007ab6:	6863      	ldr	r3, [r4, #4]
 8007ab8:	6123      	str	r3, [r4, #16]
 8007aba:	2300      	movs	r3, #0
 8007abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ac0:	e7a8      	b.n	8007a14 <_printf_i+0x150>
 8007ac2:	6923      	ldr	r3, [r4, #16]
 8007ac4:	462a      	mov	r2, r5
 8007ac6:	4649      	mov	r1, r9
 8007ac8:	4640      	mov	r0, r8
 8007aca:	47d0      	blx	sl
 8007acc:	3001      	adds	r0, #1
 8007ace:	d0ab      	beq.n	8007a28 <_printf_i+0x164>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	079b      	lsls	r3, r3, #30
 8007ad4:	d413      	bmi.n	8007afe <_printf_i+0x23a>
 8007ad6:	68e0      	ldr	r0, [r4, #12]
 8007ad8:	9b03      	ldr	r3, [sp, #12]
 8007ada:	4298      	cmp	r0, r3
 8007adc:	bfb8      	it	lt
 8007ade:	4618      	movlt	r0, r3
 8007ae0:	e7a4      	b.n	8007a2c <_printf_i+0x168>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	4632      	mov	r2, r6
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	4640      	mov	r0, r8
 8007aea:	47d0      	blx	sl
 8007aec:	3001      	adds	r0, #1
 8007aee:	d09b      	beq.n	8007a28 <_printf_i+0x164>
 8007af0:	3501      	adds	r5, #1
 8007af2:	68e3      	ldr	r3, [r4, #12]
 8007af4:	9903      	ldr	r1, [sp, #12]
 8007af6:	1a5b      	subs	r3, r3, r1
 8007af8:	42ab      	cmp	r3, r5
 8007afa:	dcf2      	bgt.n	8007ae2 <_printf_i+0x21e>
 8007afc:	e7eb      	b.n	8007ad6 <_printf_i+0x212>
 8007afe:	2500      	movs	r5, #0
 8007b00:	f104 0619 	add.w	r6, r4, #25
 8007b04:	e7f5      	b.n	8007af2 <_printf_i+0x22e>
 8007b06:	bf00      	nop
 8007b08:	0801e296 	.word	0x0801e296
 8007b0c:	0801e2a7 	.word	0x0801e2a7

08007b10 <quorem>:
 8007b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	6903      	ldr	r3, [r0, #16]
 8007b16:	690c      	ldr	r4, [r1, #16]
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	4607      	mov	r7, r0
 8007b1c:	f2c0 8081 	blt.w	8007c22 <quorem+0x112>
 8007b20:	3c01      	subs	r4, #1
 8007b22:	f101 0814 	add.w	r8, r1, #20
 8007b26:	f100 0514 	add.w	r5, r0, #20
 8007b2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b2e:	9301      	str	r3, [sp, #4]
 8007b30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b44:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b48:	d331      	bcc.n	8007bae <quorem+0x9e>
 8007b4a:	f04f 0e00 	mov.w	lr, #0
 8007b4e:	4640      	mov	r0, r8
 8007b50:	46ac      	mov	ip, r5
 8007b52:	46f2      	mov	sl, lr
 8007b54:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b58:	b293      	uxth	r3, r2
 8007b5a:	fb06 e303 	mla	r3, r6, r3, lr
 8007b5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	ebaa 0303 	sub.w	r3, sl, r3
 8007b68:	f8dc a000 	ldr.w	sl, [ip]
 8007b6c:	0c12      	lsrs	r2, r2, #16
 8007b6e:	fa13 f38a 	uxtah	r3, r3, sl
 8007b72:	fb06 e202 	mla	r2, r6, r2, lr
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	9b00      	ldr	r3, [sp, #0]
 8007b7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b7e:	b292      	uxth	r2, r2
 8007b80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b88:	f8bd 3000 	ldrh.w	r3, [sp]
 8007b8c:	4581      	cmp	r9, r0
 8007b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b92:	f84c 3b04 	str.w	r3, [ip], #4
 8007b96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b9a:	d2db      	bcs.n	8007b54 <quorem+0x44>
 8007b9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ba0:	b92b      	cbnz	r3, 8007bae <quorem+0x9e>
 8007ba2:	9b01      	ldr	r3, [sp, #4]
 8007ba4:	3b04      	subs	r3, #4
 8007ba6:	429d      	cmp	r5, r3
 8007ba8:	461a      	mov	r2, r3
 8007baa:	d32e      	bcc.n	8007c0a <quorem+0xfa>
 8007bac:	613c      	str	r4, [r7, #16]
 8007bae:	4638      	mov	r0, r7
 8007bb0:	f001 f8c4 	bl	8008d3c <__mcmp>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	db24      	blt.n	8007c02 <quorem+0xf2>
 8007bb8:	3601      	adds	r6, #1
 8007bba:	4628      	mov	r0, r5
 8007bbc:	f04f 0c00 	mov.w	ip, #0
 8007bc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bc4:	f8d0 e000 	ldr.w	lr, [r0]
 8007bc8:	b293      	uxth	r3, r2
 8007bca:	ebac 0303 	sub.w	r3, ip, r3
 8007bce:	0c12      	lsrs	r2, r2, #16
 8007bd0:	fa13 f38e 	uxtah	r3, r3, lr
 8007bd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007bd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007be2:	45c1      	cmp	r9, r8
 8007be4:	f840 3b04 	str.w	r3, [r0], #4
 8007be8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007bec:	d2e8      	bcs.n	8007bc0 <quorem+0xb0>
 8007bee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bf6:	b922      	cbnz	r2, 8007c02 <quorem+0xf2>
 8007bf8:	3b04      	subs	r3, #4
 8007bfa:	429d      	cmp	r5, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	d30a      	bcc.n	8007c16 <quorem+0x106>
 8007c00:	613c      	str	r4, [r7, #16]
 8007c02:	4630      	mov	r0, r6
 8007c04:	b003      	add	sp, #12
 8007c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0a:	6812      	ldr	r2, [r2, #0]
 8007c0c:	3b04      	subs	r3, #4
 8007c0e:	2a00      	cmp	r2, #0
 8007c10:	d1cc      	bne.n	8007bac <quorem+0x9c>
 8007c12:	3c01      	subs	r4, #1
 8007c14:	e7c7      	b.n	8007ba6 <quorem+0x96>
 8007c16:	6812      	ldr	r2, [r2, #0]
 8007c18:	3b04      	subs	r3, #4
 8007c1a:	2a00      	cmp	r2, #0
 8007c1c:	d1f0      	bne.n	8007c00 <quorem+0xf0>
 8007c1e:	3c01      	subs	r4, #1
 8007c20:	e7eb      	b.n	8007bfa <quorem+0xea>
 8007c22:	2000      	movs	r0, #0
 8007c24:	e7ee      	b.n	8007c04 <quorem+0xf4>
	...

08007c28 <_dtoa_r>:
 8007c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2c:	ed2d 8b04 	vpush	{d8-d9}
 8007c30:	ec57 6b10 	vmov	r6, r7, d0
 8007c34:	b093      	sub	sp, #76	; 0x4c
 8007c36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007c3c:	9106      	str	r1, [sp, #24]
 8007c3e:	ee10 aa10 	vmov	sl, s0
 8007c42:	4604      	mov	r4, r0
 8007c44:	9209      	str	r2, [sp, #36]	; 0x24
 8007c46:	930c      	str	r3, [sp, #48]	; 0x30
 8007c48:	46bb      	mov	fp, r7
 8007c4a:	b975      	cbnz	r5, 8007c6a <_dtoa_r+0x42>
 8007c4c:	2010      	movs	r0, #16
 8007c4e:	f000 fddd 	bl	800880c <malloc>
 8007c52:	4602      	mov	r2, r0
 8007c54:	6260      	str	r0, [r4, #36]	; 0x24
 8007c56:	b920      	cbnz	r0, 8007c62 <_dtoa_r+0x3a>
 8007c58:	4ba7      	ldr	r3, [pc, #668]	; (8007ef8 <_dtoa_r+0x2d0>)
 8007c5a:	21ea      	movs	r1, #234	; 0xea
 8007c5c:	48a7      	ldr	r0, [pc, #668]	; (8007efc <_dtoa_r+0x2d4>)
 8007c5e:	f001 fa75 	bl	800914c <__assert_func>
 8007c62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c66:	6005      	str	r5, [r0, #0]
 8007c68:	60c5      	str	r5, [r0, #12]
 8007c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c6c:	6819      	ldr	r1, [r3, #0]
 8007c6e:	b151      	cbz	r1, 8007c86 <_dtoa_r+0x5e>
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	604a      	str	r2, [r1, #4]
 8007c74:	2301      	movs	r3, #1
 8007c76:	4093      	lsls	r3, r2
 8007c78:	608b      	str	r3, [r1, #8]
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f000 fe1c 	bl	80088b8 <_Bfree>
 8007c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	1e3b      	subs	r3, r7, #0
 8007c88:	bfaa      	itet	ge
 8007c8a:	2300      	movge	r3, #0
 8007c8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007c90:	f8c8 3000 	strge.w	r3, [r8]
 8007c94:	4b9a      	ldr	r3, [pc, #616]	; (8007f00 <_dtoa_r+0x2d8>)
 8007c96:	bfbc      	itt	lt
 8007c98:	2201      	movlt	r2, #1
 8007c9a:	f8c8 2000 	strlt.w	r2, [r8]
 8007c9e:	ea33 030b 	bics.w	r3, r3, fp
 8007ca2:	d11b      	bne.n	8007cdc <_dtoa_r+0xb4>
 8007ca4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ca6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cb0:	4333      	orrs	r3, r6
 8007cb2:	f000 8592 	beq.w	80087da <_dtoa_r+0xbb2>
 8007cb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cb8:	b963      	cbnz	r3, 8007cd4 <_dtoa_r+0xac>
 8007cba:	4b92      	ldr	r3, [pc, #584]	; (8007f04 <_dtoa_r+0x2dc>)
 8007cbc:	e022      	b.n	8007d04 <_dtoa_r+0xdc>
 8007cbe:	4b92      	ldr	r3, [pc, #584]	; (8007f08 <_dtoa_r+0x2e0>)
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	9801      	ldr	r0, [sp, #4]
 8007cca:	b013      	add	sp, #76	; 0x4c
 8007ccc:	ecbd 8b04 	vpop	{d8-d9}
 8007cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd4:	4b8b      	ldr	r3, [pc, #556]	; (8007f04 <_dtoa_r+0x2dc>)
 8007cd6:	9301      	str	r3, [sp, #4]
 8007cd8:	3303      	adds	r3, #3
 8007cda:	e7f3      	b.n	8007cc4 <_dtoa_r+0x9c>
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4650      	mov	r0, sl
 8007ce2:	4659      	mov	r1, fp
 8007ce4:	f7f8 ff70 	bl	8000bc8 <__aeabi_dcmpeq>
 8007ce8:	ec4b ab19 	vmov	d9, sl, fp
 8007cec:	4680      	mov	r8, r0
 8007cee:	b158      	cbz	r0, 8007d08 <_dtoa_r+0xe0>
 8007cf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 856b 	beq.w	80087d4 <_dtoa_r+0xbac>
 8007cfe:	4883      	ldr	r0, [pc, #524]	; (8007f0c <_dtoa_r+0x2e4>)
 8007d00:	6018      	str	r0, [r3, #0]
 8007d02:	1e43      	subs	r3, r0, #1
 8007d04:	9301      	str	r3, [sp, #4]
 8007d06:	e7df      	b.n	8007cc8 <_dtoa_r+0xa0>
 8007d08:	ec4b ab10 	vmov	d0, sl, fp
 8007d0c:	aa10      	add	r2, sp, #64	; 0x40
 8007d0e:	a911      	add	r1, sp, #68	; 0x44
 8007d10:	4620      	mov	r0, r4
 8007d12:	f001 f8b9 	bl	8008e88 <__d2b>
 8007d16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007d1a:	ee08 0a10 	vmov	s16, r0
 8007d1e:	2d00      	cmp	r5, #0
 8007d20:	f000 8084 	beq.w	8007e2c <_dtoa_r+0x204>
 8007d24:	ee19 3a90 	vmov	r3, s19
 8007d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007d30:	4656      	mov	r6, sl
 8007d32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007d36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007d3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007d3e:	4b74      	ldr	r3, [pc, #464]	; (8007f10 <_dtoa_r+0x2e8>)
 8007d40:	2200      	movs	r2, #0
 8007d42:	4630      	mov	r0, r6
 8007d44:	4639      	mov	r1, r7
 8007d46:	f7f8 fb1f 	bl	8000388 <__aeabi_dsub>
 8007d4a:	a365      	add	r3, pc, #404	; (adr r3, 8007ee0 <_dtoa_r+0x2b8>)
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	f7f8 fcd2 	bl	80006f8 <__aeabi_dmul>
 8007d54:	a364      	add	r3, pc, #400	; (adr r3, 8007ee8 <_dtoa_r+0x2c0>)
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f7f8 fb17 	bl	800038c <__adddf3>
 8007d5e:	4606      	mov	r6, r0
 8007d60:	4628      	mov	r0, r5
 8007d62:	460f      	mov	r7, r1
 8007d64:	f7f8 fc5e 	bl	8000624 <__aeabi_i2d>
 8007d68:	a361      	add	r3, pc, #388	; (adr r3, 8007ef0 <_dtoa_r+0x2c8>)
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	f7f8 fcc3 	bl	80006f8 <__aeabi_dmul>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4630      	mov	r0, r6
 8007d78:	4639      	mov	r1, r7
 8007d7a:	f7f8 fb07 	bl	800038c <__adddf3>
 8007d7e:	4606      	mov	r6, r0
 8007d80:	460f      	mov	r7, r1
 8007d82:	f7f8 ff69 	bl	8000c58 <__aeabi_d2iz>
 8007d86:	2200      	movs	r2, #0
 8007d88:	9000      	str	r0, [sp, #0]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	4639      	mov	r1, r7
 8007d90:	f7f8 ff24 	bl	8000bdc <__aeabi_dcmplt>
 8007d94:	b150      	cbz	r0, 8007dac <_dtoa_r+0x184>
 8007d96:	9800      	ldr	r0, [sp, #0]
 8007d98:	f7f8 fc44 	bl	8000624 <__aeabi_i2d>
 8007d9c:	4632      	mov	r2, r6
 8007d9e:	463b      	mov	r3, r7
 8007da0:	f7f8 ff12 	bl	8000bc8 <__aeabi_dcmpeq>
 8007da4:	b910      	cbnz	r0, 8007dac <_dtoa_r+0x184>
 8007da6:	9b00      	ldr	r3, [sp, #0]
 8007da8:	3b01      	subs	r3, #1
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	9b00      	ldr	r3, [sp, #0]
 8007dae:	2b16      	cmp	r3, #22
 8007db0:	d85a      	bhi.n	8007e68 <_dtoa_r+0x240>
 8007db2:	9a00      	ldr	r2, [sp, #0]
 8007db4:	4b57      	ldr	r3, [pc, #348]	; (8007f14 <_dtoa_r+0x2ec>)
 8007db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	ec51 0b19 	vmov	r0, r1, d9
 8007dc2:	f7f8 ff0b 	bl	8000bdc <__aeabi_dcmplt>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d050      	beq.n	8007e6c <_dtoa_r+0x244>
 8007dca:	9b00      	ldr	r3, [sp, #0]
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dd6:	1b5d      	subs	r5, r3, r5
 8007dd8:	1e6b      	subs	r3, r5, #1
 8007dda:	9305      	str	r3, [sp, #20]
 8007ddc:	bf45      	ittet	mi
 8007dde:	f1c5 0301 	rsbmi	r3, r5, #1
 8007de2:	9304      	strmi	r3, [sp, #16]
 8007de4:	2300      	movpl	r3, #0
 8007de6:	2300      	movmi	r3, #0
 8007de8:	bf4c      	ite	mi
 8007dea:	9305      	strmi	r3, [sp, #20]
 8007dec:	9304      	strpl	r3, [sp, #16]
 8007dee:	9b00      	ldr	r3, [sp, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	db3d      	blt.n	8007e70 <_dtoa_r+0x248>
 8007df4:	9b05      	ldr	r3, [sp, #20]
 8007df6:	9a00      	ldr	r2, [sp, #0]
 8007df8:	920a      	str	r2, [sp, #40]	; 0x28
 8007dfa:	4413      	add	r3, r2
 8007dfc:	9305      	str	r3, [sp, #20]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	9307      	str	r3, [sp, #28]
 8007e02:	9b06      	ldr	r3, [sp, #24]
 8007e04:	2b09      	cmp	r3, #9
 8007e06:	f200 8089 	bhi.w	8007f1c <_dtoa_r+0x2f4>
 8007e0a:	2b05      	cmp	r3, #5
 8007e0c:	bfc4      	itt	gt
 8007e0e:	3b04      	subgt	r3, #4
 8007e10:	9306      	strgt	r3, [sp, #24]
 8007e12:	9b06      	ldr	r3, [sp, #24]
 8007e14:	f1a3 0302 	sub.w	r3, r3, #2
 8007e18:	bfcc      	ite	gt
 8007e1a:	2500      	movgt	r5, #0
 8007e1c:	2501      	movle	r5, #1
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	f200 8087 	bhi.w	8007f32 <_dtoa_r+0x30a>
 8007e24:	e8df f003 	tbb	[pc, r3]
 8007e28:	59383a2d 	.word	0x59383a2d
 8007e2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007e30:	441d      	add	r5, r3
 8007e32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	bfc1      	itttt	gt
 8007e3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007e42:	fa0b f303 	lslgt.w	r3, fp, r3
 8007e46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007e4a:	bfda      	itte	le
 8007e4c:	f1c3 0320 	rsble	r3, r3, #32
 8007e50:	fa06 f003 	lslle.w	r0, r6, r3
 8007e54:	4318      	orrgt	r0, r3
 8007e56:	f7f8 fbd5 	bl	8000604 <__aeabi_ui2d>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	4606      	mov	r6, r0
 8007e5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007e62:	3d01      	subs	r5, #1
 8007e64:	930e      	str	r3, [sp, #56]	; 0x38
 8007e66:	e76a      	b.n	8007d3e <_dtoa_r+0x116>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e7b2      	b.n	8007dd2 <_dtoa_r+0x1aa>
 8007e6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e6e:	e7b1      	b.n	8007dd4 <_dtoa_r+0x1ac>
 8007e70:	9b04      	ldr	r3, [sp, #16]
 8007e72:	9a00      	ldr	r2, [sp, #0]
 8007e74:	1a9b      	subs	r3, r3, r2
 8007e76:	9304      	str	r3, [sp, #16]
 8007e78:	4253      	negs	r3, r2
 8007e7a:	9307      	str	r3, [sp, #28]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e80:	e7bf      	b.n	8007e02 <_dtoa_r+0x1da>
 8007e82:	2300      	movs	r3, #0
 8007e84:	9308      	str	r3, [sp, #32]
 8007e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	dc55      	bgt.n	8007f38 <_dtoa_r+0x310>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e92:	461a      	mov	r2, r3
 8007e94:	9209      	str	r2, [sp, #36]	; 0x24
 8007e96:	e00c      	b.n	8007eb2 <_dtoa_r+0x28a>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e7f3      	b.n	8007e84 <_dtoa_r+0x25c>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ea0:	9308      	str	r3, [sp, #32]
 8007ea2:	9b00      	ldr	r3, [sp, #0]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	9302      	str	r3, [sp, #8]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	9303      	str	r3, [sp, #12]
 8007eae:	bfb8      	it	lt
 8007eb0:	2301      	movlt	r3, #1
 8007eb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	6042      	str	r2, [r0, #4]
 8007eb8:	2204      	movs	r2, #4
 8007eba:	f102 0614 	add.w	r6, r2, #20
 8007ebe:	429e      	cmp	r6, r3
 8007ec0:	6841      	ldr	r1, [r0, #4]
 8007ec2:	d93d      	bls.n	8007f40 <_dtoa_r+0x318>
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f000 fcb7 	bl	8008838 <_Balloc>
 8007eca:	9001      	str	r0, [sp, #4]
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	d13b      	bne.n	8007f48 <_dtoa_r+0x320>
 8007ed0:	4b11      	ldr	r3, [pc, #68]	; (8007f18 <_dtoa_r+0x2f0>)
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ed8:	e6c0      	b.n	8007c5c <_dtoa_r+0x34>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e7df      	b.n	8007e9e <_dtoa_r+0x276>
 8007ede:	bf00      	nop
 8007ee0:	636f4361 	.word	0x636f4361
 8007ee4:	3fd287a7 	.word	0x3fd287a7
 8007ee8:	8b60c8b3 	.word	0x8b60c8b3
 8007eec:	3fc68a28 	.word	0x3fc68a28
 8007ef0:	509f79fb 	.word	0x509f79fb
 8007ef4:	3fd34413 	.word	0x3fd34413
 8007ef8:	0801e2c5 	.word	0x0801e2c5
 8007efc:	0801e2dc 	.word	0x0801e2dc
 8007f00:	7ff00000 	.word	0x7ff00000
 8007f04:	0801e2c1 	.word	0x0801e2c1
 8007f08:	0801e2b8 	.word	0x0801e2b8
 8007f0c:	0801e295 	.word	0x0801e295
 8007f10:	3ff80000 	.word	0x3ff80000
 8007f14:	0801e3d0 	.word	0x0801e3d0
 8007f18:	0801e337 	.word	0x0801e337
 8007f1c:	2501      	movs	r5, #1
 8007f1e:	2300      	movs	r3, #0
 8007f20:	9306      	str	r3, [sp, #24]
 8007f22:	9508      	str	r5, [sp, #32]
 8007f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2312      	movs	r3, #18
 8007f30:	e7b0      	b.n	8007e94 <_dtoa_r+0x26c>
 8007f32:	2301      	movs	r3, #1
 8007f34:	9308      	str	r3, [sp, #32]
 8007f36:	e7f5      	b.n	8007f24 <_dtoa_r+0x2fc>
 8007f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f3e:	e7b8      	b.n	8007eb2 <_dtoa_r+0x28a>
 8007f40:	3101      	adds	r1, #1
 8007f42:	6041      	str	r1, [r0, #4]
 8007f44:	0052      	lsls	r2, r2, #1
 8007f46:	e7b8      	b.n	8007eba <_dtoa_r+0x292>
 8007f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f4a:	9a01      	ldr	r2, [sp, #4]
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	9b03      	ldr	r3, [sp, #12]
 8007f50:	2b0e      	cmp	r3, #14
 8007f52:	f200 809d 	bhi.w	8008090 <_dtoa_r+0x468>
 8007f56:	2d00      	cmp	r5, #0
 8007f58:	f000 809a 	beq.w	8008090 <_dtoa_r+0x468>
 8007f5c:	9b00      	ldr	r3, [sp, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	dd32      	ble.n	8007fc8 <_dtoa_r+0x3a0>
 8007f62:	4ab7      	ldr	r2, [pc, #732]	; (8008240 <_dtoa_r+0x618>)
 8007f64:	f003 030f 	and.w	r3, r3, #15
 8007f68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f70:	9b00      	ldr	r3, [sp, #0]
 8007f72:	05d8      	lsls	r0, r3, #23
 8007f74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007f78:	d516      	bpl.n	8007fa8 <_dtoa_r+0x380>
 8007f7a:	4bb2      	ldr	r3, [pc, #712]	; (8008244 <_dtoa_r+0x61c>)
 8007f7c:	ec51 0b19 	vmov	r0, r1, d9
 8007f80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f84:	f7f8 fce2 	bl	800094c <__aeabi_ddiv>
 8007f88:	f007 070f 	and.w	r7, r7, #15
 8007f8c:	4682      	mov	sl, r0
 8007f8e:	468b      	mov	fp, r1
 8007f90:	2503      	movs	r5, #3
 8007f92:	4eac      	ldr	r6, [pc, #688]	; (8008244 <_dtoa_r+0x61c>)
 8007f94:	b957      	cbnz	r7, 8007fac <_dtoa_r+0x384>
 8007f96:	4642      	mov	r2, r8
 8007f98:	464b      	mov	r3, r9
 8007f9a:	4650      	mov	r0, sl
 8007f9c:	4659      	mov	r1, fp
 8007f9e:	f7f8 fcd5 	bl	800094c <__aeabi_ddiv>
 8007fa2:	4682      	mov	sl, r0
 8007fa4:	468b      	mov	fp, r1
 8007fa6:	e028      	b.n	8007ffa <_dtoa_r+0x3d2>
 8007fa8:	2502      	movs	r5, #2
 8007faa:	e7f2      	b.n	8007f92 <_dtoa_r+0x36a>
 8007fac:	07f9      	lsls	r1, r7, #31
 8007fae:	d508      	bpl.n	8007fc2 <_dtoa_r+0x39a>
 8007fb0:	4640      	mov	r0, r8
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fb8:	f7f8 fb9e 	bl	80006f8 <__aeabi_dmul>
 8007fbc:	3501      	adds	r5, #1
 8007fbe:	4680      	mov	r8, r0
 8007fc0:	4689      	mov	r9, r1
 8007fc2:	107f      	asrs	r7, r7, #1
 8007fc4:	3608      	adds	r6, #8
 8007fc6:	e7e5      	b.n	8007f94 <_dtoa_r+0x36c>
 8007fc8:	f000 809b 	beq.w	8008102 <_dtoa_r+0x4da>
 8007fcc:	9b00      	ldr	r3, [sp, #0]
 8007fce:	4f9d      	ldr	r7, [pc, #628]	; (8008244 <_dtoa_r+0x61c>)
 8007fd0:	425e      	negs	r6, r3
 8007fd2:	4b9b      	ldr	r3, [pc, #620]	; (8008240 <_dtoa_r+0x618>)
 8007fd4:	f006 020f 	and.w	r2, r6, #15
 8007fd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe0:	ec51 0b19 	vmov	r0, r1, d9
 8007fe4:	f7f8 fb88 	bl	80006f8 <__aeabi_dmul>
 8007fe8:	1136      	asrs	r6, r6, #4
 8007fea:	4682      	mov	sl, r0
 8007fec:	468b      	mov	fp, r1
 8007fee:	2300      	movs	r3, #0
 8007ff0:	2502      	movs	r5, #2
 8007ff2:	2e00      	cmp	r6, #0
 8007ff4:	d17a      	bne.n	80080ec <_dtoa_r+0x4c4>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1d3      	bne.n	8007fa2 <_dtoa_r+0x37a>
 8007ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 8082 	beq.w	8008106 <_dtoa_r+0x4de>
 8008002:	4b91      	ldr	r3, [pc, #580]	; (8008248 <_dtoa_r+0x620>)
 8008004:	2200      	movs	r2, #0
 8008006:	4650      	mov	r0, sl
 8008008:	4659      	mov	r1, fp
 800800a:	f7f8 fde7 	bl	8000bdc <__aeabi_dcmplt>
 800800e:	2800      	cmp	r0, #0
 8008010:	d079      	beq.n	8008106 <_dtoa_r+0x4de>
 8008012:	9b03      	ldr	r3, [sp, #12]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d076      	beq.n	8008106 <_dtoa_r+0x4de>
 8008018:	9b02      	ldr	r3, [sp, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	dd36      	ble.n	800808c <_dtoa_r+0x464>
 800801e:	9b00      	ldr	r3, [sp, #0]
 8008020:	4650      	mov	r0, sl
 8008022:	4659      	mov	r1, fp
 8008024:	1e5f      	subs	r7, r3, #1
 8008026:	2200      	movs	r2, #0
 8008028:	4b88      	ldr	r3, [pc, #544]	; (800824c <_dtoa_r+0x624>)
 800802a:	f7f8 fb65 	bl	80006f8 <__aeabi_dmul>
 800802e:	9e02      	ldr	r6, [sp, #8]
 8008030:	4682      	mov	sl, r0
 8008032:	468b      	mov	fp, r1
 8008034:	3501      	adds	r5, #1
 8008036:	4628      	mov	r0, r5
 8008038:	f7f8 faf4 	bl	8000624 <__aeabi_i2d>
 800803c:	4652      	mov	r2, sl
 800803e:	465b      	mov	r3, fp
 8008040:	f7f8 fb5a 	bl	80006f8 <__aeabi_dmul>
 8008044:	4b82      	ldr	r3, [pc, #520]	; (8008250 <_dtoa_r+0x628>)
 8008046:	2200      	movs	r2, #0
 8008048:	f7f8 f9a0 	bl	800038c <__adddf3>
 800804c:	46d0      	mov	r8, sl
 800804e:	46d9      	mov	r9, fp
 8008050:	4682      	mov	sl, r0
 8008052:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008056:	2e00      	cmp	r6, #0
 8008058:	d158      	bne.n	800810c <_dtoa_r+0x4e4>
 800805a:	4b7e      	ldr	r3, [pc, #504]	; (8008254 <_dtoa_r+0x62c>)
 800805c:	2200      	movs	r2, #0
 800805e:	4640      	mov	r0, r8
 8008060:	4649      	mov	r1, r9
 8008062:	f7f8 f991 	bl	8000388 <__aeabi_dsub>
 8008066:	4652      	mov	r2, sl
 8008068:	465b      	mov	r3, fp
 800806a:	4680      	mov	r8, r0
 800806c:	4689      	mov	r9, r1
 800806e:	f7f8 fdd3 	bl	8000c18 <__aeabi_dcmpgt>
 8008072:	2800      	cmp	r0, #0
 8008074:	f040 8295 	bne.w	80085a2 <_dtoa_r+0x97a>
 8008078:	4652      	mov	r2, sl
 800807a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800807e:	4640      	mov	r0, r8
 8008080:	4649      	mov	r1, r9
 8008082:	f7f8 fdab 	bl	8000bdc <__aeabi_dcmplt>
 8008086:	2800      	cmp	r0, #0
 8008088:	f040 8289 	bne.w	800859e <_dtoa_r+0x976>
 800808c:	ec5b ab19 	vmov	sl, fp, d9
 8008090:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008092:	2b00      	cmp	r3, #0
 8008094:	f2c0 8148 	blt.w	8008328 <_dtoa_r+0x700>
 8008098:	9a00      	ldr	r2, [sp, #0]
 800809a:	2a0e      	cmp	r2, #14
 800809c:	f300 8144 	bgt.w	8008328 <_dtoa_r+0x700>
 80080a0:	4b67      	ldr	r3, [pc, #412]	; (8008240 <_dtoa_r+0x618>)
 80080a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f280 80d5 	bge.w	800825c <_dtoa_r+0x634>
 80080b2:	9b03      	ldr	r3, [sp, #12]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f300 80d1 	bgt.w	800825c <_dtoa_r+0x634>
 80080ba:	f040 826f 	bne.w	800859c <_dtoa_r+0x974>
 80080be:	4b65      	ldr	r3, [pc, #404]	; (8008254 <_dtoa_r+0x62c>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	4640      	mov	r0, r8
 80080c4:	4649      	mov	r1, r9
 80080c6:	f7f8 fb17 	bl	80006f8 <__aeabi_dmul>
 80080ca:	4652      	mov	r2, sl
 80080cc:	465b      	mov	r3, fp
 80080ce:	f7f8 fd99 	bl	8000c04 <__aeabi_dcmpge>
 80080d2:	9e03      	ldr	r6, [sp, #12]
 80080d4:	4637      	mov	r7, r6
 80080d6:	2800      	cmp	r0, #0
 80080d8:	f040 8245 	bne.w	8008566 <_dtoa_r+0x93e>
 80080dc:	9d01      	ldr	r5, [sp, #4]
 80080de:	2331      	movs	r3, #49	; 0x31
 80080e0:	f805 3b01 	strb.w	r3, [r5], #1
 80080e4:	9b00      	ldr	r3, [sp, #0]
 80080e6:	3301      	adds	r3, #1
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	e240      	b.n	800856e <_dtoa_r+0x946>
 80080ec:	07f2      	lsls	r2, r6, #31
 80080ee:	d505      	bpl.n	80080fc <_dtoa_r+0x4d4>
 80080f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080f4:	f7f8 fb00 	bl	80006f8 <__aeabi_dmul>
 80080f8:	3501      	adds	r5, #1
 80080fa:	2301      	movs	r3, #1
 80080fc:	1076      	asrs	r6, r6, #1
 80080fe:	3708      	adds	r7, #8
 8008100:	e777      	b.n	8007ff2 <_dtoa_r+0x3ca>
 8008102:	2502      	movs	r5, #2
 8008104:	e779      	b.n	8007ffa <_dtoa_r+0x3d2>
 8008106:	9f00      	ldr	r7, [sp, #0]
 8008108:	9e03      	ldr	r6, [sp, #12]
 800810a:	e794      	b.n	8008036 <_dtoa_r+0x40e>
 800810c:	9901      	ldr	r1, [sp, #4]
 800810e:	4b4c      	ldr	r3, [pc, #304]	; (8008240 <_dtoa_r+0x618>)
 8008110:	4431      	add	r1, r6
 8008112:	910d      	str	r1, [sp, #52]	; 0x34
 8008114:	9908      	ldr	r1, [sp, #32]
 8008116:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800811a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800811e:	2900      	cmp	r1, #0
 8008120:	d043      	beq.n	80081aa <_dtoa_r+0x582>
 8008122:	494d      	ldr	r1, [pc, #308]	; (8008258 <_dtoa_r+0x630>)
 8008124:	2000      	movs	r0, #0
 8008126:	f7f8 fc11 	bl	800094c <__aeabi_ddiv>
 800812a:	4652      	mov	r2, sl
 800812c:	465b      	mov	r3, fp
 800812e:	f7f8 f92b 	bl	8000388 <__aeabi_dsub>
 8008132:	9d01      	ldr	r5, [sp, #4]
 8008134:	4682      	mov	sl, r0
 8008136:	468b      	mov	fp, r1
 8008138:	4649      	mov	r1, r9
 800813a:	4640      	mov	r0, r8
 800813c:	f7f8 fd8c 	bl	8000c58 <__aeabi_d2iz>
 8008140:	4606      	mov	r6, r0
 8008142:	f7f8 fa6f 	bl	8000624 <__aeabi_i2d>
 8008146:	4602      	mov	r2, r0
 8008148:	460b      	mov	r3, r1
 800814a:	4640      	mov	r0, r8
 800814c:	4649      	mov	r1, r9
 800814e:	f7f8 f91b 	bl	8000388 <__aeabi_dsub>
 8008152:	3630      	adds	r6, #48	; 0x30
 8008154:	f805 6b01 	strb.w	r6, [r5], #1
 8008158:	4652      	mov	r2, sl
 800815a:	465b      	mov	r3, fp
 800815c:	4680      	mov	r8, r0
 800815e:	4689      	mov	r9, r1
 8008160:	f7f8 fd3c 	bl	8000bdc <__aeabi_dcmplt>
 8008164:	2800      	cmp	r0, #0
 8008166:	d163      	bne.n	8008230 <_dtoa_r+0x608>
 8008168:	4642      	mov	r2, r8
 800816a:	464b      	mov	r3, r9
 800816c:	4936      	ldr	r1, [pc, #216]	; (8008248 <_dtoa_r+0x620>)
 800816e:	2000      	movs	r0, #0
 8008170:	f7f8 f90a 	bl	8000388 <__aeabi_dsub>
 8008174:	4652      	mov	r2, sl
 8008176:	465b      	mov	r3, fp
 8008178:	f7f8 fd30 	bl	8000bdc <__aeabi_dcmplt>
 800817c:	2800      	cmp	r0, #0
 800817e:	f040 80b5 	bne.w	80082ec <_dtoa_r+0x6c4>
 8008182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008184:	429d      	cmp	r5, r3
 8008186:	d081      	beq.n	800808c <_dtoa_r+0x464>
 8008188:	4b30      	ldr	r3, [pc, #192]	; (800824c <_dtoa_r+0x624>)
 800818a:	2200      	movs	r2, #0
 800818c:	4650      	mov	r0, sl
 800818e:	4659      	mov	r1, fp
 8008190:	f7f8 fab2 	bl	80006f8 <__aeabi_dmul>
 8008194:	4b2d      	ldr	r3, [pc, #180]	; (800824c <_dtoa_r+0x624>)
 8008196:	4682      	mov	sl, r0
 8008198:	468b      	mov	fp, r1
 800819a:	4640      	mov	r0, r8
 800819c:	4649      	mov	r1, r9
 800819e:	2200      	movs	r2, #0
 80081a0:	f7f8 faaa 	bl	80006f8 <__aeabi_dmul>
 80081a4:	4680      	mov	r8, r0
 80081a6:	4689      	mov	r9, r1
 80081a8:	e7c6      	b.n	8008138 <_dtoa_r+0x510>
 80081aa:	4650      	mov	r0, sl
 80081ac:	4659      	mov	r1, fp
 80081ae:	f7f8 faa3 	bl	80006f8 <__aeabi_dmul>
 80081b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081b4:	9d01      	ldr	r5, [sp, #4]
 80081b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80081b8:	4682      	mov	sl, r0
 80081ba:	468b      	mov	fp, r1
 80081bc:	4649      	mov	r1, r9
 80081be:	4640      	mov	r0, r8
 80081c0:	f7f8 fd4a 	bl	8000c58 <__aeabi_d2iz>
 80081c4:	4606      	mov	r6, r0
 80081c6:	f7f8 fa2d 	bl	8000624 <__aeabi_i2d>
 80081ca:	3630      	adds	r6, #48	; 0x30
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4640      	mov	r0, r8
 80081d2:	4649      	mov	r1, r9
 80081d4:	f7f8 f8d8 	bl	8000388 <__aeabi_dsub>
 80081d8:	f805 6b01 	strb.w	r6, [r5], #1
 80081dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081de:	429d      	cmp	r5, r3
 80081e0:	4680      	mov	r8, r0
 80081e2:	4689      	mov	r9, r1
 80081e4:	f04f 0200 	mov.w	r2, #0
 80081e8:	d124      	bne.n	8008234 <_dtoa_r+0x60c>
 80081ea:	4b1b      	ldr	r3, [pc, #108]	; (8008258 <_dtoa_r+0x630>)
 80081ec:	4650      	mov	r0, sl
 80081ee:	4659      	mov	r1, fp
 80081f0:	f7f8 f8cc 	bl	800038c <__adddf3>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4640      	mov	r0, r8
 80081fa:	4649      	mov	r1, r9
 80081fc:	f7f8 fd0c 	bl	8000c18 <__aeabi_dcmpgt>
 8008200:	2800      	cmp	r0, #0
 8008202:	d173      	bne.n	80082ec <_dtoa_r+0x6c4>
 8008204:	4652      	mov	r2, sl
 8008206:	465b      	mov	r3, fp
 8008208:	4913      	ldr	r1, [pc, #76]	; (8008258 <_dtoa_r+0x630>)
 800820a:	2000      	movs	r0, #0
 800820c:	f7f8 f8bc 	bl	8000388 <__aeabi_dsub>
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	4640      	mov	r0, r8
 8008216:	4649      	mov	r1, r9
 8008218:	f7f8 fce0 	bl	8000bdc <__aeabi_dcmplt>
 800821c:	2800      	cmp	r0, #0
 800821e:	f43f af35 	beq.w	800808c <_dtoa_r+0x464>
 8008222:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008224:	1e6b      	subs	r3, r5, #1
 8008226:	930f      	str	r3, [sp, #60]	; 0x3c
 8008228:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800822c:	2b30      	cmp	r3, #48	; 0x30
 800822e:	d0f8      	beq.n	8008222 <_dtoa_r+0x5fa>
 8008230:	9700      	str	r7, [sp, #0]
 8008232:	e049      	b.n	80082c8 <_dtoa_r+0x6a0>
 8008234:	4b05      	ldr	r3, [pc, #20]	; (800824c <_dtoa_r+0x624>)
 8008236:	f7f8 fa5f 	bl	80006f8 <__aeabi_dmul>
 800823a:	4680      	mov	r8, r0
 800823c:	4689      	mov	r9, r1
 800823e:	e7bd      	b.n	80081bc <_dtoa_r+0x594>
 8008240:	0801e3d0 	.word	0x0801e3d0
 8008244:	0801e3a8 	.word	0x0801e3a8
 8008248:	3ff00000 	.word	0x3ff00000
 800824c:	40240000 	.word	0x40240000
 8008250:	401c0000 	.word	0x401c0000
 8008254:	40140000 	.word	0x40140000
 8008258:	3fe00000 	.word	0x3fe00000
 800825c:	9d01      	ldr	r5, [sp, #4]
 800825e:	4656      	mov	r6, sl
 8008260:	465f      	mov	r7, fp
 8008262:	4642      	mov	r2, r8
 8008264:	464b      	mov	r3, r9
 8008266:	4630      	mov	r0, r6
 8008268:	4639      	mov	r1, r7
 800826a:	f7f8 fb6f 	bl	800094c <__aeabi_ddiv>
 800826e:	f7f8 fcf3 	bl	8000c58 <__aeabi_d2iz>
 8008272:	4682      	mov	sl, r0
 8008274:	f7f8 f9d6 	bl	8000624 <__aeabi_i2d>
 8008278:	4642      	mov	r2, r8
 800827a:	464b      	mov	r3, r9
 800827c:	f7f8 fa3c 	bl	80006f8 <__aeabi_dmul>
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	4630      	mov	r0, r6
 8008286:	4639      	mov	r1, r7
 8008288:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800828c:	f7f8 f87c 	bl	8000388 <__aeabi_dsub>
 8008290:	f805 6b01 	strb.w	r6, [r5], #1
 8008294:	9e01      	ldr	r6, [sp, #4]
 8008296:	9f03      	ldr	r7, [sp, #12]
 8008298:	1bae      	subs	r6, r5, r6
 800829a:	42b7      	cmp	r7, r6
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	d135      	bne.n	800830e <_dtoa_r+0x6e6>
 80082a2:	f7f8 f873 	bl	800038c <__adddf3>
 80082a6:	4642      	mov	r2, r8
 80082a8:	464b      	mov	r3, r9
 80082aa:	4606      	mov	r6, r0
 80082ac:	460f      	mov	r7, r1
 80082ae:	f7f8 fcb3 	bl	8000c18 <__aeabi_dcmpgt>
 80082b2:	b9d0      	cbnz	r0, 80082ea <_dtoa_r+0x6c2>
 80082b4:	4642      	mov	r2, r8
 80082b6:	464b      	mov	r3, r9
 80082b8:	4630      	mov	r0, r6
 80082ba:	4639      	mov	r1, r7
 80082bc:	f7f8 fc84 	bl	8000bc8 <__aeabi_dcmpeq>
 80082c0:	b110      	cbz	r0, 80082c8 <_dtoa_r+0x6a0>
 80082c2:	f01a 0f01 	tst.w	sl, #1
 80082c6:	d110      	bne.n	80082ea <_dtoa_r+0x6c2>
 80082c8:	4620      	mov	r0, r4
 80082ca:	ee18 1a10 	vmov	r1, s16
 80082ce:	f000 faf3 	bl	80088b8 <_Bfree>
 80082d2:	2300      	movs	r3, #0
 80082d4:	9800      	ldr	r0, [sp, #0]
 80082d6:	702b      	strb	r3, [r5, #0]
 80082d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082da:	3001      	adds	r0, #1
 80082dc:	6018      	str	r0, [r3, #0]
 80082de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f43f acf1 	beq.w	8007cc8 <_dtoa_r+0xa0>
 80082e6:	601d      	str	r5, [r3, #0]
 80082e8:	e4ee      	b.n	8007cc8 <_dtoa_r+0xa0>
 80082ea:	9f00      	ldr	r7, [sp, #0]
 80082ec:	462b      	mov	r3, r5
 80082ee:	461d      	mov	r5, r3
 80082f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082f4:	2a39      	cmp	r2, #57	; 0x39
 80082f6:	d106      	bne.n	8008306 <_dtoa_r+0x6de>
 80082f8:	9a01      	ldr	r2, [sp, #4]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d1f7      	bne.n	80082ee <_dtoa_r+0x6c6>
 80082fe:	9901      	ldr	r1, [sp, #4]
 8008300:	2230      	movs	r2, #48	; 0x30
 8008302:	3701      	adds	r7, #1
 8008304:	700a      	strb	r2, [r1, #0]
 8008306:	781a      	ldrb	r2, [r3, #0]
 8008308:	3201      	adds	r2, #1
 800830a:	701a      	strb	r2, [r3, #0]
 800830c:	e790      	b.n	8008230 <_dtoa_r+0x608>
 800830e:	4ba6      	ldr	r3, [pc, #664]	; (80085a8 <_dtoa_r+0x980>)
 8008310:	2200      	movs	r2, #0
 8008312:	f7f8 f9f1 	bl	80006f8 <__aeabi_dmul>
 8008316:	2200      	movs	r2, #0
 8008318:	2300      	movs	r3, #0
 800831a:	4606      	mov	r6, r0
 800831c:	460f      	mov	r7, r1
 800831e:	f7f8 fc53 	bl	8000bc8 <__aeabi_dcmpeq>
 8008322:	2800      	cmp	r0, #0
 8008324:	d09d      	beq.n	8008262 <_dtoa_r+0x63a>
 8008326:	e7cf      	b.n	80082c8 <_dtoa_r+0x6a0>
 8008328:	9a08      	ldr	r2, [sp, #32]
 800832a:	2a00      	cmp	r2, #0
 800832c:	f000 80d7 	beq.w	80084de <_dtoa_r+0x8b6>
 8008330:	9a06      	ldr	r2, [sp, #24]
 8008332:	2a01      	cmp	r2, #1
 8008334:	f300 80ba 	bgt.w	80084ac <_dtoa_r+0x884>
 8008338:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800833a:	2a00      	cmp	r2, #0
 800833c:	f000 80b2 	beq.w	80084a4 <_dtoa_r+0x87c>
 8008340:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008344:	9e07      	ldr	r6, [sp, #28]
 8008346:	9d04      	ldr	r5, [sp, #16]
 8008348:	9a04      	ldr	r2, [sp, #16]
 800834a:	441a      	add	r2, r3
 800834c:	9204      	str	r2, [sp, #16]
 800834e:	9a05      	ldr	r2, [sp, #20]
 8008350:	2101      	movs	r1, #1
 8008352:	441a      	add	r2, r3
 8008354:	4620      	mov	r0, r4
 8008356:	9205      	str	r2, [sp, #20]
 8008358:	f000 fb66 	bl	8008a28 <__i2b>
 800835c:	4607      	mov	r7, r0
 800835e:	2d00      	cmp	r5, #0
 8008360:	dd0c      	ble.n	800837c <_dtoa_r+0x754>
 8008362:	9b05      	ldr	r3, [sp, #20]
 8008364:	2b00      	cmp	r3, #0
 8008366:	dd09      	ble.n	800837c <_dtoa_r+0x754>
 8008368:	42ab      	cmp	r3, r5
 800836a:	9a04      	ldr	r2, [sp, #16]
 800836c:	bfa8      	it	ge
 800836e:	462b      	movge	r3, r5
 8008370:	1ad2      	subs	r2, r2, r3
 8008372:	9204      	str	r2, [sp, #16]
 8008374:	9a05      	ldr	r2, [sp, #20]
 8008376:	1aed      	subs	r5, r5, r3
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	9305      	str	r3, [sp, #20]
 800837c:	9b07      	ldr	r3, [sp, #28]
 800837e:	b31b      	cbz	r3, 80083c8 <_dtoa_r+0x7a0>
 8008380:	9b08      	ldr	r3, [sp, #32]
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 80af 	beq.w	80084e6 <_dtoa_r+0x8be>
 8008388:	2e00      	cmp	r6, #0
 800838a:	dd13      	ble.n	80083b4 <_dtoa_r+0x78c>
 800838c:	4639      	mov	r1, r7
 800838e:	4632      	mov	r2, r6
 8008390:	4620      	mov	r0, r4
 8008392:	f000 fc09 	bl	8008ba8 <__pow5mult>
 8008396:	ee18 2a10 	vmov	r2, s16
 800839a:	4601      	mov	r1, r0
 800839c:	4607      	mov	r7, r0
 800839e:	4620      	mov	r0, r4
 80083a0:	f000 fb58 	bl	8008a54 <__multiply>
 80083a4:	ee18 1a10 	vmov	r1, s16
 80083a8:	4680      	mov	r8, r0
 80083aa:	4620      	mov	r0, r4
 80083ac:	f000 fa84 	bl	80088b8 <_Bfree>
 80083b0:	ee08 8a10 	vmov	s16, r8
 80083b4:	9b07      	ldr	r3, [sp, #28]
 80083b6:	1b9a      	subs	r2, r3, r6
 80083b8:	d006      	beq.n	80083c8 <_dtoa_r+0x7a0>
 80083ba:	ee18 1a10 	vmov	r1, s16
 80083be:	4620      	mov	r0, r4
 80083c0:	f000 fbf2 	bl	8008ba8 <__pow5mult>
 80083c4:	ee08 0a10 	vmov	s16, r0
 80083c8:	2101      	movs	r1, #1
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 fb2c 	bl	8008a28 <__i2b>
 80083d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	4606      	mov	r6, r0
 80083d6:	f340 8088 	ble.w	80084ea <_dtoa_r+0x8c2>
 80083da:	461a      	mov	r2, r3
 80083dc:	4601      	mov	r1, r0
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 fbe2 	bl	8008ba8 <__pow5mult>
 80083e4:	9b06      	ldr	r3, [sp, #24]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	4606      	mov	r6, r0
 80083ea:	f340 8081 	ble.w	80084f0 <_dtoa_r+0x8c8>
 80083ee:	f04f 0800 	mov.w	r8, #0
 80083f2:	6933      	ldr	r3, [r6, #16]
 80083f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80083f8:	6918      	ldr	r0, [r3, #16]
 80083fa:	f000 fac5 	bl	8008988 <__hi0bits>
 80083fe:	f1c0 0020 	rsb	r0, r0, #32
 8008402:	9b05      	ldr	r3, [sp, #20]
 8008404:	4418      	add	r0, r3
 8008406:	f010 001f 	ands.w	r0, r0, #31
 800840a:	f000 8092 	beq.w	8008532 <_dtoa_r+0x90a>
 800840e:	f1c0 0320 	rsb	r3, r0, #32
 8008412:	2b04      	cmp	r3, #4
 8008414:	f340 808a 	ble.w	800852c <_dtoa_r+0x904>
 8008418:	f1c0 001c 	rsb	r0, r0, #28
 800841c:	9b04      	ldr	r3, [sp, #16]
 800841e:	4403      	add	r3, r0
 8008420:	9304      	str	r3, [sp, #16]
 8008422:	9b05      	ldr	r3, [sp, #20]
 8008424:	4403      	add	r3, r0
 8008426:	4405      	add	r5, r0
 8008428:	9305      	str	r3, [sp, #20]
 800842a:	9b04      	ldr	r3, [sp, #16]
 800842c:	2b00      	cmp	r3, #0
 800842e:	dd07      	ble.n	8008440 <_dtoa_r+0x818>
 8008430:	ee18 1a10 	vmov	r1, s16
 8008434:	461a      	mov	r2, r3
 8008436:	4620      	mov	r0, r4
 8008438:	f000 fc10 	bl	8008c5c <__lshift>
 800843c:	ee08 0a10 	vmov	s16, r0
 8008440:	9b05      	ldr	r3, [sp, #20]
 8008442:	2b00      	cmp	r3, #0
 8008444:	dd05      	ble.n	8008452 <_dtoa_r+0x82a>
 8008446:	4631      	mov	r1, r6
 8008448:	461a      	mov	r2, r3
 800844a:	4620      	mov	r0, r4
 800844c:	f000 fc06 	bl	8008c5c <__lshift>
 8008450:	4606      	mov	r6, r0
 8008452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008454:	2b00      	cmp	r3, #0
 8008456:	d06e      	beq.n	8008536 <_dtoa_r+0x90e>
 8008458:	ee18 0a10 	vmov	r0, s16
 800845c:	4631      	mov	r1, r6
 800845e:	f000 fc6d 	bl	8008d3c <__mcmp>
 8008462:	2800      	cmp	r0, #0
 8008464:	da67      	bge.n	8008536 <_dtoa_r+0x90e>
 8008466:	9b00      	ldr	r3, [sp, #0]
 8008468:	3b01      	subs	r3, #1
 800846a:	ee18 1a10 	vmov	r1, s16
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	220a      	movs	r2, #10
 8008472:	2300      	movs	r3, #0
 8008474:	4620      	mov	r0, r4
 8008476:	f000 fa41 	bl	80088fc <__multadd>
 800847a:	9b08      	ldr	r3, [sp, #32]
 800847c:	ee08 0a10 	vmov	s16, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 81b1 	beq.w	80087e8 <_dtoa_r+0xbc0>
 8008486:	2300      	movs	r3, #0
 8008488:	4639      	mov	r1, r7
 800848a:	220a      	movs	r2, #10
 800848c:	4620      	mov	r0, r4
 800848e:	f000 fa35 	bl	80088fc <__multadd>
 8008492:	9b02      	ldr	r3, [sp, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	4607      	mov	r7, r0
 8008498:	f300 808e 	bgt.w	80085b8 <_dtoa_r+0x990>
 800849c:	9b06      	ldr	r3, [sp, #24]
 800849e:	2b02      	cmp	r3, #2
 80084a0:	dc51      	bgt.n	8008546 <_dtoa_r+0x91e>
 80084a2:	e089      	b.n	80085b8 <_dtoa_r+0x990>
 80084a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80084aa:	e74b      	b.n	8008344 <_dtoa_r+0x71c>
 80084ac:	9b03      	ldr	r3, [sp, #12]
 80084ae:	1e5e      	subs	r6, r3, #1
 80084b0:	9b07      	ldr	r3, [sp, #28]
 80084b2:	42b3      	cmp	r3, r6
 80084b4:	bfbf      	itttt	lt
 80084b6:	9b07      	ldrlt	r3, [sp, #28]
 80084b8:	9607      	strlt	r6, [sp, #28]
 80084ba:	1af2      	sublt	r2, r6, r3
 80084bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80084be:	bfb6      	itet	lt
 80084c0:	189b      	addlt	r3, r3, r2
 80084c2:	1b9e      	subge	r6, r3, r6
 80084c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80084c6:	9b03      	ldr	r3, [sp, #12]
 80084c8:	bfb8      	it	lt
 80084ca:	2600      	movlt	r6, #0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	bfb7      	itett	lt
 80084d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80084d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80084d8:	1a9d      	sublt	r5, r3, r2
 80084da:	2300      	movlt	r3, #0
 80084dc:	e734      	b.n	8008348 <_dtoa_r+0x720>
 80084de:	9e07      	ldr	r6, [sp, #28]
 80084e0:	9d04      	ldr	r5, [sp, #16]
 80084e2:	9f08      	ldr	r7, [sp, #32]
 80084e4:	e73b      	b.n	800835e <_dtoa_r+0x736>
 80084e6:	9a07      	ldr	r2, [sp, #28]
 80084e8:	e767      	b.n	80083ba <_dtoa_r+0x792>
 80084ea:	9b06      	ldr	r3, [sp, #24]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	dc18      	bgt.n	8008522 <_dtoa_r+0x8fa>
 80084f0:	f1ba 0f00 	cmp.w	sl, #0
 80084f4:	d115      	bne.n	8008522 <_dtoa_r+0x8fa>
 80084f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084fa:	b993      	cbnz	r3, 8008522 <_dtoa_r+0x8fa>
 80084fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008500:	0d1b      	lsrs	r3, r3, #20
 8008502:	051b      	lsls	r3, r3, #20
 8008504:	b183      	cbz	r3, 8008528 <_dtoa_r+0x900>
 8008506:	9b04      	ldr	r3, [sp, #16]
 8008508:	3301      	adds	r3, #1
 800850a:	9304      	str	r3, [sp, #16]
 800850c:	9b05      	ldr	r3, [sp, #20]
 800850e:	3301      	adds	r3, #1
 8008510:	9305      	str	r3, [sp, #20]
 8008512:	f04f 0801 	mov.w	r8, #1
 8008516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008518:	2b00      	cmp	r3, #0
 800851a:	f47f af6a 	bne.w	80083f2 <_dtoa_r+0x7ca>
 800851e:	2001      	movs	r0, #1
 8008520:	e76f      	b.n	8008402 <_dtoa_r+0x7da>
 8008522:	f04f 0800 	mov.w	r8, #0
 8008526:	e7f6      	b.n	8008516 <_dtoa_r+0x8ee>
 8008528:	4698      	mov	r8, r3
 800852a:	e7f4      	b.n	8008516 <_dtoa_r+0x8ee>
 800852c:	f43f af7d 	beq.w	800842a <_dtoa_r+0x802>
 8008530:	4618      	mov	r0, r3
 8008532:	301c      	adds	r0, #28
 8008534:	e772      	b.n	800841c <_dtoa_r+0x7f4>
 8008536:	9b03      	ldr	r3, [sp, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	dc37      	bgt.n	80085ac <_dtoa_r+0x984>
 800853c:	9b06      	ldr	r3, [sp, #24]
 800853e:	2b02      	cmp	r3, #2
 8008540:	dd34      	ble.n	80085ac <_dtoa_r+0x984>
 8008542:	9b03      	ldr	r3, [sp, #12]
 8008544:	9302      	str	r3, [sp, #8]
 8008546:	9b02      	ldr	r3, [sp, #8]
 8008548:	b96b      	cbnz	r3, 8008566 <_dtoa_r+0x93e>
 800854a:	4631      	mov	r1, r6
 800854c:	2205      	movs	r2, #5
 800854e:	4620      	mov	r0, r4
 8008550:	f000 f9d4 	bl	80088fc <__multadd>
 8008554:	4601      	mov	r1, r0
 8008556:	4606      	mov	r6, r0
 8008558:	ee18 0a10 	vmov	r0, s16
 800855c:	f000 fbee 	bl	8008d3c <__mcmp>
 8008560:	2800      	cmp	r0, #0
 8008562:	f73f adbb 	bgt.w	80080dc <_dtoa_r+0x4b4>
 8008566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008568:	9d01      	ldr	r5, [sp, #4]
 800856a:	43db      	mvns	r3, r3
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	f04f 0800 	mov.w	r8, #0
 8008572:	4631      	mov	r1, r6
 8008574:	4620      	mov	r0, r4
 8008576:	f000 f99f 	bl	80088b8 <_Bfree>
 800857a:	2f00      	cmp	r7, #0
 800857c:	f43f aea4 	beq.w	80082c8 <_dtoa_r+0x6a0>
 8008580:	f1b8 0f00 	cmp.w	r8, #0
 8008584:	d005      	beq.n	8008592 <_dtoa_r+0x96a>
 8008586:	45b8      	cmp	r8, r7
 8008588:	d003      	beq.n	8008592 <_dtoa_r+0x96a>
 800858a:	4641      	mov	r1, r8
 800858c:	4620      	mov	r0, r4
 800858e:	f000 f993 	bl	80088b8 <_Bfree>
 8008592:	4639      	mov	r1, r7
 8008594:	4620      	mov	r0, r4
 8008596:	f000 f98f 	bl	80088b8 <_Bfree>
 800859a:	e695      	b.n	80082c8 <_dtoa_r+0x6a0>
 800859c:	2600      	movs	r6, #0
 800859e:	4637      	mov	r7, r6
 80085a0:	e7e1      	b.n	8008566 <_dtoa_r+0x93e>
 80085a2:	9700      	str	r7, [sp, #0]
 80085a4:	4637      	mov	r7, r6
 80085a6:	e599      	b.n	80080dc <_dtoa_r+0x4b4>
 80085a8:	40240000 	.word	0x40240000
 80085ac:	9b08      	ldr	r3, [sp, #32]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 80ca 	beq.w	8008748 <_dtoa_r+0xb20>
 80085b4:	9b03      	ldr	r3, [sp, #12]
 80085b6:	9302      	str	r3, [sp, #8]
 80085b8:	2d00      	cmp	r5, #0
 80085ba:	dd05      	ble.n	80085c8 <_dtoa_r+0x9a0>
 80085bc:	4639      	mov	r1, r7
 80085be:	462a      	mov	r2, r5
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 fb4b 	bl	8008c5c <__lshift>
 80085c6:	4607      	mov	r7, r0
 80085c8:	f1b8 0f00 	cmp.w	r8, #0
 80085cc:	d05b      	beq.n	8008686 <_dtoa_r+0xa5e>
 80085ce:	6879      	ldr	r1, [r7, #4]
 80085d0:	4620      	mov	r0, r4
 80085d2:	f000 f931 	bl	8008838 <_Balloc>
 80085d6:	4605      	mov	r5, r0
 80085d8:	b928      	cbnz	r0, 80085e6 <_dtoa_r+0x9be>
 80085da:	4b87      	ldr	r3, [pc, #540]	; (80087f8 <_dtoa_r+0xbd0>)
 80085dc:	4602      	mov	r2, r0
 80085de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80085e2:	f7ff bb3b 	b.w	8007c5c <_dtoa_r+0x34>
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	3202      	adds	r2, #2
 80085ea:	0092      	lsls	r2, r2, #2
 80085ec:	f107 010c 	add.w	r1, r7, #12
 80085f0:	300c      	adds	r0, #12
 80085f2:	f000 f913 	bl	800881c <memcpy>
 80085f6:	2201      	movs	r2, #1
 80085f8:	4629      	mov	r1, r5
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 fb2e 	bl	8008c5c <__lshift>
 8008600:	9b01      	ldr	r3, [sp, #4]
 8008602:	f103 0901 	add.w	r9, r3, #1
 8008606:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800860a:	4413      	add	r3, r2
 800860c:	9305      	str	r3, [sp, #20]
 800860e:	f00a 0301 	and.w	r3, sl, #1
 8008612:	46b8      	mov	r8, r7
 8008614:	9304      	str	r3, [sp, #16]
 8008616:	4607      	mov	r7, r0
 8008618:	4631      	mov	r1, r6
 800861a:	ee18 0a10 	vmov	r0, s16
 800861e:	f7ff fa77 	bl	8007b10 <quorem>
 8008622:	4641      	mov	r1, r8
 8008624:	9002      	str	r0, [sp, #8]
 8008626:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800862a:	ee18 0a10 	vmov	r0, s16
 800862e:	f000 fb85 	bl	8008d3c <__mcmp>
 8008632:	463a      	mov	r2, r7
 8008634:	9003      	str	r0, [sp, #12]
 8008636:	4631      	mov	r1, r6
 8008638:	4620      	mov	r0, r4
 800863a:	f000 fb9b 	bl	8008d74 <__mdiff>
 800863e:	68c2      	ldr	r2, [r0, #12]
 8008640:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008644:	4605      	mov	r5, r0
 8008646:	bb02      	cbnz	r2, 800868a <_dtoa_r+0xa62>
 8008648:	4601      	mov	r1, r0
 800864a:	ee18 0a10 	vmov	r0, s16
 800864e:	f000 fb75 	bl	8008d3c <__mcmp>
 8008652:	4602      	mov	r2, r0
 8008654:	4629      	mov	r1, r5
 8008656:	4620      	mov	r0, r4
 8008658:	9207      	str	r2, [sp, #28]
 800865a:	f000 f92d 	bl	80088b8 <_Bfree>
 800865e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008662:	ea43 0102 	orr.w	r1, r3, r2
 8008666:	9b04      	ldr	r3, [sp, #16]
 8008668:	430b      	orrs	r3, r1
 800866a:	464d      	mov	r5, r9
 800866c:	d10f      	bne.n	800868e <_dtoa_r+0xa66>
 800866e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008672:	d02a      	beq.n	80086ca <_dtoa_r+0xaa2>
 8008674:	9b03      	ldr	r3, [sp, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	dd02      	ble.n	8008680 <_dtoa_r+0xa58>
 800867a:	9b02      	ldr	r3, [sp, #8]
 800867c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008680:	f88b a000 	strb.w	sl, [fp]
 8008684:	e775      	b.n	8008572 <_dtoa_r+0x94a>
 8008686:	4638      	mov	r0, r7
 8008688:	e7ba      	b.n	8008600 <_dtoa_r+0x9d8>
 800868a:	2201      	movs	r2, #1
 800868c:	e7e2      	b.n	8008654 <_dtoa_r+0xa2c>
 800868e:	9b03      	ldr	r3, [sp, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	db04      	blt.n	800869e <_dtoa_r+0xa76>
 8008694:	9906      	ldr	r1, [sp, #24]
 8008696:	430b      	orrs	r3, r1
 8008698:	9904      	ldr	r1, [sp, #16]
 800869a:	430b      	orrs	r3, r1
 800869c:	d122      	bne.n	80086e4 <_dtoa_r+0xabc>
 800869e:	2a00      	cmp	r2, #0
 80086a0:	ddee      	ble.n	8008680 <_dtoa_r+0xa58>
 80086a2:	ee18 1a10 	vmov	r1, s16
 80086a6:	2201      	movs	r2, #1
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 fad7 	bl	8008c5c <__lshift>
 80086ae:	4631      	mov	r1, r6
 80086b0:	ee08 0a10 	vmov	s16, r0
 80086b4:	f000 fb42 	bl	8008d3c <__mcmp>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	dc03      	bgt.n	80086c4 <_dtoa_r+0xa9c>
 80086bc:	d1e0      	bne.n	8008680 <_dtoa_r+0xa58>
 80086be:	f01a 0f01 	tst.w	sl, #1
 80086c2:	d0dd      	beq.n	8008680 <_dtoa_r+0xa58>
 80086c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086c8:	d1d7      	bne.n	800867a <_dtoa_r+0xa52>
 80086ca:	2339      	movs	r3, #57	; 0x39
 80086cc:	f88b 3000 	strb.w	r3, [fp]
 80086d0:	462b      	mov	r3, r5
 80086d2:	461d      	mov	r5, r3
 80086d4:	3b01      	subs	r3, #1
 80086d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80086da:	2a39      	cmp	r2, #57	; 0x39
 80086dc:	d071      	beq.n	80087c2 <_dtoa_r+0xb9a>
 80086de:	3201      	adds	r2, #1
 80086e0:	701a      	strb	r2, [r3, #0]
 80086e2:	e746      	b.n	8008572 <_dtoa_r+0x94a>
 80086e4:	2a00      	cmp	r2, #0
 80086e6:	dd07      	ble.n	80086f8 <_dtoa_r+0xad0>
 80086e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086ec:	d0ed      	beq.n	80086ca <_dtoa_r+0xaa2>
 80086ee:	f10a 0301 	add.w	r3, sl, #1
 80086f2:	f88b 3000 	strb.w	r3, [fp]
 80086f6:	e73c      	b.n	8008572 <_dtoa_r+0x94a>
 80086f8:	9b05      	ldr	r3, [sp, #20]
 80086fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80086fe:	4599      	cmp	r9, r3
 8008700:	d047      	beq.n	8008792 <_dtoa_r+0xb6a>
 8008702:	ee18 1a10 	vmov	r1, s16
 8008706:	2300      	movs	r3, #0
 8008708:	220a      	movs	r2, #10
 800870a:	4620      	mov	r0, r4
 800870c:	f000 f8f6 	bl	80088fc <__multadd>
 8008710:	45b8      	cmp	r8, r7
 8008712:	ee08 0a10 	vmov	s16, r0
 8008716:	f04f 0300 	mov.w	r3, #0
 800871a:	f04f 020a 	mov.w	r2, #10
 800871e:	4641      	mov	r1, r8
 8008720:	4620      	mov	r0, r4
 8008722:	d106      	bne.n	8008732 <_dtoa_r+0xb0a>
 8008724:	f000 f8ea 	bl	80088fc <__multadd>
 8008728:	4680      	mov	r8, r0
 800872a:	4607      	mov	r7, r0
 800872c:	f109 0901 	add.w	r9, r9, #1
 8008730:	e772      	b.n	8008618 <_dtoa_r+0x9f0>
 8008732:	f000 f8e3 	bl	80088fc <__multadd>
 8008736:	4639      	mov	r1, r7
 8008738:	4680      	mov	r8, r0
 800873a:	2300      	movs	r3, #0
 800873c:	220a      	movs	r2, #10
 800873e:	4620      	mov	r0, r4
 8008740:	f000 f8dc 	bl	80088fc <__multadd>
 8008744:	4607      	mov	r7, r0
 8008746:	e7f1      	b.n	800872c <_dtoa_r+0xb04>
 8008748:	9b03      	ldr	r3, [sp, #12]
 800874a:	9302      	str	r3, [sp, #8]
 800874c:	9d01      	ldr	r5, [sp, #4]
 800874e:	ee18 0a10 	vmov	r0, s16
 8008752:	4631      	mov	r1, r6
 8008754:	f7ff f9dc 	bl	8007b10 <quorem>
 8008758:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800875c:	9b01      	ldr	r3, [sp, #4]
 800875e:	f805 ab01 	strb.w	sl, [r5], #1
 8008762:	1aea      	subs	r2, r5, r3
 8008764:	9b02      	ldr	r3, [sp, #8]
 8008766:	4293      	cmp	r3, r2
 8008768:	dd09      	ble.n	800877e <_dtoa_r+0xb56>
 800876a:	ee18 1a10 	vmov	r1, s16
 800876e:	2300      	movs	r3, #0
 8008770:	220a      	movs	r2, #10
 8008772:	4620      	mov	r0, r4
 8008774:	f000 f8c2 	bl	80088fc <__multadd>
 8008778:	ee08 0a10 	vmov	s16, r0
 800877c:	e7e7      	b.n	800874e <_dtoa_r+0xb26>
 800877e:	9b02      	ldr	r3, [sp, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	bfc8      	it	gt
 8008784:	461d      	movgt	r5, r3
 8008786:	9b01      	ldr	r3, [sp, #4]
 8008788:	bfd8      	it	le
 800878a:	2501      	movle	r5, #1
 800878c:	441d      	add	r5, r3
 800878e:	f04f 0800 	mov.w	r8, #0
 8008792:	ee18 1a10 	vmov	r1, s16
 8008796:	2201      	movs	r2, #1
 8008798:	4620      	mov	r0, r4
 800879a:	f000 fa5f 	bl	8008c5c <__lshift>
 800879e:	4631      	mov	r1, r6
 80087a0:	ee08 0a10 	vmov	s16, r0
 80087a4:	f000 faca 	bl	8008d3c <__mcmp>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	dc91      	bgt.n	80086d0 <_dtoa_r+0xaa8>
 80087ac:	d102      	bne.n	80087b4 <_dtoa_r+0xb8c>
 80087ae:	f01a 0f01 	tst.w	sl, #1
 80087b2:	d18d      	bne.n	80086d0 <_dtoa_r+0xaa8>
 80087b4:	462b      	mov	r3, r5
 80087b6:	461d      	mov	r5, r3
 80087b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087bc:	2a30      	cmp	r2, #48	; 0x30
 80087be:	d0fa      	beq.n	80087b6 <_dtoa_r+0xb8e>
 80087c0:	e6d7      	b.n	8008572 <_dtoa_r+0x94a>
 80087c2:	9a01      	ldr	r2, [sp, #4]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d184      	bne.n	80086d2 <_dtoa_r+0xaaa>
 80087c8:	9b00      	ldr	r3, [sp, #0]
 80087ca:	3301      	adds	r3, #1
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	2331      	movs	r3, #49	; 0x31
 80087d0:	7013      	strb	r3, [r2, #0]
 80087d2:	e6ce      	b.n	8008572 <_dtoa_r+0x94a>
 80087d4:	4b09      	ldr	r3, [pc, #36]	; (80087fc <_dtoa_r+0xbd4>)
 80087d6:	f7ff ba95 	b.w	8007d04 <_dtoa_r+0xdc>
 80087da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f47f aa6e 	bne.w	8007cbe <_dtoa_r+0x96>
 80087e2:	4b07      	ldr	r3, [pc, #28]	; (8008800 <_dtoa_r+0xbd8>)
 80087e4:	f7ff ba8e 	b.w	8007d04 <_dtoa_r+0xdc>
 80087e8:	9b02      	ldr	r3, [sp, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	dcae      	bgt.n	800874c <_dtoa_r+0xb24>
 80087ee:	9b06      	ldr	r3, [sp, #24]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	f73f aea8 	bgt.w	8008546 <_dtoa_r+0x91e>
 80087f6:	e7a9      	b.n	800874c <_dtoa_r+0xb24>
 80087f8:	0801e337 	.word	0x0801e337
 80087fc:	0801e294 	.word	0x0801e294
 8008800:	0801e2b8 	.word	0x0801e2b8

08008804 <_localeconv_r>:
 8008804:	4800      	ldr	r0, [pc, #0]	; (8008808 <_localeconv_r+0x4>)
 8008806:	4770      	bx	lr
 8008808:	20000180 	.word	0x20000180

0800880c <malloc>:
 800880c:	4b02      	ldr	r3, [pc, #8]	; (8008818 <malloc+0xc>)
 800880e:	4601      	mov	r1, r0
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	f000 bc17 	b.w	8009044 <_malloc_r>
 8008816:	bf00      	nop
 8008818:	2000002c 	.word	0x2000002c

0800881c <memcpy>:
 800881c:	440a      	add	r2, r1
 800881e:	4291      	cmp	r1, r2
 8008820:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008824:	d100      	bne.n	8008828 <memcpy+0xc>
 8008826:	4770      	bx	lr
 8008828:	b510      	push	{r4, lr}
 800882a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800882e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008832:	4291      	cmp	r1, r2
 8008834:	d1f9      	bne.n	800882a <memcpy+0xe>
 8008836:	bd10      	pop	{r4, pc}

08008838 <_Balloc>:
 8008838:	b570      	push	{r4, r5, r6, lr}
 800883a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800883c:	4604      	mov	r4, r0
 800883e:	460d      	mov	r5, r1
 8008840:	b976      	cbnz	r6, 8008860 <_Balloc+0x28>
 8008842:	2010      	movs	r0, #16
 8008844:	f7ff ffe2 	bl	800880c <malloc>
 8008848:	4602      	mov	r2, r0
 800884a:	6260      	str	r0, [r4, #36]	; 0x24
 800884c:	b920      	cbnz	r0, 8008858 <_Balloc+0x20>
 800884e:	4b18      	ldr	r3, [pc, #96]	; (80088b0 <_Balloc+0x78>)
 8008850:	4818      	ldr	r0, [pc, #96]	; (80088b4 <_Balloc+0x7c>)
 8008852:	2166      	movs	r1, #102	; 0x66
 8008854:	f000 fc7a 	bl	800914c <__assert_func>
 8008858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800885c:	6006      	str	r6, [r0, #0]
 800885e:	60c6      	str	r6, [r0, #12]
 8008860:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008862:	68f3      	ldr	r3, [r6, #12]
 8008864:	b183      	cbz	r3, 8008888 <_Balloc+0x50>
 8008866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800886e:	b9b8      	cbnz	r0, 80088a0 <_Balloc+0x68>
 8008870:	2101      	movs	r1, #1
 8008872:	fa01 f605 	lsl.w	r6, r1, r5
 8008876:	1d72      	adds	r2, r6, #5
 8008878:	0092      	lsls	r2, r2, #2
 800887a:	4620      	mov	r0, r4
 800887c:	f000 fb60 	bl	8008f40 <_calloc_r>
 8008880:	b160      	cbz	r0, 800889c <_Balloc+0x64>
 8008882:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008886:	e00e      	b.n	80088a6 <_Balloc+0x6e>
 8008888:	2221      	movs	r2, #33	; 0x21
 800888a:	2104      	movs	r1, #4
 800888c:	4620      	mov	r0, r4
 800888e:	f000 fb57 	bl	8008f40 <_calloc_r>
 8008892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008894:	60f0      	str	r0, [r6, #12]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e4      	bne.n	8008866 <_Balloc+0x2e>
 800889c:	2000      	movs	r0, #0
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	6802      	ldr	r2, [r0, #0]
 80088a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088a6:	2300      	movs	r3, #0
 80088a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088ac:	e7f7      	b.n	800889e <_Balloc+0x66>
 80088ae:	bf00      	nop
 80088b0:	0801e2c5 	.word	0x0801e2c5
 80088b4:	0801e348 	.word	0x0801e348

080088b8 <_Bfree>:
 80088b8:	b570      	push	{r4, r5, r6, lr}
 80088ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088bc:	4605      	mov	r5, r0
 80088be:	460c      	mov	r4, r1
 80088c0:	b976      	cbnz	r6, 80088e0 <_Bfree+0x28>
 80088c2:	2010      	movs	r0, #16
 80088c4:	f7ff ffa2 	bl	800880c <malloc>
 80088c8:	4602      	mov	r2, r0
 80088ca:	6268      	str	r0, [r5, #36]	; 0x24
 80088cc:	b920      	cbnz	r0, 80088d8 <_Bfree+0x20>
 80088ce:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <_Bfree+0x3c>)
 80088d0:	4809      	ldr	r0, [pc, #36]	; (80088f8 <_Bfree+0x40>)
 80088d2:	218a      	movs	r1, #138	; 0x8a
 80088d4:	f000 fc3a 	bl	800914c <__assert_func>
 80088d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088dc:	6006      	str	r6, [r0, #0]
 80088de:	60c6      	str	r6, [r0, #12]
 80088e0:	b13c      	cbz	r4, 80088f2 <_Bfree+0x3a>
 80088e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088e4:	6862      	ldr	r2, [r4, #4]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088ec:	6021      	str	r1, [r4, #0]
 80088ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088f2:	bd70      	pop	{r4, r5, r6, pc}
 80088f4:	0801e2c5 	.word	0x0801e2c5
 80088f8:	0801e348 	.word	0x0801e348

080088fc <__multadd>:
 80088fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008900:	690d      	ldr	r5, [r1, #16]
 8008902:	4607      	mov	r7, r0
 8008904:	460c      	mov	r4, r1
 8008906:	461e      	mov	r6, r3
 8008908:	f101 0c14 	add.w	ip, r1, #20
 800890c:	2000      	movs	r0, #0
 800890e:	f8dc 3000 	ldr.w	r3, [ip]
 8008912:	b299      	uxth	r1, r3
 8008914:	fb02 6101 	mla	r1, r2, r1, r6
 8008918:	0c1e      	lsrs	r6, r3, #16
 800891a:	0c0b      	lsrs	r3, r1, #16
 800891c:	fb02 3306 	mla	r3, r2, r6, r3
 8008920:	b289      	uxth	r1, r1
 8008922:	3001      	adds	r0, #1
 8008924:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008928:	4285      	cmp	r5, r0
 800892a:	f84c 1b04 	str.w	r1, [ip], #4
 800892e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008932:	dcec      	bgt.n	800890e <__multadd+0x12>
 8008934:	b30e      	cbz	r6, 800897a <__multadd+0x7e>
 8008936:	68a3      	ldr	r3, [r4, #8]
 8008938:	42ab      	cmp	r3, r5
 800893a:	dc19      	bgt.n	8008970 <__multadd+0x74>
 800893c:	6861      	ldr	r1, [r4, #4]
 800893e:	4638      	mov	r0, r7
 8008940:	3101      	adds	r1, #1
 8008942:	f7ff ff79 	bl	8008838 <_Balloc>
 8008946:	4680      	mov	r8, r0
 8008948:	b928      	cbnz	r0, 8008956 <__multadd+0x5a>
 800894a:	4602      	mov	r2, r0
 800894c:	4b0c      	ldr	r3, [pc, #48]	; (8008980 <__multadd+0x84>)
 800894e:	480d      	ldr	r0, [pc, #52]	; (8008984 <__multadd+0x88>)
 8008950:	21b5      	movs	r1, #181	; 0xb5
 8008952:	f000 fbfb 	bl	800914c <__assert_func>
 8008956:	6922      	ldr	r2, [r4, #16]
 8008958:	3202      	adds	r2, #2
 800895a:	f104 010c 	add.w	r1, r4, #12
 800895e:	0092      	lsls	r2, r2, #2
 8008960:	300c      	adds	r0, #12
 8008962:	f7ff ff5b 	bl	800881c <memcpy>
 8008966:	4621      	mov	r1, r4
 8008968:	4638      	mov	r0, r7
 800896a:	f7ff ffa5 	bl	80088b8 <_Bfree>
 800896e:	4644      	mov	r4, r8
 8008970:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008974:	3501      	adds	r5, #1
 8008976:	615e      	str	r6, [r3, #20]
 8008978:	6125      	str	r5, [r4, #16]
 800897a:	4620      	mov	r0, r4
 800897c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008980:	0801e337 	.word	0x0801e337
 8008984:	0801e348 	.word	0x0801e348

08008988 <__hi0bits>:
 8008988:	0c03      	lsrs	r3, r0, #16
 800898a:	041b      	lsls	r3, r3, #16
 800898c:	b9d3      	cbnz	r3, 80089c4 <__hi0bits+0x3c>
 800898e:	0400      	lsls	r0, r0, #16
 8008990:	2310      	movs	r3, #16
 8008992:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008996:	bf04      	itt	eq
 8008998:	0200      	lsleq	r0, r0, #8
 800899a:	3308      	addeq	r3, #8
 800899c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089a0:	bf04      	itt	eq
 80089a2:	0100      	lsleq	r0, r0, #4
 80089a4:	3304      	addeq	r3, #4
 80089a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089aa:	bf04      	itt	eq
 80089ac:	0080      	lsleq	r0, r0, #2
 80089ae:	3302      	addeq	r3, #2
 80089b0:	2800      	cmp	r0, #0
 80089b2:	db05      	blt.n	80089c0 <__hi0bits+0x38>
 80089b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089b8:	f103 0301 	add.w	r3, r3, #1
 80089bc:	bf08      	it	eq
 80089be:	2320      	moveq	r3, #32
 80089c0:	4618      	mov	r0, r3
 80089c2:	4770      	bx	lr
 80089c4:	2300      	movs	r3, #0
 80089c6:	e7e4      	b.n	8008992 <__hi0bits+0xa>

080089c8 <__lo0bits>:
 80089c8:	6803      	ldr	r3, [r0, #0]
 80089ca:	f013 0207 	ands.w	r2, r3, #7
 80089ce:	4601      	mov	r1, r0
 80089d0:	d00b      	beq.n	80089ea <__lo0bits+0x22>
 80089d2:	07da      	lsls	r2, r3, #31
 80089d4:	d423      	bmi.n	8008a1e <__lo0bits+0x56>
 80089d6:	0798      	lsls	r0, r3, #30
 80089d8:	bf49      	itett	mi
 80089da:	085b      	lsrmi	r3, r3, #1
 80089dc:	089b      	lsrpl	r3, r3, #2
 80089de:	2001      	movmi	r0, #1
 80089e0:	600b      	strmi	r3, [r1, #0]
 80089e2:	bf5c      	itt	pl
 80089e4:	600b      	strpl	r3, [r1, #0]
 80089e6:	2002      	movpl	r0, #2
 80089e8:	4770      	bx	lr
 80089ea:	b298      	uxth	r0, r3
 80089ec:	b9a8      	cbnz	r0, 8008a1a <__lo0bits+0x52>
 80089ee:	0c1b      	lsrs	r3, r3, #16
 80089f0:	2010      	movs	r0, #16
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	b90a      	cbnz	r2, 80089fa <__lo0bits+0x32>
 80089f6:	3008      	adds	r0, #8
 80089f8:	0a1b      	lsrs	r3, r3, #8
 80089fa:	071a      	lsls	r2, r3, #28
 80089fc:	bf04      	itt	eq
 80089fe:	091b      	lsreq	r3, r3, #4
 8008a00:	3004      	addeq	r0, #4
 8008a02:	079a      	lsls	r2, r3, #30
 8008a04:	bf04      	itt	eq
 8008a06:	089b      	lsreq	r3, r3, #2
 8008a08:	3002      	addeq	r0, #2
 8008a0a:	07da      	lsls	r2, r3, #31
 8008a0c:	d403      	bmi.n	8008a16 <__lo0bits+0x4e>
 8008a0e:	085b      	lsrs	r3, r3, #1
 8008a10:	f100 0001 	add.w	r0, r0, #1
 8008a14:	d005      	beq.n	8008a22 <__lo0bits+0x5a>
 8008a16:	600b      	str	r3, [r1, #0]
 8008a18:	4770      	bx	lr
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	e7e9      	b.n	80089f2 <__lo0bits+0x2a>
 8008a1e:	2000      	movs	r0, #0
 8008a20:	4770      	bx	lr
 8008a22:	2020      	movs	r0, #32
 8008a24:	4770      	bx	lr
	...

08008a28 <__i2b>:
 8008a28:	b510      	push	{r4, lr}
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	f7ff ff03 	bl	8008838 <_Balloc>
 8008a32:	4602      	mov	r2, r0
 8008a34:	b928      	cbnz	r0, 8008a42 <__i2b+0x1a>
 8008a36:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <__i2b+0x24>)
 8008a38:	4805      	ldr	r0, [pc, #20]	; (8008a50 <__i2b+0x28>)
 8008a3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a3e:	f000 fb85 	bl	800914c <__assert_func>
 8008a42:	2301      	movs	r3, #1
 8008a44:	6144      	str	r4, [r0, #20]
 8008a46:	6103      	str	r3, [r0, #16]
 8008a48:	bd10      	pop	{r4, pc}
 8008a4a:	bf00      	nop
 8008a4c:	0801e337 	.word	0x0801e337
 8008a50:	0801e348 	.word	0x0801e348

08008a54 <__multiply>:
 8008a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a58:	4691      	mov	r9, r2
 8008a5a:	690a      	ldr	r2, [r1, #16]
 8008a5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	bfb8      	it	lt
 8008a64:	460b      	movlt	r3, r1
 8008a66:	460c      	mov	r4, r1
 8008a68:	bfbc      	itt	lt
 8008a6a:	464c      	movlt	r4, r9
 8008a6c:	4699      	movlt	r9, r3
 8008a6e:	6927      	ldr	r7, [r4, #16]
 8008a70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a74:	68a3      	ldr	r3, [r4, #8]
 8008a76:	6861      	ldr	r1, [r4, #4]
 8008a78:	eb07 060a 	add.w	r6, r7, sl
 8008a7c:	42b3      	cmp	r3, r6
 8008a7e:	b085      	sub	sp, #20
 8008a80:	bfb8      	it	lt
 8008a82:	3101      	addlt	r1, #1
 8008a84:	f7ff fed8 	bl	8008838 <_Balloc>
 8008a88:	b930      	cbnz	r0, 8008a98 <__multiply+0x44>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	4b44      	ldr	r3, [pc, #272]	; (8008ba0 <__multiply+0x14c>)
 8008a8e:	4845      	ldr	r0, [pc, #276]	; (8008ba4 <__multiply+0x150>)
 8008a90:	f240 115d 	movw	r1, #349	; 0x15d
 8008a94:	f000 fb5a 	bl	800914c <__assert_func>
 8008a98:	f100 0514 	add.w	r5, r0, #20
 8008a9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008aa0:	462b      	mov	r3, r5
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	4543      	cmp	r3, r8
 8008aa6:	d321      	bcc.n	8008aec <__multiply+0x98>
 8008aa8:	f104 0314 	add.w	r3, r4, #20
 8008aac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ab0:	f109 0314 	add.w	r3, r9, #20
 8008ab4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ab8:	9202      	str	r2, [sp, #8]
 8008aba:	1b3a      	subs	r2, r7, r4
 8008abc:	3a15      	subs	r2, #21
 8008abe:	f022 0203 	bic.w	r2, r2, #3
 8008ac2:	3204      	adds	r2, #4
 8008ac4:	f104 0115 	add.w	r1, r4, #21
 8008ac8:	428f      	cmp	r7, r1
 8008aca:	bf38      	it	cc
 8008acc:	2204      	movcc	r2, #4
 8008ace:	9201      	str	r2, [sp, #4]
 8008ad0:	9a02      	ldr	r2, [sp, #8]
 8008ad2:	9303      	str	r3, [sp, #12]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d80c      	bhi.n	8008af2 <__multiply+0x9e>
 8008ad8:	2e00      	cmp	r6, #0
 8008ada:	dd03      	ble.n	8008ae4 <__multiply+0x90>
 8008adc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d05a      	beq.n	8008b9a <__multiply+0x146>
 8008ae4:	6106      	str	r6, [r0, #16]
 8008ae6:	b005      	add	sp, #20
 8008ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aec:	f843 2b04 	str.w	r2, [r3], #4
 8008af0:	e7d8      	b.n	8008aa4 <__multiply+0x50>
 8008af2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008af6:	f1ba 0f00 	cmp.w	sl, #0
 8008afa:	d024      	beq.n	8008b46 <__multiply+0xf2>
 8008afc:	f104 0e14 	add.w	lr, r4, #20
 8008b00:	46a9      	mov	r9, r5
 8008b02:	f04f 0c00 	mov.w	ip, #0
 8008b06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b0a:	f8d9 1000 	ldr.w	r1, [r9]
 8008b0e:	fa1f fb82 	uxth.w	fp, r2
 8008b12:	b289      	uxth	r1, r1
 8008b14:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b1c:	f8d9 2000 	ldr.w	r2, [r9]
 8008b20:	4461      	add	r1, ip
 8008b22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b26:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b2e:	b289      	uxth	r1, r1
 8008b30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b34:	4577      	cmp	r7, lr
 8008b36:	f849 1b04 	str.w	r1, [r9], #4
 8008b3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b3e:	d8e2      	bhi.n	8008b06 <__multiply+0xb2>
 8008b40:	9a01      	ldr	r2, [sp, #4]
 8008b42:	f845 c002 	str.w	ip, [r5, r2]
 8008b46:	9a03      	ldr	r2, [sp, #12]
 8008b48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	f1b9 0f00 	cmp.w	r9, #0
 8008b52:	d020      	beq.n	8008b96 <__multiply+0x142>
 8008b54:	6829      	ldr	r1, [r5, #0]
 8008b56:	f104 0c14 	add.w	ip, r4, #20
 8008b5a:	46ae      	mov	lr, r5
 8008b5c:	f04f 0a00 	mov.w	sl, #0
 8008b60:	f8bc b000 	ldrh.w	fp, [ip]
 8008b64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b68:	fb09 220b 	mla	r2, r9, fp, r2
 8008b6c:	4492      	add	sl, r2
 8008b6e:	b289      	uxth	r1, r1
 8008b70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b74:	f84e 1b04 	str.w	r1, [lr], #4
 8008b78:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b7c:	f8be 1000 	ldrh.w	r1, [lr]
 8008b80:	0c12      	lsrs	r2, r2, #16
 8008b82:	fb09 1102 	mla	r1, r9, r2, r1
 8008b86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b8a:	4567      	cmp	r7, ip
 8008b8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b90:	d8e6      	bhi.n	8008b60 <__multiply+0x10c>
 8008b92:	9a01      	ldr	r2, [sp, #4]
 8008b94:	50a9      	str	r1, [r5, r2]
 8008b96:	3504      	adds	r5, #4
 8008b98:	e79a      	b.n	8008ad0 <__multiply+0x7c>
 8008b9a:	3e01      	subs	r6, #1
 8008b9c:	e79c      	b.n	8008ad8 <__multiply+0x84>
 8008b9e:	bf00      	nop
 8008ba0:	0801e337 	.word	0x0801e337
 8008ba4:	0801e348 	.word	0x0801e348

08008ba8 <__pow5mult>:
 8008ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bac:	4615      	mov	r5, r2
 8008bae:	f012 0203 	ands.w	r2, r2, #3
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	460f      	mov	r7, r1
 8008bb6:	d007      	beq.n	8008bc8 <__pow5mult+0x20>
 8008bb8:	4c25      	ldr	r4, [pc, #148]	; (8008c50 <__pow5mult+0xa8>)
 8008bba:	3a01      	subs	r2, #1
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bc2:	f7ff fe9b 	bl	80088fc <__multadd>
 8008bc6:	4607      	mov	r7, r0
 8008bc8:	10ad      	asrs	r5, r5, #2
 8008bca:	d03d      	beq.n	8008c48 <__pow5mult+0xa0>
 8008bcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008bce:	b97c      	cbnz	r4, 8008bf0 <__pow5mult+0x48>
 8008bd0:	2010      	movs	r0, #16
 8008bd2:	f7ff fe1b 	bl	800880c <malloc>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	6270      	str	r0, [r6, #36]	; 0x24
 8008bda:	b928      	cbnz	r0, 8008be8 <__pow5mult+0x40>
 8008bdc:	4b1d      	ldr	r3, [pc, #116]	; (8008c54 <__pow5mult+0xac>)
 8008bde:	481e      	ldr	r0, [pc, #120]	; (8008c58 <__pow5mult+0xb0>)
 8008be0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008be4:	f000 fab2 	bl	800914c <__assert_func>
 8008be8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bec:	6004      	str	r4, [r0, #0]
 8008bee:	60c4      	str	r4, [r0, #12]
 8008bf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008bf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bf8:	b94c      	cbnz	r4, 8008c0e <__pow5mult+0x66>
 8008bfa:	f240 2171 	movw	r1, #625	; 0x271
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f7ff ff12 	bl	8008a28 <__i2b>
 8008c04:	2300      	movs	r3, #0
 8008c06:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	6003      	str	r3, [r0, #0]
 8008c0e:	f04f 0900 	mov.w	r9, #0
 8008c12:	07eb      	lsls	r3, r5, #31
 8008c14:	d50a      	bpl.n	8008c2c <__pow5mult+0x84>
 8008c16:	4639      	mov	r1, r7
 8008c18:	4622      	mov	r2, r4
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f7ff ff1a 	bl	8008a54 <__multiply>
 8008c20:	4639      	mov	r1, r7
 8008c22:	4680      	mov	r8, r0
 8008c24:	4630      	mov	r0, r6
 8008c26:	f7ff fe47 	bl	80088b8 <_Bfree>
 8008c2a:	4647      	mov	r7, r8
 8008c2c:	106d      	asrs	r5, r5, #1
 8008c2e:	d00b      	beq.n	8008c48 <__pow5mult+0xa0>
 8008c30:	6820      	ldr	r0, [r4, #0]
 8008c32:	b938      	cbnz	r0, 8008c44 <__pow5mult+0x9c>
 8008c34:	4622      	mov	r2, r4
 8008c36:	4621      	mov	r1, r4
 8008c38:	4630      	mov	r0, r6
 8008c3a:	f7ff ff0b 	bl	8008a54 <__multiply>
 8008c3e:	6020      	str	r0, [r4, #0]
 8008c40:	f8c0 9000 	str.w	r9, [r0]
 8008c44:	4604      	mov	r4, r0
 8008c46:	e7e4      	b.n	8008c12 <__pow5mult+0x6a>
 8008c48:	4638      	mov	r0, r7
 8008c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c4e:	bf00      	nop
 8008c50:	0801e498 	.word	0x0801e498
 8008c54:	0801e2c5 	.word	0x0801e2c5
 8008c58:	0801e348 	.word	0x0801e348

08008c5c <__lshift>:
 8008c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c60:	460c      	mov	r4, r1
 8008c62:	6849      	ldr	r1, [r1, #4]
 8008c64:	6923      	ldr	r3, [r4, #16]
 8008c66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c6a:	68a3      	ldr	r3, [r4, #8]
 8008c6c:	4607      	mov	r7, r0
 8008c6e:	4691      	mov	r9, r2
 8008c70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c74:	f108 0601 	add.w	r6, r8, #1
 8008c78:	42b3      	cmp	r3, r6
 8008c7a:	db0b      	blt.n	8008c94 <__lshift+0x38>
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	f7ff fddb 	bl	8008838 <_Balloc>
 8008c82:	4605      	mov	r5, r0
 8008c84:	b948      	cbnz	r0, 8008c9a <__lshift+0x3e>
 8008c86:	4602      	mov	r2, r0
 8008c88:	4b2a      	ldr	r3, [pc, #168]	; (8008d34 <__lshift+0xd8>)
 8008c8a:	482b      	ldr	r0, [pc, #172]	; (8008d38 <__lshift+0xdc>)
 8008c8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c90:	f000 fa5c 	bl	800914c <__assert_func>
 8008c94:	3101      	adds	r1, #1
 8008c96:	005b      	lsls	r3, r3, #1
 8008c98:	e7ee      	b.n	8008c78 <__lshift+0x1c>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f100 0114 	add.w	r1, r0, #20
 8008ca0:	f100 0210 	add.w	r2, r0, #16
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	4553      	cmp	r3, sl
 8008ca8:	db37      	blt.n	8008d1a <__lshift+0xbe>
 8008caa:	6920      	ldr	r0, [r4, #16]
 8008cac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cb0:	f104 0314 	add.w	r3, r4, #20
 8008cb4:	f019 091f 	ands.w	r9, r9, #31
 8008cb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008cc0:	d02f      	beq.n	8008d22 <__lshift+0xc6>
 8008cc2:	f1c9 0e20 	rsb	lr, r9, #32
 8008cc6:	468a      	mov	sl, r1
 8008cc8:	f04f 0c00 	mov.w	ip, #0
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	fa02 f209 	lsl.w	r2, r2, r9
 8008cd2:	ea42 020c 	orr.w	r2, r2, ip
 8008cd6:	f84a 2b04 	str.w	r2, [sl], #4
 8008cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cde:	4298      	cmp	r0, r3
 8008ce0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008ce4:	d8f2      	bhi.n	8008ccc <__lshift+0x70>
 8008ce6:	1b03      	subs	r3, r0, r4
 8008ce8:	3b15      	subs	r3, #21
 8008cea:	f023 0303 	bic.w	r3, r3, #3
 8008cee:	3304      	adds	r3, #4
 8008cf0:	f104 0215 	add.w	r2, r4, #21
 8008cf4:	4290      	cmp	r0, r2
 8008cf6:	bf38      	it	cc
 8008cf8:	2304      	movcc	r3, #4
 8008cfa:	f841 c003 	str.w	ip, [r1, r3]
 8008cfe:	f1bc 0f00 	cmp.w	ip, #0
 8008d02:	d001      	beq.n	8008d08 <__lshift+0xac>
 8008d04:	f108 0602 	add.w	r6, r8, #2
 8008d08:	3e01      	subs	r6, #1
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	612e      	str	r6, [r5, #16]
 8008d0e:	4621      	mov	r1, r4
 8008d10:	f7ff fdd2 	bl	80088b8 <_Bfree>
 8008d14:	4628      	mov	r0, r5
 8008d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d1e:	3301      	adds	r3, #1
 8008d20:	e7c1      	b.n	8008ca6 <__lshift+0x4a>
 8008d22:	3904      	subs	r1, #4
 8008d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d28:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d2c:	4298      	cmp	r0, r3
 8008d2e:	d8f9      	bhi.n	8008d24 <__lshift+0xc8>
 8008d30:	e7ea      	b.n	8008d08 <__lshift+0xac>
 8008d32:	bf00      	nop
 8008d34:	0801e337 	.word	0x0801e337
 8008d38:	0801e348 	.word	0x0801e348

08008d3c <__mcmp>:
 8008d3c:	b530      	push	{r4, r5, lr}
 8008d3e:	6902      	ldr	r2, [r0, #16]
 8008d40:	690c      	ldr	r4, [r1, #16]
 8008d42:	1b12      	subs	r2, r2, r4
 8008d44:	d10e      	bne.n	8008d64 <__mcmp+0x28>
 8008d46:	f100 0314 	add.w	r3, r0, #20
 8008d4a:	3114      	adds	r1, #20
 8008d4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d5c:	42a5      	cmp	r5, r4
 8008d5e:	d003      	beq.n	8008d68 <__mcmp+0x2c>
 8008d60:	d305      	bcc.n	8008d6e <__mcmp+0x32>
 8008d62:	2201      	movs	r2, #1
 8008d64:	4610      	mov	r0, r2
 8008d66:	bd30      	pop	{r4, r5, pc}
 8008d68:	4283      	cmp	r3, r0
 8008d6a:	d3f3      	bcc.n	8008d54 <__mcmp+0x18>
 8008d6c:	e7fa      	b.n	8008d64 <__mcmp+0x28>
 8008d6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d72:	e7f7      	b.n	8008d64 <__mcmp+0x28>

08008d74 <__mdiff>:
 8008d74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d78:	460c      	mov	r4, r1
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4690      	mov	r8, r2
 8008d82:	f7ff ffdb 	bl	8008d3c <__mcmp>
 8008d86:	1e05      	subs	r5, r0, #0
 8008d88:	d110      	bne.n	8008dac <__mdiff+0x38>
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f7ff fd53 	bl	8008838 <_Balloc>
 8008d92:	b930      	cbnz	r0, 8008da2 <__mdiff+0x2e>
 8008d94:	4b3a      	ldr	r3, [pc, #232]	; (8008e80 <__mdiff+0x10c>)
 8008d96:	4602      	mov	r2, r0
 8008d98:	f240 2132 	movw	r1, #562	; 0x232
 8008d9c:	4839      	ldr	r0, [pc, #228]	; (8008e84 <__mdiff+0x110>)
 8008d9e:	f000 f9d5 	bl	800914c <__assert_func>
 8008da2:	2301      	movs	r3, #1
 8008da4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008da8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dac:	bfa4      	itt	ge
 8008dae:	4643      	movge	r3, r8
 8008db0:	46a0      	movge	r8, r4
 8008db2:	4630      	mov	r0, r6
 8008db4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008db8:	bfa6      	itte	ge
 8008dba:	461c      	movge	r4, r3
 8008dbc:	2500      	movge	r5, #0
 8008dbe:	2501      	movlt	r5, #1
 8008dc0:	f7ff fd3a 	bl	8008838 <_Balloc>
 8008dc4:	b920      	cbnz	r0, 8008dd0 <__mdiff+0x5c>
 8008dc6:	4b2e      	ldr	r3, [pc, #184]	; (8008e80 <__mdiff+0x10c>)
 8008dc8:	4602      	mov	r2, r0
 8008dca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008dce:	e7e5      	b.n	8008d9c <__mdiff+0x28>
 8008dd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008dd4:	6926      	ldr	r6, [r4, #16]
 8008dd6:	60c5      	str	r5, [r0, #12]
 8008dd8:	f104 0914 	add.w	r9, r4, #20
 8008ddc:	f108 0514 	add.w	r5, r8, #20
 8008de0:	f100 0e14 	add.w	lr, r0, #20
 8008de4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008de8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008dec:	f108 0210 	add.w	r2, r8, #16
 8008df0:	46f2      	mov	sl, lr
 8008df2:	2100      	movs	r1, #0
 8008df4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008df8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008dfc:	fa1f f883 	uxth.w	r8, r3
 8008e00:	fa11 f18b 	uxtah	r1, r1, fp
 8008e04:	0c1b      	lsrs	r3, r3, #16
 8008e06:	eba1 0808 	sub.w	r8, r1, r8
 8008e0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e12:	fa1f f888 	uxth.w	r8, r8
 8008e16:	1419      	asrs	r1, r3, #16
 8008e18:	454e      	cmp	r6, r9
 8008e1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e1e:	f84a 3b04 	str.w	r3, [sl], #4
 8008e22:	d8e7      	bhi.n	8008df4 <__mdiff+0x80>
 8008e24:	1b33      	subs	r3, r6, r4
 8008e26:	3b15      	subs	r3, #21
 8008e28:	f023 0303 	bic.w	r3, r3, #3
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	3415      	adds	r4, #21
 8008e30:	42a6      	cmp	r6, r4
 8008e32:	bf38      	it	cc
 8008e34:	2304      	movcc	r3, #4
 8008e36:	441d      	add	r5, r3
 8008e38:	4473      	add	r3, lr
 8008e3a:	469e      	mov	lr, r3
 8008e3c:	462e      	mov	r6, r5
 8008e3e:	4566      	cmp	r6, ip
 8008e40:	d30e      	bcc.n	8008e60 <__mdiff+0xec>
 8008e42:	f10c 0203 	add.w	r2, ip, #3
 8008e46:	1b52      	subs	r2, r2, r5
 8008e48:	f022 0203 	bic.w	r2, r2, #3
 8008e4c:	3d03      	subs	r5, #3
 8008e4e:	45ac      	cmp	ip, r5
 8008e50:	bf38      	it	cc
 8008e52:	2200      	movcc	r2, #0
 8008e54:	441a      	add	r2, r3
 8008e56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e5a:	b17b      	cbz	r3, 8008e7c <__mdiff+0x108>
 8008e5c:	6107      	str	r7, [r0, #16]
 8008e5e:	e7a3      	b.n	8008da8 <__mdiff+0x34>
 8008e60:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e64:	fa11 f288 	uxtah	r2, r1, r8
 8008e68:	1414      	asrs	r4, r2, #16
 8008e6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e6e:	b292      	uxth	r2, r2
 8008e70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e74:	f84e 2b04 	str.w	r2, [lr], #4
 8008e78:	1421      	asrs	r1, r4, #16
 8008e7a:	e7e0      	b.n	8008e3e <__mdiff+0xca>
 8008e7c:	3f01      	subs	r7, #1
 8008e7e:	e7ea      	b.n	8008e56 <__mdiff+0xe2>
 8008e80:	0801e337 	.word	0x0801e337
 8008e84:	0801e348 	.word	0x0801e348

08008e88 <__d2b>:
 8008e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e8c:	4689      	mov	r9, r1
 8008e8e:	2101      	movs	r1, #1
 8008e90:	ec57 6b10 	vmov	r6, r7, d0
 8008e94:	4690      	mov	r8, r2
 8008e96:	f7ff fccf 	bl	8008838 <_Balloc>
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	b930      	cbnz	r0, 8008eac <__d2b+0x24>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	4b25      	ldr	r3, [pc, #148]	; (8008f38 <__d2b+0xb0>)
 8008ea2:	4826      	ldr	r0, [pc, #152]	; (8008f3c <__d2b+0xb4>)
 8008ea4:	f240 310a 	movw	r1, #778	; 0x30a
 8008ea8:	f000 f950 	bl	800914c <__assert_func>
 8008eac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008eb4:	bb35      	cbnz	r5, 8008f04 <__d2b+0x7c>
 8008eb6:	2e00      	cmp	r6, #0
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	d028      	beq.n	8008f0e <__d2b+0x86>
 8008ebc:	4668      	mov	r0, sp
 8008ebe:	9600      	str	r6, [sp, #0]
 8008ec0:	f7ff fd82 	bl	80089c8 <__lo0bits>
 8008ec4:	9900      	ldr	r1, [sp, #0]
 8008ec6:	b300      	cbz	r0, 8008f0a <__d2b+0x82>
 8008ec8:	9a01      	ldr	r2, [sp, #4]
 8008eca:	f1c0 0320 	rsb	r3, r0, #32
 8008ece:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed2:	430b      	orrs	r3, r1
 8008ed4:	40c2      	lsrs	r2, r0
 8008ed6:	6163      	str	r3, [r4, #20]
 8008ed8:	9201      	str	r2, [sp, #4]
 8008eda:	9b01      	ldr	r3, [sp, #4]
 8008edc:	61a3      	str	r3, [r4, #24]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	bf14      	ite	ne
 8008ee2:	2202      	movne	r2, #2
 8008ee4:	2201      	moveq	r2, #1
 8008ee6:	6122      	str	r2, [r4, #16]
 8008ee8:	b1d5      	cbz	r5, 8008f20 <__d2b+0x98>
 8008eea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008eee:	4405      	add	r5, r0
 8008ef0:	f8c9 5000 	str.w	r5, [r9]
 8008ef4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ef8:	f8c8 0000 	str.w	r0, [r8]
 8008efc:	4620      	mov	r0, r4
 8008efe:	b003      	add	sp, #12
 8008f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f08:	e7d5      	b.n	8008eb6 <__d2b+0x2e>
 8008f0a:	6161      	str	r1, [r4, #20]
 8008f0c:	e7e5      	b.n	8008eda <__d2b+0x52>
 8008f0e:	a801      	add	r0, sp, #4
 8008f10:	f7ff fd5a 	bl	80089c8 <__lo0bits>
 8008f14:	9b01      	ldr	r3, [sp, #4]
 8008f16:	6163      	str	r3, [r4, #20]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	6122      	str	r2, [r4, #16]
 8008f1c:	3020      	adds	r0, #32
 8008f1e:	e7e3      	b.n	8008ee8 <__d2b+0x60>
 8008f20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f28:	f8c9 0000 	str.w	r0, [r9]
 8008f2c:	6918      	ldr	r0, [r3, #16]
 8008f2e:	f7ff fd2b 	bl	8008988 <__hi0bits>
 8008f32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f36:	e7df      	b.n	8008ef8 <__d2b+0x70>
 8008f38:	0801e337 	.word	0x0801e337
 8008f3c:	0801e348 	.word	0x0801e348

08008f40 <_calloc_r>:
 8008f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f42:	fba1 2402 	umull	r2, r4, r1, r2
 8008f46:	b94c      	cbnz	r4, 8008f5c <_calloc_r+0x1c>
 8008f48:	4611      	mov	r1, r2
 8008f4a:	9201      	str	r2, [sp, #4]
 8008f4c:	f000 f87a 	bl	8009044 <_malloc_r>
 8008f50:	9a01      	ldr	r2, [sp, #4]
 8008f52:	4605      	mov	r5, r0
 8008f54:	b930      	cbnz	r0, 8008f64 <_calloc_r+0x24>
 8008f56:	4628      	mov	r0, r5
 8008f58:	b003      	add	sp, #12
 8008f5a:	bd30      	pop	{r4, r5, pc}
 8008f5c:	220c      	movs	r2, #12
 8008f5e:	6002      	str	r2, [r0, #0]
 8008f60:	2500      	movs	r5, #0
 8008f62:	e7f8      	b.n	8008f56 <_calloc_r+0x16>
 8008f64:	4621      	mov	r1, r4
 8008f66:	f7fe f961 	bl	800722c <memset>
 8008f6a:	e7f4      	b.n	8008f56 <_calloc_r+0x16>

08008f6c <_free_r>:
 8008f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f6e:	2900      	cmp	r1, #0
 8008f70:	d044      	beq.n	8008ffc <_free_r+0x90>
 8008f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f76:	9001      	str	r0, [sp, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f7e:	bfb8      	it	lt
 8008f80:	18e4      	addlt	r4, r4, r3
 8008f82:	f000 f925 	bl	80091d0 <__malloc_lock>
 8008f86:	4a1e      	ldr	r2, [pc, #120]	; (8009000 <_free_r+0x94>)
 8008f88:	9801      	ldr	r0, [sp, #4]
 8008f8a:	6813      	ldr	r3, [r2, #0]
 8008f8c:	b933      	cbnz	r3, 8008f9c <_free_r+0x30>
 8008f8e:	6063      	str	r3, [r4, #4]
 8008f90:	6014      	str	r4, [r2, #0]
 8008f92:	b003      	add	sp, #12
 8008f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f98:	f000 b920 	b.w	80091dc <__malloc_unlock>
 8008f9c:	42a3      	cmp	r3, r4
 8008f9e:	d908      	bls.n	8008fb2 <_free_r+0x46>
 8008fa0:	6825      	ldr	r5, [r4, #0]
 8008fa2:	1961      	adds	r1, r4, r5
 8008fa4:	428b      	cmp	r3, r1
 8008fa6:	bf01      	itttt	eq
 8008fa8:	6819      	ldreq	r1, [r3, #0]
 8008faa:	685b      	ldreq	r3, [r3, #4]
 8008fac:	1949      	addeq	r1, r1, r5
 8008fae:	6021      	streq	r1, [r4, #0]
 8008fb0:	e7ed      	b.n	8008f8e <_free_r+0x22>
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	b10b      	cbz	r3, 8008fbc <_free_r+0x50>
 8008fb8:	42a3      	cmp	r3, r4
 8008fba:	d9fa      	bls.n	8008fb2 <_free_r+0x46>
 8008fbc:	6811      	ldr	r1, [r2, #0]
 8008fbe:	1855      	adds	r5, r2, r1
 8008fc0:	42a5      	cmp	r5, r4
 8008fc2:	d10b      	bne.n	8008fdc <_free_r+0x70>
 8008fc4:	6824      	ldr	r4, [r4, #0]
 8008fc6:	4421      	add	r1, r4
 8008fc8:	1854      	adds	r4, r2, r1
 8008fca:	42a3      	cmp	r3, r4
 8008fcc:	6011      	str	r1, [r2, #0]
 8008fce:	d1e0      	bne.n	8008f92 <_free_r+0x26>
 8008fd0:	681c      	ldr	r4, [r3, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	6053      	str	r3, [r2, #4]
 8008fd6:	4421      	add	r1, r4
 8008fd8:	6011      	str	r1, [r2, #0]
 8008fda:	e7da      	b.n	8008f92 <_free_r+0x26>
 8008fdc:	d902      	bls.n	8008fe4 <_free_r+0x78>
 8008fde:	230c      	movs	r3, #12
 8008fe0:	6003      	str	r3, [r0, #0]
 8008fe2:	e7d6      	b.n	8008f92 <_free_r+0x26>
 8008fe4:	6825      	ldr	r5, [r4, #0]
 8008fe6:	1961      	adds	r1, r4, r5
 8008fe8:	428b      	cmp	r3, r1
 8008fea:	bf04      	itt	eq
 8008fec:	6819      	ldreq	r1, [r3, #0]
 8008fee:	685b      	ldreq	r3, [r3, #4]
 8008ff0:	6063      	str	r3, [r4, #4]
 8008ff2:	bf04      	itt	eq
 8008ff4:	1949      	addeq	r1, r1, r5
 8008ff6:	6021      	streq	r1, [r4, #0]
 8008ff8:	6054      	str	r4, [r2, #4]
 8008ffa:	e7ca      	b.n	8008f92 <_free_r+0x26>
 8008ffc:	b003      	add	sp, #12
 8008ffe:	bd30      	pop	{r4, r5, pc}
 8009000:	2001c654 	.word	0x2001c654

08009004 <sbrk_aligned>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	4e0e      	ldr	r6, [pc, #56]	; (8009040 <sbrk_aligned+0x3c>)
 8009008:	460c      	mov	r4, r1
 800900a:	6831      	ldr	r1, [r6, #0]
 800900c:	4605      	mov	r5, r0
 800900e:	b911      	cbnz	r1, 8009016 <sbrk_aligned+0x12>
 8009010:	f000 f88c 	bl	800912c <_sbrk_r>
 8009014:	6030      	str	r0, [r6, #0]
 8009016:	4621      	mov	r1, r4
 8009018:	4628      	mov	r0, r5
 800901a:	f000 f887 	bl	800912c <_sbrk_r>
 800901e:	1c43      	adds	r3, r0, #1
 8009020:	d00a      	beq.n	8009038 <sbrk_aligned+0x34>
 8009022:	1cc4      	adds	r4, r0, #3
 8009024:	f024 0403 	bic.w	r4, r4, #3
 8009028:	42a0      	cmp	r0, r4
 800902a:	d007      	beq.n	800903c <sbrk_aligned+0x38>
 800902c:	1a21      	subs	r1, r4, r0
 800902e:	4628      	mov	r0, r5
 8009030:	f000 f87c 	bl	800912c <_sbrk_r>
 8009034:	3001      	adds	r0, #1
 8009036:	d101      	bne.n	800903c <sbrk_aligned+0x38>
 8009038:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800903c:	4620      	mov	r0, r4
 800903e:	bd70      	pop	{r4, r5, r6, pc}
 8009040:	2001c658 	.word	0x2001c658

08009044 <_malloc_r>:
 8009044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009048:	1ccd      	adds	r5, r1, #3
 800904a:	f025 0503 	bic.w	r5, r5, #3
 800904e:	3508      	adds	r5, #8
 8009050:	2d0c      	cmp	r5, #12
 8009052:	bf38      	it	cc
 8009054:	250c      	movcc	r5, #12
 8009056:	2d00      	cmp	r5, #0
 8009058:	4607      	mov	r7, r0
 800905a:	db01      	blt.n	8009060 <_malloc_r+0x1c>
 800905c:	42a9      	cmp	r1, r5
 800905e:	d905      	bls.n	800906c <_malloc_r+0x28>
 8009060:	230c      	movs	r3, #12
 8009062:	603b      	str	r3, [r7, #0]
 8009064:	2600      	movs	r6, #0
 8009066:	4630      	mov	r0, r6
 8009068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800906c:	4e2e      	ldr	r6, [pc, #184]	; (8009128 <_malloc_r+0xe4>)
 800906e:	f000 f8af 	bl	80091d0 <__malloc_lock>
 8009072:	6833      	ldr	r3, [r6, #0]
 8009074:	461c      	mov	r4, r3
 8009076:	bb34      	cbnz	r4, 80090c6 <_malloc_r+0x82>
 8009078:	4629      	mov	r1, r5
 800907a:	4638      	mov	r0, r7
 800907c:	f7ff ffc2 	bl	8009004 <sbrk_aligned>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	4604      	mov	r4, r0
 8009084:	d14d      	bne.n	8009122 <_malloc_r+0xde>
 8009086:	6834      	ldr	r4, [r6, #0]
 8009088:	4626      	mov	r6, r4
 800908a:	2e00      	cmp	r6, #0
 800908c:	d140      	bne.n	8009110 <_malloc_r+0xcc>
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	4631      	mov	r1, r6
 8009092:	4638      	mov	r0, r7
 8009094:	eb04 0803 	add.w	r8, r4, r3
 8009098:	f000 f848 	bl	800912c <_sbrk_r>
 800909c:	4580      	cmp	r8, r0
 800909e:	d13a      	bne.n	8009116 <_malloc_r+0xd2>
 80090a0:	6821      	ldr	r1, [r4, #0]
 80090a2:	3503      	adds	r5, #3
 80090a4:	1a6d      	subs	r5, r5, r1
 80090a6:	f025 0503 	bic.w	r5, r5, #3
 80090aa:	3508      	adds	r5, #8
 80090ac:	2d0c      	cmp	r5, #12
 80090ae:	bf38      	it	cc
 80090b0:	250c      	movcc	r5, #12
 80090b2:	4629      	mov	r1, r5
 80090b4:	4638      	mov	r0, r7
 80090b6:	f7ff ffa5 	bl	8009004 <sbrk_aligned>
 80090ba:	3001      	adds	r0, #1
 80090bc:	d02b      	beq.n	8009116 <_malloc_r+0xd2>
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	442b      	add	r3, r5
 80090c2:	6023      	str	r3, [r4, #0]
 80090c4:	e00e      	b.n	80090e4 <_malloc_r+0xa0>
 80090c6:	6822      	ldr	r2, [r4, #0]
 80090c8:	1b52      	subs	r2, r2, r5
 80090ca:	d41e      	bmi.n	800910a <_malloc_r+0xc6>
 80090cc:	2a0b      	cmp	r2, #11
 80090ce:	d916      	bls.n	80090fe <_malloc_r+0xba>
 80090d0:	1961      	adds	r1, r4, r5
 80090d2:	42a3      	cmp	r3, r4
 80090d4:	6025      	str	r5, [r4, #0]
 80090d6:	bf18      	it	ne
 80090d8:	6059      	strne	r1, [r3, #4]
 80090da:	6863      	ldr	r3, [r4, #4]
 80090dc:	bf08      	it	eq
 80090de:	6031      	streq	r1, [r6, #0]
 80090e0:	5162      	str	r2, [r4, r5]
 80090e2:	604b      	str	r3, [r1, #4]
 80090e4:	4638      	mov	r0, r7
 80090e6:	f104 060b 	add.w	r6, r4, #11
 80090ea:	f000 f877 	bl	80091dc <__malloc_unlock>
 80090ee:	f026 0607 	bic.w	r6, r6, #7
 80090f2:	1d23      	adds	r3, r4, #4
 80090f4:	1af2      	subs	r2, r6, r3
 80090f6:	d0b6      	beq.n	8009066 <_malloc_r+0x22>
 80090f8:	1b9b      	subs	r3, r3, r6
 80090fa:	50a3      	str	r3, [r4, r2]
 80090fc:	e7b3      	b.n	8009066 <_malloc_r+0x22>
 80090fe:	6862      	ldr	r2, [r4, #4]
 8009100:	42a3      	cmp	r3, r4
 8009102:	bf0c      	ite	eq
 8009104:	6032      	streq	r2, [r6, #0]
 8009106:	605a      	strne	r2, [r3, #4]
 8009108:	e7ec      	b.n	80090e4 <_malloc_r+0xa0>
 800910a:	4623      	mov	r3, r4
 800910c:	6864      	ldr	r4, [r4, #4]
 800910e:	e7b2      	b.n	8009076 <_malloc_r+0x32>
 8009110:	4634      	mov	r4, r6
 8009112:	6876      	ldr	r6, [r6, #4]
 8009114:	e7b9      	b.n	800908a <_malloc_r+0x46>
 8009116:	230c      	movs	r3, #12
 8009118:	603b      	str	r3, [r7, #0]
 800911a:	4638      	mov	r0, r7
 800911c:	f000 f85e 	bl	80091dc <__malloc_unlock>
 8009120:	e7a1      	b.n	8009066 <_malloc_r+0x22>
 8009122:	6025      	str	r5, [r4, #0]
 8009124:	e7de      	b.n	80090e4 <_malloc_r+0xa0>
 8009126:	bf00      	nop
 8009128:	2001c654 	.word	0x2001c654

0800912c <_sbrk_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d06      	ldr	r5, [pc, #24]	; (8009148 <_sbrk_r+0x1c>)
 8009130:	2300      	movs	r3, #0
 8009132:	4604      	mov	r4, r0
 8009134:	4608      	mov	r0, r1
 8009136:	602b      	str	r3, [r5, #0]
 8009138:	f7f9 fa66 	bl	8002608 <_sbrk>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d102      	bne.n	8009146 <_sbrk_r+0x1a>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	b103      	cbz	r3, 8009146 <_sbrk_r+0x1a>
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	2001c65c 	.word	0x2001c65c

0800914c <__assert_func>:
 800914c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800914e:	4614      	mov	r4, r2
 8009150:	461a      	mov	r2, r3
 8009152:	4b09      	ldr	r3, [pc, #36]	; (8009178 <__assert_func+0x2c>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4605      	mov	r5, r0
 8009158:	68d8      	ldr	r0, [r3, #12]
 800915a:	b14c      	cbz	r4, 8009170 <__assert_func+0x24>
 800915c:	4b07      	ldr	r3, [pc, #28]	; (800917c <__assert_func+0x30>)
 800915e:	9100      	str	r1, [sp, #0]
 8009160:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009164:	4906      	ldr	r1, [pc, #24]	; (8009180 <__assert_func+0x34>)
 8009166:	462b      	mov	r3, r5
 8009168:	f000 f80e 	bl	8009188 <fiprintf>
 800916c:	f000 fa64 	bl	8009638 <abort>
 8009170:	4b04      	ldr	r3, [pc, #16]	; (8009184 <__assert_func+0x38>)
 8009172:	461c      	mov	r4, r3
 8009174:	e7f3      	b.n	800915e <__assert_func+0x12>
 8009176:	bf00      	nop
 8009178:	2000002c 	.word	0x2000002c
 800917c:	0801e4a4 	.word	0x0801e4a4
 8009180:	0801e4b1 	.word	0x0801e4b1
 8009184:	0801e4df 	.word	0x0801e4df

08009188 <fiprintf>:
 8009188:	b40e      	push	{r1, r2, r3}
 800918a:	b503      	push	{r0, r1, lr}
 800918c:	4601      	mov	r1, r0
 800918e:	ab03      	add	r3, sp, #12
 8009190:	4805      	ldr	r0, [pc, #20]	; (80091a8 <fiprintf+0x20>)
 8009192:	f853 2b04 	ldr.w	r2, [r3], #4
 8009196:	6800      	ldr	r0, [r0, #0]
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	f000 f84f 	bl	800923c <_vfiprintf_r>
 800919e:	b002      	add	sp, #8
 80091a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091a4:	b003      	add	sp, #12
 80091a6:	4770      	bx	lr
 80091a8:	2000002c 	.word	0x2000002c

080091ac <__ascii_mbtowc>:
 80091ac:	b082      	sub	sp, #8
 80091ae:	b901      	cbnz	r1, 80091b2 <__ascii_mbtowc+0x6>
 80091b0:	a901      	add	r1, sp, #4
 80091b2:	b142      	cbz	r2, 80091c6 <__ascii_mbtowc+0x1a>
 80091b4:	b14b      	cbz	r3, 80091ca <__ascii_mbtowc+0x1e>
 80091b6:	7813      	ldrb	r3, [r2, #0]
 80091b8:	600b      	str	r3, [r1, #0]
 80091ba:	7812      	ldrb	r2, [r2, #0]
 80091bc:	1e10      	subs	r0, r2, #0
 80091be:	bf18      	it	ne
 80091c0:	2001      	movne	r0, #1
 80091c2:	b002      	add	sp, #8
 80091c4:	4770      	bx	lr
 80091c6:	4610      	mov	r0, r2
 80091c8:	e7fb      	b.n	80091c2 <__ascii_mbtowc+0x16>
 80091ca:	f06f 0001 	mvn.w	r0, #1
 80091ce:	e7f8      	b.n	80091c2 <__ascii_mbtowc+0x16>

080091d0 <__malloc_lock>:
 80091d0:	4801      	ldr	r0, [pc, #4]	; (80091d8 <__malloc_lock+0x8>)
 80091d2:	f000 bbf1 	b.w	80099b8 <__retarget_lock_acquire_recursive>
 80091d6:	bf00      	nop
 80091d8:	2001c660 	.word	0x2001c660

080091dc <__malloc_unlock>:
 80091dc:	4801      	ldr	r0, [pc, #4]	; (80091e4 <__malloc_unlock+0x8>)
 80091de:	f000 bbec 	b.w	80099ba <__retarget_lock_release_recursive>
 80091e2:	bf00      	nop
 80091e4:	2001c660 	.word	0x2001c660

080091e8 <__sfputc_r>:
 80091e8:	6893      	ldr	r3, [r2, #8]
 80091ea:	3b01      	subs	r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	b410      	push	{r4}
 80091f0:	6093      	str	r3, [r2, #8]
 80091f2:	da08      	bge.n	8009206 <__sfputc_r+0x1e>
 80091f4:	6994      	ldr	r4, [r2, #24]
 80091f6:	42a3      	cmp	r3, r4
 80091f8:	db01      	blt.n	80091fe <__sfputc_r+0x16>
 80091fa:	290a      	cmp	r1, #10
 80091fc:	d103      	bne.n	8009206 <__sfputc_r+0x1e>
 80091fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009202:	f000 b94b 	b.w	800949c <__swbuf_r>
 8009206:	6813      	ldr	r3, [r2, #0]
 8009208:	1c58      	adds	r0, r3, #1
 800920a:	6010      	str	r0, [r2, #0]
 800920c:	7019      	strb	r1, [r3, #0]
 800920e:	4608      	mov	r0, r1
 8009210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009214:	4770      	bx	lr

08009216 <__sfputs_r>:
 8009216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009218:	4606      	mov	r6, r0
 800921a:	460f      	mov	r7, r1
 800921c:	4614      	mov	r4, r2
 800921e:	18d5      	adds	r5, r2, r3
 8009220:	42ac      	cmp	r4, r5
 8009222:	d101      	bne.n	8009228 <__sfputs_r+0x12>
 8009224:	2000      	movs	r0, #0
 8009226:	e007      	b.n	8009238 <__sfputs_r+0x22>
 8009228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800922c:	463a      	mov	r2, r7
 800922e:	4630      	mov	r0, r6
 8009230:	f7ff ffda 	bl	80091e8 <__sfputc_r>
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	d1f3      	bne.n	8009220 <__sfputs_r+0xa>
 8009238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800923c <_vfiprintf_r>:
 800923c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009240:	460d      	mov	r5, r1
 8009242:	b09d      	sub	sp, #116	; 0x74
 8009244:	4614      	mov	r4, r2
 8009246:	4698      	mov	r8, r3
 8009248:	4606      	mov	r6, r0
 800924a:	b118      	cbz	r0, 8009254 <_vfiprintf_r+0x18>
 800924c:	6983      	ldr	r3, [r0, #24]
 800924e:	b90b      	cbnz	r3, 8009254 <_vfiprintf_r+0x18>
 8009250:	f000 fb14 	bl	800987c <__sinit>
 8009254:	4b89      	ldr	r3, [pc, #548]	; (800947c <_vfiprintf_r+0x240>)
 8009256:	429d      	cmp	r5, r3
 8009258:	d11b      	bne.n	8009292 <_vfiprintf_r+0x56>
 800925a:	6875      	ldr	r5, [r6, #4]
 800925c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800925e:	07d9      	lsls	r1, r3, #31
 8009260:	d405      	bmi.n	800926e <_vfiprintf_r+0x32>
 8009262:	89ab      	ldrh	r3, [r5, #12]
 8009264:	059a      	lsls	r2, r3, #22
 8009266:	d402      	bmi.n	800926e <_vfiprintf_r+0x32>
 8009268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800926a:	f000 fba5 	bl	80099b8 <__retarget_lock_acquire_recursive>
 800926e:	89ab      	ldrh	r3, [r5, #12]
 8009270:	071b      	lsls	r3, r3, #28
 8009272:	d501      	bpl.n	8009278 <_vfiprintf_r+0x3c>
 8009274:	692b      	ldr	r3, [r5, #16]
 8009276:	b9eb      	cbnz	r3, 80092b4 <_vfiprintf_r+0x78>
 8009278:	4629      	mov	r1, r5
 800927a:	4630      	mov	r0, r6
 800927c:	f000 f96e 	bl	800955c <__swsetup_r>
 8009280:	b1c0      	cbz	r0, 80092b4 <_vfiprintf_r+0x78>
 8009282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009284:	07dc      	lsls	r4, r3, #31
 8009286:	d50e      	bpl.n	80092a6 <_vfiprintf_r+0x6a>
 8009288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800928c:	b01d      	add	sp, #116	; 0x74
 800928e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009292:	4b7b      	ldr	r3, [pc, #492]	; (8009480 <_vfiprintf_r+0x244>)
 8009294:	429d      	cmp	r5, r3
 8009296:	d101      	bne.n	800929c <_vfiprintf_r+0x60>
 8009298:	68b5      	ldr	r5, [r6, #8]
 800929a:	e7df      	b.n	800925c <_vfiprintf_r+0x20>
 800929c:	4b79      	ldr	r3, [pc, #484]	; (8009484 <_vfiprintf_r+0x248>)
 800929e:	429d      	cmp	r5, r3
 80092a0:	bf08      	it	eq
 80092a2:	68f5      	ldreq	r5, [r6, #12]
 80092a4:	e7da      	b.n	800925c <_vfiprintf_r+0x20>
 80092a6:	89ab      	ldrh	r3, [r5, #12]
 80092a8:	0598      	lsls	r0, r3, #22
 80092aa:	d4ed      	bmi.n	8009288 <_vfiprintf_r+0x4c>
 80092ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ae:	f000 fb84 	bl	80099ba <__retarget_lock_release_recursive>
 80092b2:	e7e9      	b.n	8009288 <_vfiprintf_r+0x4c>
 80092b4:	2300      	movs	r3, #0
 80092b6:	9309      	str	r3, [sp, #36]	; 0x24
 80092b8:	2320      	movs	r3, #32
 80092ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092be:	f8cd 800c 	str.w	r8, [sp, #12]
 80092c2:	2330      	movs	r3, #48	; 0x30
 80092c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009488 <_vfiprintf_r+0x24c>
 80092c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092cc:	f04f 0901 	mov.w	r9, #1
 80092d0:	4623      	mov	r3, r4
 80092d2:	469a      	mov	sl, r3
 80092d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092d8:	b10a      	cbz	r2, 80092de <_vfiprintf_r+0xa2>
 80092da:	2a25      	cmp	r2, #37	; 0x25
 80092dc:	d1f9      	bne.n	80092d2 <_vfiprintf_r+0x96>
 80092de:	ebba 0b04 	subs.w	fp, sl, r4
 80092e2:	d00b      	beq.n	80092fc <_vfiprintf_r+0xc0>
 80092e4:	465b      	mov	r3, fp
 80092e6:	4622      	mov	r2, r4
 80092e8:	4629      	mov	r1, r5
 80092ea:	4630      	mov	r0, r6
 80092ec:	f7ff ff93 	bl	8009216 <__sfputs_r>
 80092f0:	3001      	adds	r0, #1
 80092f2:	f000 80aa 	beq.w	800944a <_vfiprintf_r+0x20e>
 80092f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092f8:	445a      	add	r2, fp
 80092fa:	9209      	str	r2, [sp, #36]	; 0x24
 80092fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 80a2 	beq.w	800944a <_vfiprintf_r+0x20e>
 8009306:	2300      	movs	r3, #0
 8009308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800930c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009310:	f10a 0a01 	add.w	sl, sl, #1
 8009314:	9304      	str	r3, [sp, #16]
 8009316:	9307      	str	r3, [sp, #28]
 8009318:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800931c:	931a      	str	r3, [sp, #104]	; 0x68
 800931e:	4654      	mov	r4, sl
 8009320:	2205      	movs	r2, #5
 8009322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009326:	4858      	ldr	r0, [pc, #352]	; (8009488 <_vfiprintf_r+0x24c>)
 8009328:	f7f6 ffda 	bl	80002e0 <memchr>
 800932c:	9a04      	ldr	r2, [sp, #16]
 800932e:	b9d8      	cbnz	r0, 8009368 <_vfiprintf_r+0x12c>
 8009330:	06d1      	lsls	r1, r2, #27
 8009332:	bf44      	itt	mi
 8009334:	2320      	movmi	r3, #32
 8009336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800933a:	0713      	lsls	r3, r2, #28
 800933c:	bf44      	itt	mi
 800933e:	232b      	movmi	r3, #43	; 0x2b
 8009340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009344:	f89a 3000 	ldrb.w	r3, [sl]
 8009348:	2b2a      	cmp	r3, #42	; 0x2a
 800934a:	d015      	beq.n	8009378 <_vfiprintf_r+0x13c>
 800934c:	9a07      	ldr	r2, [sp, #28]
 800934e:	4654      	mov	r4, sl
 8009350:	2000      	movs	r0, #0
 8009352:	f04f 0c0a 	mov.w	ip, #10
 8009356:	4621      	mov	r1, r4
 8009358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800935c:	3b30      	subs	r3, #48	; 0x30
 800935e:	2b09      	cmp	r3, #9
 8009360:	d94e      	bls.n	8009400 <_vfiprintf_r+0x1c4>
 8009362:	b1b0      	cbz	r0, 8009392 <_vfiprintf_r+0x156>
 8009364:	9207      	str	r2, [sp, #28]
 8009366:	e014      	b.n	8009392 <_vfiprintf_r+0x156>
 8009368:	eba0 0308 	sub.w	r3, r0, r8
 800936c:	fa09 f303 	lsl.w	r3, r9, r3
 8009370:	4313      	orrs	r3, r2
 8009372:	9304      	str	r3, [sp, #16]
 8009374:	46a2      	mov	sl, r4
 8009376:	e7d2      	b.n	800931e <_vfiprintf_r+0xe2>
 8009378:	9b03      	ldr	r3, [sp, #12]
 800937a:	1d19      	adds	r1, r3, #4
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	9103      	str	r1, [sp, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	bfbb      	ittet	lt
 8009384:	425b      	neglt	r3, r3
 8009386:	f042 0202 	orrlt.w	r2, r2, #2
 800938a:	9307      	strge	r3, [sp, #28]
 800938c:	9307      	strlt	r3, [sp, #28]
 800938e:	bfb8      	it	lt
 8009390:	9204      	strlt	r2, [sp, #16]
 8009392:	7823      	ldrb	r3, [r4, #0]
 8009394:	2b2e      	cmp	r3, #46	; 0x2e
 8009396:	d10c      	bne.n	80093b2 <_vfiprintf_r+0x176>
 8009398:	7863      	ldrb	r3, [r4, #1]
 800939a:	2b2a      	cmp	r3, #42	; 0x2a
 800939c:	d135      	bne.n	800940a <_vfiprintf_r+0x1ce>
 800939e:	9b03      	ldr	r3, [sp, #12]
 80093a0:	1d1a      	adds	r2, r3, #4
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	9203      	str	r2, [sp, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	bfb8      	it	lt
 80093aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80093ae:	3402      	adds	r4, #2
 80093b0:	9305      	str	r3, [sp, #20]
 80093b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009498 <_vfiprintf_r+0x25c>
 80093b6:	7821      	ldrb	r1, [r4, #0]
 80093b8:	2203      	movs	r2, #3
 80093ba:	4650      	mov	r0, sl
 80093bc:	f7f6 ff90 	bl	80002e0 <memchr>
 80093c0:	b140      	cbz	r0, 80093d4 <_vfiprintf_r+0x198>
 80093c2:	2340      	movs	r3, #64	; 0x40
 80093c4:	eba0 000a 	sub.w	r0, r0, sl
 80093c8:	fa03 f000 	lsl.w	r0, r3, r0
 80093cc:	9b04      	ldr	r3, [sp, #16]
 80093ce:	4303      	orrs	r3, r0
 80093d0:	3401      	adds	r4, #1
 80093d2:	9304      	str	r3, [sp, #16]
 80093d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093d8:	482c      	ldr	r0, [pc, #176]	; (800948c <_vfiprintf_r+0x250>)
 80093da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093de:	2206      	movs	r2, #6
 80093e0:	f7f6 ff7e 	bl	80002e0 <memchr>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d03f      	beq.n	8009468 <_vfiprintf_r+0x22c>
 80093e8:	4b29      	ldr	r3, [pc, #164]	; (8009490 <_vfiprintf_r+0x254>)
 80093ea:	bb1b      	cbnz	r3, 8009434 <_vfiprintf_r+0x1f8>
 80093ec:	9b03      	ldr	r3, [sp, #12]
 80093ee:	3307      	adds	r3, #7
 80093f0:	f023 0307 	bic.w	r3, r3, #7
 80093f4:	3308      	adds	r3, #8
 80093f6:	9303      	str	r3, [sp, #12]
 80093f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093fa:	443b      	add	r3, r7
 80093fc:	9309      	str	r3, [sp, #36]	; 0x24
 80093fe:	e767      	b.n	80092d0 <_vfiprintf_r+0x94>
 8009400:	fb0c 3202 	mla	r2, ip, r2, r3
 8009404:	460c      	mov	r4, r1
 8009406:	2001      	movs	r0, #1
 8009408:	e7a5      	b.n	8009356 <_vfiprintf_r+0x11a>
 800940a:	2300      	movs	r3, #0
 800940c:	3401      	adds	r4, #1
 800940e:	9305      	str	r3, [sp, #20]
 8009410:	4619      	mov	r1, r3
 8009412:	f04f 0c0a 	mov.w	ip, #10
 8009416:	4620      	mov	r0, r4
 8009418:	f810 2b01 	ldrb.w	r2, [r0], #1
 800941c:	3a30      	subs	r2, #48	; 0x30
 800941e:	2a09      	cmp	r2, #9
 8009420:	d903      	bls.n	800942a <_vfiprintf_r+0x1ee>
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0c5      	beq.n	80093b2 <_vfiprintf_r+0x176>
 8009426:	9105      	str	r1, [sp, #20]
 8009428:	e7c3      	b.n	80093b2 <_vfiprintf_r+0x176>
 800942a:	fb0c 2101 	mla	r1, ip, r1, r2
 800942e:	4604      	mov	r4, r0
 8009430:	2301      	movs	r3, #1
 8009432:	e7f0      	b.n	8009416 <_vfiprintf_r+0x1da>
 8009434:	ab03      	add	r3, sp, #12
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	462a      	mov	r2, r5
 800943a:	4b16      	ldr	r3, [pc, #88]	; (8009494 <_vfiprintf_r+0x258>)
 800943c:	a904      	add	r1, sp, #16
 800943e:	4630      	mov	r0, r6
 8009440:	f7fd ff9c 	bl	800737c <_printf_float>
 8009444:	4607      	mov	r7, r0
 8009446:	1c78      	adds	r0, r7, #1
 8009448:	d1d6      	bne.n	80093f8 <_vfiprintf_r+0x1bc>
 800944a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800944c:	07d9      	lsls	r1, r3, #31
 800944e:	d405      	bmi.n	800945c <_vfiprintf_r+0x220>
 8009450:	89ab      	ldrh	r3, [r5, #12]
 8009452:	059a      	lsls	r2, r3, #22
 8009454:	d402      	bmi.n	800945c <_vfiprintf_r+0x220>
 8009456:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009458:	f000 faaf 	bl	80099ba <__retarget_lock_release_recursive>
 800945c:	89ab      	ldrh	r3, [r5, #12]
 800945e:	065b      	lsls	r3, r3, #25
 8009460:	f53f af12 	bmi.w	8009288 <_vfiprintf_r+0x4c>
 8009464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009466:	e711      	b.n	800928c <_vfiprintf_r+0x50>
 8009468:	ab03      	add	r3, sp, #12
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	462a      	mov	r2, r5
 800946e:	4b09      	ldr	r3, [pc, #36]	; (8009494 <_vfiprintf_r+0x258>)
 8009470:	a904      	add	r1, sp, #16
 8009472:	4630      	mov	r0, r6
 8009474:	f7fe fa26 	bl	80078c4 <_printf_i>
 8009478:	e7e4      	b.n	8009444 <_vfiprintf_r+0x208>
 800947a:	bf00      	nop
 800947c:	0801e61c 	.word	0x0801e61c
 8009480:	0801e63c 	.word	0x0801e63c
 8009484:	0801e5fc 	.word	0x0801e5fc
 8009488:	0801e4ea 	.word	0x0801e4ea
 800948c:	0801e4f4 	.word	0x0801e4f4
 8009490:	0800737d 	.word	0x0800737d
 8009494:	08009217 	.word	0x08009217
 8009498:	0801e4f0 	.word	0x0801e4f0

0800949c <__swbuf_r>:
 800949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949e:	460e      	mov	r6, r1
 80094a0:	4614      	mov	r4, r2
 80094a2:	4605      	mov	r5, r0
 80094a4:	b118      	cbz	r0, 80094ae <__swbuf_r+0x12>
 80094a6:	6983      	ldr	r3, [r0, #24]
 80094a8:	b90b      	cbnz	r3, 80094ae <__swbuf_r+0x12>
 80094aa:	f000 f9e7 	bl	800987c <__sinit>
 80094ae:	4b21      	ldr	r3, [pc, #132]	; (8009534 <__swbuf_r+0x98>)
 80094b0:	429c      	cmp	r4, r3
 80094b2:	d12b      	bne.n	800950c <__swbuf_r+0x70>
 80094b4:	686c      	ldr	r4, [r5, #4]
 80094b6:	69a3      	ldr	r3, [r4, #24]
 80094b8:	60a3      	str	r3, [r4, #8]
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	071a      	lsls	r2, r3, #28
 80094be:	d52f      	bpl.n	8009520 <__swbuf_r+0x84>
 80094c0:	6923      	ldr	r3, [r4, #16]
 80094c2:	b36b      	cbz	r3, 8009520 <__swbuf_r+0x84>
 80094c4:	6923      	ldr	r3, [r4, #16]
 80094c6:	6820      	ldr	r0, [r4, #0]
 80094c8:	1ac0      	subs	r0, r0, r3
 80094ca:	6963      	ldr	r3, [r4, #20]
 80094cc:	b2f6      	uxtb	r6, r6
 80094ce:	4283      	cmp	r3, r0
 80094d0:	4637      	mov	r7, r6
 80094d2:	dc04      	bgt.n	80094de <__swbuf_r+0x42>
 80094d4:	4621      	mov	r1, r4
 80094d6:	4628      	mov	r0, r5
 80094d8:	f000 f93c 	bl	8009754 <_fflush_r>
 80094dc:	bb30      	cbnz	r0, 800952c <__swbuf_r+0x90>
 80094de:	68a3      	ldr	r3, [r4, #8]
 80094e0:	3b01      	subs	r3, #1
 80094e2:	60a3      	str	r3, [r4, #8]
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	1c5a      	adds	r2, r3, #1
 80094e8:	6022      	str	r2, [r4, #0]
 80094ea:	701e      	strb	r6, [r3, #0]
 80094ec:	6963      	ldr	r3, [r4, #20]
 80094ee:	3001      	adds	r0, #1
 80094f0:	4283      	cmp	r3, r0
 80094f2:	d004      	beq.n	80094fe <__swbuf_r+0x62>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	07db      	lsls	r3, r3, #31
 80094f8:	d506      	bpl.n	8009508 <__swbuf_r+0x6c>
 80094fa:	2e0a      	cmp	r6, #10
 80094fc:	d104      	bne.n	8009508 <__swbuf_r+0x6c>
 80094fe:	4621      	mov	r1, r4
 8009500:	4628      	mov	r0, r5
 8009502:	f000 f927 	bl	8009754 <_fflush_r>
 8009506:	b988      	cbnz	r0, 800952c <__swbuf_r+0x90>
 8009508:	4638      	mov	r0, r7
 800950a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800950c:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <__swbuf_r+0x9c>)
 800950e:	429c      	cmp	r4, r3
 8009510:	d101      	bne.n	8009516 <__swbuf_r+0x7a>
 8009512:	68ac      	ldr	r4, [r5, #8]
 8009514:	e7cf      	b.n	80094b6 <__swbuf_r+0x1a>
 8009516:	4b09      	ldr	r3, [pc, #36]	; (800953c <__swbuf_r+0xa0>)
 8009518:	429c      	cmp	r4, r3
 800951a:	bf08      	it	eq
 800951c:	68ec      	ldreq	r4, [r5, #12]
 800951e:	e7ca      	b.n	80094b6 <__swbuf_r+0x1a>
 8009520:	4621      	mov	r1, r4
 8009522:	4628      	mov	r0, r5
 8009524:	f000 f81a 	bl	800955c <__swsetup_r>
 8009528:	2800      	cmp	r0, #0
 800952a:	d0cb      	beq.n	80094c4 <__swbuf_r+0x28>
 800952c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009530:	e7ea      	b.n	8009508 <__swbuf_r+0x6c>
 8009532:	bf00      	nop
 8009534:	0801e61c 	.word	0x0801e61c
 8009538:	0801e63c 	.word	0x0801e63c
 800953c:	0801e5fc 	.word	0x0801e5fc

08009540 <__ascii_wctomb>:
 8009540:	b149      	cbz	r1, 8009556 <__ascii_wctomb+0x16>
 8009542:	2aff      	cmp	r2, #255	; 0xff
 8009544:	bf85      	ittet	hi
 8009546:	238a      	movhi	r3, #138	; 0x8a
 8009548:	6003      	strhi	r3, [r0, #0]
 800954a:	700a      	strbls	r2, [r1, #0]
 800954c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009550:	bf98      	it	ls
 8009552:	2001      	movls	r0, #1
 8009554:	4770      	bx	lr
 8009556:	4608      	mov	r0, r1
 8009558:	4770      	bx	lr
	...

0800955c <__swsetup_r>:
 800955c:	4b32      	ldr	r3, [pc, #200]	; (8009628 <__swsetup_r+0xcc>)
 800955e:	b570      	push	{r4, r5, r6, lr}
 8009560:	681d      	ldr	r5, [r3, #0]
 8009562:	4606      	mov	r6, r0
 8009564:	460c      	mov	r4, r1
 8009566:	b125      	cbz	r5, 8009572 <__swsetup_r+0x16>
 8009568:	69ab      	ldr	r3, [r5, #24]
 800956a:	b913      	cbnz	r3, 8009572 <__swsetup_r+0x16>
 800956c:	4628      	mov	r0, r5
 800956e:	f000 f985 	bl	800987c <__sinit>
 8009572:	4b2e      	ldr	r3, [pc, #184]	; (800962c <__swsetup_r+0xd0>)
 8009574:	429c      	cmp	r4, r3
 8009576:	d10f      	bne.n	8009598 <__swsetup_r+0x3c>
 8009578:	686c      	ldr	r4, [r5, #4]
 800957a:	89a3      	ldrh	r3, [r4, #12]
 800957c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009580:	0719      	lsls	r1, r3, #28
 8009582:	d42c      	bmi.n	80095de <__swsetup_r+0x82>
 8009584:	06dd      	lsls	r5, r3, #27
 8009586:	d411      	bmi.n	80095ac <__swsetup_r+0x50>
 8009588:	2309      	movs	r3, #9
 800958a:	6033      	str	r3, [r6, #0]
 800958c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009590:	81a3      	strh	r3, [r4, #12]
 8009592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009596:	e03e      	b.n	8009616 <__swsetup_r+0xba>
 8009598:	4b25      	ldr	r3, [pc, #148]	; (8009630 <__swsetup_r+0xd4>)
 800959a:	429c      	cmp	r4, r3
 800959c:	d101      	bne.n	80095a2 <__swsetup_r+0x46>
 800959e:	68ac      	ldr	r4, [r5, #8]
 80095a0:	e7eb      	b.n	800957a <__swsetup_r+0x1e>
 80095a2:	4b24      	ldr	r3, [pc, #144]	; (8009634 <__swsetup_r+0xd8>)
 80095a4:	429c      	cmp	r4, r3
 80095a6:	bf08      	it	eq
 80095a8:	68ec      	ldreq	r4, [r5, #12]
 80095aa:	e7e6      	b.n	800957a <__swsetup_r+0x1e>
 80095ac:	0758      	lsls	r0, r3, #29
 80095ae:	d512      	bpl.n	80095d6 <__swsetup_r+0x7a>
 80095b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095b2:	b141      	cbz	r1, 80095c6 <__swsetup_r+0x6a>
 80095b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095b8:	4299      	cmp	r1, r3
 80095ba:	d002      	beq.n	80095c2 <__swsetup_r+0x66>
 80095bc:	4630      	mov	r0, r6
 80095be:	f7ff fcd5 	bl	8008f6c <_free_r>
 80095c2:	2300      	movs	r3, #0
 80095c4:	6363      	str	r3, [r4, #52]	; 0x34
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095cc:	81a3      	strh	r3, [r4, #12]
 80095ce:	2300      	movs	r3, #0
 80095d0:	6063      	str	r3, [r4, #4]
 80095d2:	6923      	ldr	r3, [r4, #16]
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	f043 0308 	orr.w	r3, r3, #8
 80095dc:	81a3      	strh	r3, [r4, #12]
 80095de:	6923      	ldr	r3, [r4, #16]
 80095e0:	b94b      	cbnz	r3, 80095f6 <__swsetup_r+0x9a>
 80095e2:	89a3      	ldrh	r3, [r4, #12]
 80095e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095ec:	d003      	beq.n	80095f6 <__swsetup_r+0x9a>
 80095ee:	4621      	mov	r1, r4
 80095f0:	4630      	mov	r0, r6
 80095f2:	f000 fa09 	bl	8009a08 <__smakebuf_r>
 80095f6:	89a0      	ldrh	r0, [r4, #12]
 80095f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095fc:	f010 0301 	ands.w	r3, r0, #1
 8009600:	d00a      	beq.n	8009618 <__swsetup_r+0xbc>
 8009602:	2300      	movs	r3, #0
 8009604:	60a3      	str	r3, [r4, #8]
 8009606:	6963      	ldr	r3, [r4, #20]
 8009608:	425b      	negs	r3, r3
 800960a:	61a3      	str	r3, [r4, #24]
 800960c:	6923      	ldr	r3, [r4, #16]
 800960e:	b943      	cbnz	r3, 8009622 <__swsetup_r+0xc6>
 8009610:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009614:	d1ba      	bne.n	800958c <__swsetup_r+0x30>
 8009616:	bd70      	pop	{r4, r5, r6, pc}
 8009618:	0781      	lsls	r1, r0, #30
 800961a:	bf58      	it	pl
 800961c:	6963      	ldrpl	r3, [r4, #20]
 800961e:	60a3      	str	r3, [r4, #8]
 8009620:	e7f4      	b.n	800960c <__swsetup_r+0xb0>
 8009622:	2000      	movs	r0, #0
 8009624:	e7f7      	b.n	8009616 <__swsetup_r+0xba>
 8009626:	bf00      	nop
 8009628:	2000002c 	.word	0x2000002c
 800962c:	0801e61c 	.word	0x0801e61c
 8009630:	0801e63c 	.word	0x0801e63c
 8009634:	0801e5fc 	.word	0x0801e5fc

08009638 <abort>:
 8009638:	b508      	push	{r3, lr}
 800963a:	2006      	movs	r0, #6
 800963c:	f000 fa4c 	bl	8009ad8 <raise>
 8009640:	2001      	movs	r0, #1
 8009642:	f7f8 ff69 	bl	8002518 <_exit>
	...

08009648 <__sflush_r>:
 8009648:	898a      	ldrh	r2, [r1, #12]
 800964a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800964e:	4605      	mov	r5, r0
 8009650:	0710      	lsls	r0, r2, #28
 8009652:	460c      	mov	r4, r1
 8009654:	d458      	bmi.n	8009708 <__sflush_r+0xc0>
 8009656:	684b      	ldr	r3, [r1, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	dc05      	bgt.n	8009668 <__sflush_r+0x20>
 800965c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800965e:	2b00      	cmp	r3, #0
 8009660:	dc02      	bgt.n	8009668 <__sflush_r+0x20>
 8009662:	2000      	movs	r0, #0
 8009664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800966a:	2e00      	cmp	r6, #0
 800966c:	d0f9      	beq.n	8009662 <__sflush_r+0x1a>
 800966e:	2300      	movs	r3, #0
 8009670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009674:	682f      	ldr	r7, [r5, #0]
 8009676:	602b      	str	r3, [r5, #0]
 8009678:	d032      	beq.n	80096e0 <__sflush_r+0x98>
 800967a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	075a      	lsls	r2, r3, #29
 8009680:	d505      	bpl.n	800968e <__sflush_r+0x46>
 8009682:	6863      	ldr	r3, [r4, #4]
 8009684:	1ac0      	subs	r0, r0, r3
 8009686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009688:	b10b      	cbz	r3, 800968e <__sflush_r+0x46>
 800968a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800968c:	1ac0      	subs	r0, r0, r3
 800968e:	2300      	movs	r3, #0
 8009690:	4602      	mov	r2, r0
 8009692:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009694:	6a21      	ldr	r1, [r4, #32]
 8009696:	4628      	mov	r0, r5
 8009698:	47b0      	blx	r6
 800969a:	1c43      	adds	r3, r0, #1
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	d106      	bne.n	80096ae <__sflush_r+0x66>
 80096a0:	6829      	ldr	r1, [r5, #0]
 80096a2:	291d      	cmp	r1, #29
 80096a4:	d82c      	bhi.n	8009700 <__sflush_r+0xb8>
 80096a6:	4a2a      	ldr	r2, [pc, #168]	; (8009750 <__sflush_r+0x108>)
 80096a8:	40ca      	lsrs	r2, r1
 80096aa:	07d6      	lsls	r6, r2, #31
 80096ac:	d528      	bpl.n	8009700 <__sflush_r+0xb8>
 80096ae:	2200      	movs	r2, #0
 80096b0:	6062      	str	r2, [r4, #4]
 80096b2:	04d9      	lsls	r1, r3, #19
 80096b4:	6922      	ldr	r2, [r4, #16]
 80096b6:	6022      	str	r2, [r4, #0]
 80096b8:	d504      	bpl.n	80096c4 <__sflush_r+0x7c>
 80096ba:	1c42      	adds	r2, r0, #1
 80096bc:	d101      	bne.n	80096c2 <__sflush_r+0x7a>
 80096be:	682b      	ldr	r3, [r5, #0]
 80096c0:	b903      	cbnz	r3, 80096c4 <__sflush_r+0x7c>
 80096c2:	6560      	str	r0, [r4, #84]	; 0x54
 80096c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096c6:	602f      	str	r7, [r5, #0]
 80096c8:	2900      	cmp	r1, #0
 80096ca:	d0ca      	beq.n	8009662 <__sflush_r+0x1a>
 80096cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096d0:	4299      	cmp	r1, r3
 80096d2:	d002      	beq.n	80096da <__sflush_r+0x92>
 80096d4:	4628      	mov	r0, r5
 80096d6:	f7ff fc49 	bl	8008f6c <_free_r>
 80096da:	2000      	movs	r0, #0
 80096dc:	6360      	str	r0, [r4, #52]	; 0x34
 80096de:	e7c1      	b.n	8009664 <__sflush_r+0x1c>
 80096e0:	6a21      	ldr	r1, [r4, #32]
 80096e2:	2301      	movs	r3, #1
 80096e4:	4628      	mov	r0, r5
 80096e6:	47b0      	blx	r6
 80096e8:	1c41      	adds	r1, r0, #1
 80096ea:	d1c7      	bne.n	800967c <__sflush_r+0x34>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d0c4      	beq.n	800967c <__sflush_r+0x34>
 80096f2:	2b1d      	cmp	r3, #29
 80096f4:	d001      	beq.n	80096fa <__sflush_r+0xb2>
 80096f6:	2b16      	cmp	r3, #22
 80096f8:	d101      	bne.n	80096fe <__sflush_r+0xb6>
 80096fa:	602f      	str	r7, [r5, #0]
 80096fc:	e7b1      	b.n	8009662 <__sflush_r+0x1a>
 80096fe:	89a3      	ldrh	r3, [r4, #12]
 8009700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009704:	81a3      	strh	r3, [r4, #12]
 8009706:	e7ad      	b.n	8009664 <__sflush_r+0x1c>
 8009708:	690f      	ldr	r7, [r1, #16]
 800970a:	2f00      	cmp	r7, #0
 800970c:	d0a9      	beq.n	8009662 <__sflush_r+0x1a>
 800970e:	0793      	lsls	r3, r2, #30
 8009710:	680e      	ldr	r6, [r1, #0]
 8009712:	bf08      	it	eq
 8009714:	694b      	ldreq	r3, [r1, #20]
 8009716:	600f      	str	r7, [r1, #0]
 8009718:	bf18      	it	ne
 800971a:	2300      	movne	r3, #0
 800971c:	eba6 0807 	sub.w	r8, r6, r7
 8009720:	608b      	str	r3, [r1, #8]
 8009722:	f1b8 0f00 	cmp.w	r8, #0
 8009726:	dd9c      	ble.n	8009662 <__sflush_r+0x1a>
 8009728:	6a21      	ldr	r1, [r4, #32]
 800972a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800972c:	4643      	mov	r3, r8
 800972e:	463a      	mov	r2, r7
 8009730:	4628      	mov	r0, r5
 8009732:	47b0      	blx	r6
 8009734:	2800      	cmp	r0, #0
 8009736:	dc06      	bgt.n	8009746 <__sflush_r+0xfe>
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800973e:	81a3      	strh	r3, [r4, #12]
 8009740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009744:	e78e      	b.n	8009664 <__sflush_r+0x1c>
 8009746:	4407      	add	r7, r0
 8009748:	eba8 0800 	sub.w	r8, r8, r0
 800974c:	e7e9      	b.n	8009722 <__sflush_r+0xda>
 800974e:	bf00      	nop
 8009750:	20400001 	.word	0x20400001

08009754 <_fflush_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	690b      	ldr	r3, [r1, #16]
 8009758:	4605      	mov	r5, r0
 800975a:	460c      	mov	r4, r1
 800975c:	b913      	cbnz	r3, 8009764 <_fflush_r+0x10>
 800975e:	2500      	movs	r5, #0
 8009760:	4628      	mov	r0, r5
 8009762:	bd38      	pop	{r3, r4, r5, pc}
 8009764:	b118      	cbz	r0, 800976e <_fflush_r+0x1a>
 8009766:	6983      	ldr	r3, [r0, #24]
 8009768:	b90b      	cbnz	r3, 800976e <_fflush_r+0x1a>
 800976a:	f000 f887 	bl	800987c <__sinit>
 800976e:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <_fflush_r+0x6c>)
 8009770:	429c      	cmp	r4, r3
 8009772:	d11b      	bne.n	80097ac <_fflush_r+0x58>
 8009774:	686c      	ldr	r4, [r5, #4]
 8009776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d0ef      	beq.n	800975e <_fflush_r+0xa>
 800977e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009780:	07d0      	lsls	r0, r2, #31
 8009782:	d404      	bmi.n	800978e <_fflush_r+0x3a>
 8009784:	0599      	lsls	r1, r3, #22
 8009786:	d402      	bmi.n	800978e <_fflush_r+0x3a>
 8009788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800978a:	f000 f915 	bl	80099b8 <__retarget_lock_acquire_recursive>
 800978e:	4628      	mov	r0, r5
 8009790:	4621      	mov	r1, r4
 8009792:	f7ff ff59 	bl	8009648 <__sflush_r>
 8009796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009798:	07da      	lsls	r2, r3, #31
 800979a:	4605      	mov	r5, r0
 800979c:	d4e0      	bmi.n	8009760 <_fflush_r+0xc>
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	059b      	lsls	r3, r3, #22
 80097a2:	d4dd      	bmi.n	8009760 <_fflush_r+0xc>
 80097a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097a6:	f000 f908 	bl	80099ba <__retarget_lock_release_recursive>
 80097aa:	e7d9      	b.n	8009760 <_fflush_r+0xc>
 80097ac:	4b05      	ldr	r3, [pc, #20]	; (80097c4 <_fflush_r+0x70>)
 80097ae:	429c      	cmp	r4, r3
 80097b0:	d101      	bne.n	80097b6 <_fflush_r+0x62>
 80097b2:	68ac      	ldr	r4, [r5, #8]
 80097b4:	e7df      	b.n	8009776 <_fflush_r+0x22>
 80097b6:	4b04      	ldr	r3, [pc, #16]	; (80097c8 <_fflush_r+0x74>)
 80097b8:	429c      	cmp	r4, r3
 80097ba:	bf08      	it	eq
 80097bc:	68ec      	ldreq	r4, [r5, #12]
 80097be:	e7da      	b.n	8009776 <_fflush_r+0x22>
 80097c0:	0801e61c 	.word	0x0801e61c
 80097c4:	0801e63c 	.word	0x0801e63c
 80097c8:	0801e5fc 	.word	0x0801e5fc

080097cc <std>:
 80097cc:	2300      	movs	r3, #0
 80097ce:	b510      	push	{r4, lr}
 80097d0:	4604      	mov	r4, r0
 80097d2:	e9c0 3300 	strd	r3, r3, [r0]
 80097d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097da:	6083      	str	r3, [r0, #8]
 80097dc:	8181      	strh	r1, [r0, #12]
 80097de:	6643      	str	r3, [r0, #100]	; 0x64
 80097e0:	81c2      	strh	r2, [r0, #14]
 80097e2:	6183      	str	r3, [r0, #24]
 80097e4:	4619      	mov	r1, r3
 80097e6:	2208      	movs	r2, #8
 80097e8:	305c      	adds	r0, #92	; 0x5c
 80097ea:	f7fd fd1f 	bl	800722c <memset>
 80097ee:	4b05      	ldr	r3, [pc, #20]	; (8009804 <std+0x38>)
 80097f0:	6263      	str	r3, [r4, #36]	; 0x24
 80097f2:	4b05      	ldr	r3, [pc, #20]	; (8009808 <std+0x3c>)
 80097f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80097f6:	4b05      	ldr	r3, [pc, #20]	; (800980c <std+0x40>)
 80097f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097fa:	4b05      	ldr	r3, [pc, #20]	; (8009810 <std+0x44>)
 80097fc:	6224      	str	r4, [r4, #32]
 80097fe:	6323      	str	r3, [r4, #48]	; 0x30
 8009800:	bd10      	pop	{r4, pc}
 8009802:	bf00      	nop
 8009804:	08009b11 	.word	0x08009b11
 8009808:	08009b33 	.word	0x08009b33
 800980c:	08009b6b 	.word	0x08009b6b
 8009810:	08009b8f 	.word	0x08009b8f

08009814 <_cleanup_r>:
 8009814:	4901      	ldr	r1, [pc, #4]	; (800981c <_cleanup_r+0x8>)
 8009816:	f000 b8af 	b.w	8009978 <_fwalk_reent>
 800981a:	bf00      	nop
 800981c:	08009755 	.word	0x08009755

08009820 <__sfmoreglue>:
 8009820:	b570      	push	{r4, r5, r6, lr}
 8009822:	2268      	movs	r2, #104	; 0x68
 8009824:	1e4d      	subs	r5, r1, #1
 8009826:	4355      	muls	r5, r2
 8009828:	460e      	mov	r6, r1
 800982a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800982e:	f7ff fc09 	bl	8009044 <_malloc_r>
 8009832:	4604      	mov	r4, r0
 8009834:	b140      	cbz	r0, 8009848 <__sfmoreglue+0x28>
 8009836:	2100      	movs	r1, #0
 8009838:	e9c0 1600 	strd	r1, r6, [r0]
 800983c:	300c      	adds	r0, #12
 800983e:	60a0      	str	r0, [r4, #8]
 8009840:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009844:	f7fd fcf2 	bl	800722c <memset>
 8009848:	4620      	mov	r0, r4
 800984a:	bd70      	pop	{r4, r5, r6, pc}

0800984c <__sfp_lock_acquire>:
 800984c:	4801      	ldr	r0, [pc, #4]	; (8009854 <__sfp_lock_acquire+0x8>)
 800984e:	f000 b8b3 	b.w	80099b8 <__retarget_lock_acquire_recursive>
 8009852:	bf00      	nop
 8009854:	2001c661 	.word	0x2001c661

08009858 <__sfp_lock_release>:
 8009858:	4801      	ldr	r0, [pc, #4]	; (8009860 <__sfp_lock_release+0x8>)
 800985a:	f000 b8ae 	b.w	80099ba <__retarget_lock_release_recursive>
 800985e:	bf00      	nop
 8009860:	2001c661 	.word	0x2001c661

08009864 <__sinit_lock_acquire>:
 8009864:	4801      	ldr	r0, [pc, #4]	; (800986c <__sinit_lock_acquire+0x8>)
 8009866:	f000 b8a7 	b.w	80099b8 <__retarget_lock_acquire_recursive>
 800986a:	bf00      	nop
 800986c:	2001c662 	.word	0x2001c662

08009870 <__sinit_lock_release>:
 8009870:	4801      	ldr	r0, [pc, #4]	; (8009878 <__sinit_lock_release+0x8>)
 8009872:	f000 b8a2 	b.w	80099ba <__retarget_lock_release_recursive>
 8009876:	bf00      	nop
 8009878:	2001c662 	.word	0x2001c662

0800987c <__sinit>:
 800987c:	b510      	push	{r4, lr}
 800987e:	4604      	mov	r4, r0
 8009880:	f7ff fff0 	bl	8009864 <__sinit_lock_acquire>
 8009884:	69a3      	ldr	r3, [r4, #24]
 8009886:	b11b      	cbz	r3, 8009890 <__sinit+0x14>
 8009888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800988c:	f7ff bff0 	b.w	8009870 <__sinit_lock_release>
 8009890:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009894:	6523      	str	r3, [r4, #80]	; 0x50
 8009896:	4b13      	ldr	r3, [pc, #76]	; (80098e4 <__sinit+0x68>)
 8009898:	4a13      	ldr	r2, [pc, #76]	; (80098e8 <__sinit+0x6c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	62a2      	str	r2, [r4, #40]	; 0x28
 800989e:	42a3      	cmp	r3, r4
 80098a0:	bf04      	itt	eq
 80098a2:	2301      	moveq	r3, #1
 80098a4:	61a3      	streq	r3, [r4, #24]
 80098a6:	4620      	mov	r0, r4
 80098a8:	f000 f820 	bl	80098ec <__sfp>
 80098ac:	6060      	str	r0, [r4, #4]
 80098ae:	4620      	mov	r0, r4
 80098b0:	f000 f81c 	bl	80098ec <__sfp>
 80098b4:	60a0      	str	r0, [r4, #8]
 80098b6:	4620      	mov	r0, r4
 80098b8:	f000 f818 	bl	80098ec <__sfp>
 80098bc:	2200      	movs	r2, #0
 80098be:	60e0      	str	r0, [r4, #12]
 80098c0:	2104      	movs	r1, #4
 80098c2:	6860      	ldr	r0, [r4, #4]
 80098c4:	f7ff ff82 	bl	80097cc <std>
 80098c8:	68a0      	ldr	r0, [r4, #8]
 80098ca:	2201      	movs	r2, #1
 80098cc:	2109      	movs	r1, #9
 80098ce:	f7ff ff7d 	bl	80097cc <std>
 80098d2:	68e0      	ldr	r0, [r4, #12]
 80098d4:	2202      	movs	r2, #2
 80098d6:	2112      	movs	r1, #18
 80098d8:	f7ff ff78 	bl	80097cc <std>
 80098dc:	2301      	movs	r3, #1
 80098de:	61a3      	str	r3, [r4, #24]
 80098e0:	e7d2      	b.n	8009888 <__sinit+0xc>
 80098e2:	bf00      	nop
 80098e4:	0801e280 	.word	0x0801e280
 80098e8:	08009815 	.word	0x08009815

080098ec <__sfp>:
 80098ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ee:	4607      	mov	r7, r0
 80098f0:	f7ff ffac 	bl	800984c <__sfp_lock_acquire>
 80098f4:	4b1e      	ldr	r3, [pc, #120]	; (8009970 <__sfp+0x84>)
 80098f6:	681e      	ldr	r6, [r3, #0]
 80098f8:	69b3      	ldr	r3, [r6, #24]
 80098fa:	b913      	cbnz	r3, 8009902 <__sfp+0x16>
 80098fc:	4630      	mov	r0, r6
 80098fe:	f7ff ffbd 	bl	800987c <__sinit>
 8009902:	3648      	adds	r6, #72	; 0x48
 8009904:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009908:	3b01      	subs	r3, #1
 800990a:	d503      	bpl.n	8009914 <__sfp+0x28>
 800990c:	6833      	ldr	r3, [r6, #0]
 800990e:	b30b      	cbz	r3, 8009954 <__sfp+0x68>
 8009910:	6836      	ldr	r6, [r6, #0]
 8009912:	e7f7      	b.n	8009904 <__sfp+0x18>
 8009914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009918:	b9d5      	cbnz	r5, 8009950 <__sfp+0x64>
 800991a:	4b16      	ldr	r3, [pc, #88]	; (8009974 <__sfp+0x88>)
 800991c:	60e3      	str	r3, [r4, #12]
 800991e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009922:	6665      	str	r5, [r4, #100]	; 0x64
 8009924:	f000 f847 	bl	80099b6 <__retarget_lock_init_recursive>
 8009928:	f7ff ff96 	bl	8009858 <__sfp_lock_release>
 800992c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009930:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009934:	6025      	str	r5, [r4, #0]
 8009936:	61a5      	str	r5, [r4, #24]
 8009938:	2208      	movs	r2, #8
 800993a:	4629      	mov	r1, r5
 800993c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009940:	f7fd fc74 	bl	800722c <memset>
 8009944:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009948:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800994c:	4620      	mov	r0, r4
 800994e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009950:	3468      	adds	r4, #104	; 0x68
 8009952:	e7d9      	b.n	8009908 <__sfp+0x1c>
 8009954:	2104      	movs	r1, #4
 8009956:	4638      	mov	r0, r7
 8009958:	f7ff ff62 	bl	8009820 <__sfmoreglue>
 800995c:	4604      	mov	r4, r0
 800995e:	6030      	str	r0, [r6, #0]
 8009960:	2800      	cmp	r0, #0
 8009962:	d1d5      	bne.n	8009910 <__sfp+0x24>
 8009964:	f7ff ff78 	bl	8009858 <__sfp_lock_release>
 8009968:	230c      	movs	r3, #12
 800996a:	603b      	str	r3, [r7, #0]
 800996c:	e7ee      	b.n	800994c <__sfp+0x60>
 800996e:	bf00      	nop
 8009970:	0801e280 	.word	0x0801e280
 8009974:	ffff0001 	.word	0xffff0001

08009978 <_fwalk_reent>:
 8009978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800997c:	4606      	mov	r6, r0
 800997e:	4688      	mov	r8, r1
 8009980:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009984:	2700      	movs	r7, #0
 8009986:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800998a:	f1b9 0901 	subs.w	r9, r9, #1
 800998e:	d505      	bpl.n	800999c <_fwalk_reent+0x24>
 8009990:	6824      	ldr	r4, [r4, #0]
 8009992:	2c00      	cmp	r4, #0
 8009994:	d1f7      	bne.n	8009986 <_fwalk_reent+0xe>
 8009996:	4638      	mov	r0, r7
 8009998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800999c:	89ab      	ldrh	r3, [r5, #12]
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d907      	bls.n	80099b2 <_fwalk_reent+0x3a>
 80099a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099a6:	3301      	adds	r3, #1
 80099a8:	d003      	beq.n	80099b2 <_fwalk_reent+0x3a>
 80099aa:	4629      	mov	r1, r5
 80099ac:	4630      	mov	r0, r6
 80099ae:	47c0      	blx	r8
 80099b0:	4307      	orrs	r7, r0
 80099b2:	3568      	adds	r5, #104	; 0x68
 80099b4:	e7e9      	b.n	800998a <_fwalk_reent+0x12>

080099b6 <__retarget_lock_init_recursive>:
 80099b6:	4770      	bx	lr

080099b8 <__retarget_lock_acquire_recursive>:
 80099b8:	4770      	bx	lr

080099ba <__retarget_lock_release_recursive>:
 80099ba:	4770      	bx	lr

080099bc <__swhatbuf_r>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	460e      	mov	r6, r1
 80099c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c4:	2900      	cmp	r1, #0
 80099c6:	b096      	sub	sp, #88	; 0x58
 80099c8:	4614      	mov	r4, r2
 80099ca:	461d      	mov	r5, r3
 80099cc:	da08      	bge.n	80099e0 <__swhatbuf_r+0x24>
 80099ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	602a      	str	r2, [r5, #0]
 80099d6:	061a      	lsls	r2, r3, #24
 80099d8:	d410      	bmi.n	80099fc <__swhatbuf_r+0x40>
 80099da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099de:	e00e      	b.n	80099fe <__swhatbuf_r+0x42>
 80099e0:	466a      	mov	r2, sp
 80099e2:	f000 f8fb 	bl	8009bdc <_fstat_r>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	dbf1      	blt.n	80099ce <__swhatbuf_r+0x12>
 80099ea:	9a01      	ldr	r2, [sp, #4]
 80099ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099f4:	425a      	negs	r2, r3
 80099f6:	415a      	adcs	r2, r3
 80099f8:	602a      	str	r2, [r5, #0]
 80099fa:	e7ee      	b.n	80099da <__swhatbuf_r+0x1e>
 80099fc:	2340      	movs	r3, #64	; 0x40
 80099fe:	2000      	movs	r0, #0
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	b016      	add	sp, #88	; 0x58
 8009a04:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a08 <__smakebuf_r>:
 8009a08:	898b      	ldrh	r3, [r1, #12]
 8009a0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a0c:	079d      	lsls	r5, r3, #30
 8009a0e:	4606      	mov	r6, r0
 8009a10:	460c      	mov	r4, r1
 8009a12:	d507      	bpl.n	8009a24 <__smakebuf_r+0x1c>
 8009a14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a18:	6023      	str	r3, [r4, #0]
 8009a1a:	6123      	str	r3, [r4, #16]
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	6163      	str	r3, [r4, #20]
 8009a20:	b002      	add	sp, #8
 8009a22:	bd70      	pop	{r4, r5, r6, pc}
 8009a24:	ab01      	add	r3, sp, #4
 8009a26:	466a      	mov	r2, sp
 8009a28:	f7ff ffc8 	bl	80099bc <__swhatbuf_r>
 8009a2c:	9900      	ldr	r1, [sp, #0]
 8009a2e:	4605      	mov	r5, r0
 8009a30:	4630      	mov	r0, r6
 8009a32:	f7ff fb07 	bl	8009044 <_malloc_r>
 8009a36:	b948      	cbnz	r0, 8009a4c <__smakebuf_r+0x44>
 8009a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a3c:	059a      	lsls	r2, r3, #22
 8009a3e:	d4ef      	bmi.n	8009a20 <__smakebuf_r+0x18>
 8009a40:	f023 0303 	bic.w	r3, r3, #3
 8009a44:	f043 0302 	orr.w	r3, r3, #2
 8009a48:	81a3      	strh	r3, [r4, #12]
 8009a4a:	e7e3      	b.n	8009a14 <__smakebuf_r+0xc>
 8009a4c:	4b0d      	ldr	r3, [pc, #52]	; (8009a84 <__smakebuf_r+0x7c>)
 8009a4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	6020      	str	r0, [r4, #0]
 8009a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a58:	81a3      	strh	r3, [r4, #12]
 8009a5a:	9b00      	ldr	r3, [sp, #0]
 8009a5c:	6163      	str	r3, [r4, #20]
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	6120      	str	r0, [r4, #16]
 8009a62:	b15b      	cbz	r3, 8009a7c <__smakebuf_r+0x74>
 8009a64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a68:	4630      	mov	r0, r6
 8009a6a:	f000 f8c9 	bl	8009c00 <_isatty_r>
 8009a6e:	b128      	cbz	r0, 8009a7c <__smakebuf_r+0x74>
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	f023 0303 	bic.w	r3, r3, #3
 8009a76:	f043 0301 	orr.w	r3, r3, #1
 8009a7a:	81a3      	strh	r3, [r4, #12]
 8009a7c:	89a0      	ldrh	r0, [r4, #12]
 8009a7e:	4305      	orrs	r5, r0
 8009a80:	81a5      	strh	r5, [r4, #12]
 8009a82:	e7cd      	b.n	8009a20 <__smakebuf_r+0x18>
 8009a84:	08009815 	.word	0x08009815

08009a88 <_raise_r>:
 8009a88:	291f      	cmp	r1, #31
 8009a8a:	b538      	push	{r3, r4, r5, lr}
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	460d      	mov	r5, r1
 8009a90:	d904      	bls.n	8009a9c <_raise_r+0x14>
 8009a92:	2316      	movs	r3, #22
 8009a94:	6003      	str	r3, [r0, #0]
 8009a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a9e:	b112      	cbz	r2, 8009aa6 <_raise_r+0x1e>
 8009aa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009aa4:	b94b      	cbnz	r3, 8009aba <_raise_r+0x32>
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f000 f830 	bl	8009b0c <_getpid_r>
 8009aac:	462a      	mov	r2, r5
 8009aae:	4601      	mov	r1, r0
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ab6:	f000 b817 	b.w	8009ae8 <_kill_r>
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d00a      	beq.n	8009ad4 <_raise_r+0x4c>
 8009abe:	1c59      	adds	r1, r3, #1
 8009ac0:	d103      	bne.n	8009aca <_raise_r+0x42>
 8009ac2:	2316      	movs	r3, #22
 8009ac4:	6003      	str	r3, [r0, #0]
 8009ac6:	2001      	movs	r0, #1
 8009ac8:	e7e7      	b.n	8009a9a <_raise_r+0x12>
 8009aca:	2400      	movs	r4, #0
 8009acc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	4798      	blx	r3
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	e7e0      	b.n	8009a9a <_raise_r+0x12>

08009ad8 <raise>:
 8009ad8:	4b02      	ldr	r3, [pc, #8]	; (8009ae4 <raise+0xc>)
 8009ada:	4601      	mov	r1, r0
 8009adc:	6818      	ldr	r0, [r3, #0]
 8009ade:	f7ff bfd3 	b.w	8009a88 <_raise_r>
 8009ae2:	bf00      	nop
 8009ae4:	2000002c 	.word	0x2000002c

08009ae8 <_kill_r>:
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	4d07      	ldr	r5, [pc, #28]	; (8009b08 <_kill_r+0x20>)
 8009aec:	2300      	movs	r3, #0
 8009aee:	4604      	mov	r4, r0
 8009af0:	4608      	mov	r0, r1
 8009af2:	4611      	mov	r1, r2
 8009af4:	602b      	str	r3, [r5, #0]
 8009af6:	f7f8 fcff 	bl	80024f8 <_kill>
 8009afa:	1c43      	adds	r3, r0, #1
 8009afc:	d102      	bne.n	8009b04 <_kill_r+0x1c>
 8009afe:	682b      	ldr	r3, [r5, #0]
 8009b00:	b103      	cbz	r3, 8009b04 <_kill_r+0x1c>
 8009b02:	6023      	str	r3, [r4, #0]
 8009b04:	bd38      	pop	{r3, r4, r5, pc}
 8009b06:	bf00      	nop
 8009b08:	2001c65c 	.word	0x2001c65c

08009b0c <_getpid_r>:
 8009b0c:	f7f8 bcec 	b.w	80024e8 <_getpid>

08009b10 <__sread>:
 8009b10:	b510      	push	{r4, lr}
 8009b12:	460c      	mov	r4, r1
 8009b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b18:	f000 f894 	bl	8009c44 <_read_r>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	bfab      	itete	ge
 8009b20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b22:	89a3      	ldrhlt	r3, [r4, #12]
 8009b24:	181b      	addge	r3, r3, r0
 8009b26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b2a:	bfac      	ite	ge
 8009b2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b2e:	81a3      	strhlt	r3, [r4, #12]
 8009b30:	bd10      	pop	{r4, pc}

08009b32 <__swrite>:
 8009b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b36:	461f      	mov	r7, r3
 8009b38:	898b      	ldrh	r3, [r1, #12]
 8009b3a:	05db      	lsls	r3, r3, #23
 8009b3c:	4605      	mov	r5, r0
 8009b3e:	460c      	mov	r4, r1
 8009b40:	4616      	mov	r6, r2
 8009b42:	d505      	bpl.n	8009b50 <__swrite+0x1e>
 8009b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b48:	2302      	movs	r3, #2
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f000 f868 	bl	8009c20 <_lseek_r>
 8009b50:	89a3      	ldrh	r3, [r4, #12]
 8009b52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b5a:	81a3      	strh	r3, [r4, #12]
 8009b5c:	4632      	mov	r2, r6
 8009b5e:	463b      	mov	r3, r7
 8009b60:	4628      	mov	r0, r5
 8009b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b66:	f000 b817 	b.w	8009b98 <_write_r>

08009b6a <__sseek>:
 8009b6a:	b510      	push	{r4, lr}
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b72:	f000 f855 	bl	8009c20 <_lseek_r>
 8009b76:	1c43      	adds	r3, r0, #1
 8009b78:	89a3      	ldrh	r3, [r4, #12]
 8009b7a:	bf15      	itete	ne
 8009b7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b86:	81a3      	strheq	r3, [r4, #12]
 8009b88:	bf18      	it	ne
 8009b8a:	81a3      	strhne	r3, [r4, #12]
 8009b8c:	bd10      	pop	{r4, pc}

08009b8e <__sclose>:
 8009b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b92:	f000 b813 	b.w	8009bbc <_close_r>
	...

08009b98 <_write_r>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4d07      	ldr	r5, [pc, #28]	; (8009bb8 <_write_r+0x20>)
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	4608      	mov	r0, r1
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	602a      	str	r2, [r5, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	f7f8 fcdd 	bl	8002566 <_write>
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	d102      	bne.n	8009bb6 <_write_r+0x1e>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	b103      	cbz	r3, 8009bb6 <_write_r+0x1e>
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	bd38      	pop	{r3, r4, r5, pc}
 8009bb8:	2001c65c 	.word	0x2001c65c

08009bbc <_close_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	4d06      	ldr	r5, [pc, #24]	; (8009bd8 <_close_r+0x1c>)
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	4608      	mov	r0, r1
 8009bc6:	602b      	str	r3, [r5, #0]
 8009bc8:	f7f8 fce9 	bl	800259e <_close>
 8009bcc:	1c43      	adds	r3, r0, #1
 8009bce:	d102      	bne.n	8009bd6 <_close_r+0x1a>
 8009bd0:	682b      	ldr	r3, [r5, #0]
 8009bd2:	b103      	cbz	r3, 8009bd6 <_close_r+0x1a>
 8009bd4:	6023      	str	r3, [r4, #0]
 8009bd6:	bd38      	pop	{r3, r4, r5, pc}
 8009bd8:	2001c65c 	.word	0x2001c65c

08009bdc <_fstat_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	4d07      	ldr	r5, [pc, #28]	; (8009bfc <_fstat_r+0x20>)
 8009be0:	2300      	movs	r3, #0
 8009be2:	4604      	mov	r4, r0
 8009be4:	4608      	mov	r0, r1
 8009be6:	4611      	mov	r1, r2
 8009be8:	602b      	str	r3, [r5, #0]
 8009bea:	f7f8 fce4 	bl	80025b6 <_fstat>
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	d102      	bne.n	8009bf8 <_fstat_r+0x1c>
 8009bf2:	682b      	ldr	r3, [r5, #0]
 8009bf4:	b103      	cbz	r3, 8009bf8 <_fstat_r+0x1c>
 8009bf6:	6023      	str	r3, [r4, #0]
 8009bf8:	bd38      	pop	{r3, r4, r5, pc}
 8009bfa:	bf00      	nop
 8009bfc:	2001c65c 	.word	0x2001c65c

08009c00 <_isatty_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d06      	ldr	r5, [pc, #24]	; (8009c1c <_isatty_r+0x1c>)
 8009c04:	2300      	movs	r3, #0
 8009c06:	4604      	mov	r4, r0
 8009c08:	4608      	mov	r0, r1
 8009c0a:	602b      	str	r3, [r5, #0]
 8009c0c:	f7f8 fce3 	bl	80025d6 <_isatty>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d102      	bne.n	8009c1a <_isatty_r+0x1a>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	b103      	cbz	r3, 8009c1a <_isatty_r+0x1a>
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
 8009c1c:	2001c65c 	.word	0x2001c65c

08009c20 <_lseek_r>:
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	4d07      	ldr	r5, [pc, #28]	; (8009c40 <_lseek_r+0x20>)
 8009c24:	4604      	mov	r4, r0
 8009c26:	4608      	mov	r0, r1
 8009c28:	4611      	mov	r1, r2
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	602a      	str	r2, [r5, #0]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	f7f8 fcdc 	bl	80025ec <_lseek>
 8009c34:	1c43      	adds	r3, r0, #1
 8009c36:	d102      	bne.n	8009c3e <_lseek_r+0x1e>
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	b103      	cbz	r3, 8009c3e <_lseek_r+0x1e>
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	bd38      	pop	{r3, r4, r5, pc}
 8009c40:	2001c65c 	.word	0x2001c65c

08009c44 <_read_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4d07      	ldr	r5, [pc, #28]	; (8009c64 <_read_r+0x20>)
 8009c48:	4604      	mov	r4, r0
 8009c4a:	4608      	mov	r0, r1
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	2200      	movs	r2, #0
 8009c50:	602a      	str	r2, [r5, #0]
 8009c52:	461a      	mov	r2, r3
 8009c54:	f7f8 fc6a 	bl	800252c <_read>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d102      	bne.n	8009c62 <_read_r+0x1e>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	b103      	cbz	r3, 8009c62 <_read_r+0x1e>
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	2001c65c 	.word	0x2001c65c

08009c68 <cos>:
 8009c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c6a:	ec53 2b10 	vmov	r2, r3, d0
 8009c6e:	4826      	ldr	r0, [pc, #152]	; (8009d08 <cos+0xa0>)
 8009c70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c74:	4281      	cmp	r1, r0
 8009c76:	dc06      	bgt.n	8009c86 <cos+0x1e>
 8009c78:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009d00 <cos+0x98>
 8009c7c:	b005      	add	sp, #20
 8009c7e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c82:	f000 bacd 	b.w	800a220 <__kernel_cos>
 8009c86:	4821      	ldr	r0, [pc, #132]	; (8009d0c <cos+0xa4>)
 8009c88:	4281      	cmp	r1, r0
 8009c8a:	dd09      	ble.n	8009ca0 <cos+0x38>
 8009c8c:	ee10 0a10 	vmov	r0, s0
 8009c90:	4619      	mov	r1, r3
 8009c92:	f7f6 fb79 	bl	8000388 <__aeabi_dsub>
 8009c96:	ec41 0b10 	vmov	d0, r0, r1
 8009c9a:	b005      	add	sp, #20
 8009c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ca0:	4668      	mov	r0, sp
 8009ca2:	f000 f8ad 	bl	8009e00 <__ieee754_rem_pio2>
 8009ca6:	f000 0003 	and.w	r0, r0, #3
 8009caa:	2801      	cmp	r0, #1
 8009cac:	d00b      	beq.n	8009cc6 <cos+0x5e>
 8009cae:	2802      	cmp	r0, #2
 8009cb0:	d016      	beq.n	8009ce0 <cos+0x78>
 8009cb2:	b9e0      	cbnz	r0, 8009cee <cos+0x86>
 8009cb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cb8:	ed9d 0b00 	vldr	d0, [sp]
 8009cbc:	f000 fab0 	bl	800a220 <__kernel_cos>
 8009cc0:	ec51 0b10 	vmov	r0, r1, d0
 8009cc4:	e7e7      	b.n	8009c96 <cos+0x2e>
 8009cc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cca:	ed9d 0b00 	vldr	d0, [sp]
 8009cce:	f000 febf 	bl	800aa50 <__kernel_sin>
 8009cd2:	ec53 2b10 	vmov	r2, r3, d0
 8009cd6:	ee10 0a10 	vmov	r0, s0
 8009cda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009cde:	e7da      	b.n	8009c96 <cos+0x2e>
 8009ce0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ce4:	ed9d 0b00 	vldr	d0, [sp]
 8009ce8:	f000 fa9a 	bl	800a220 <__kernel_cos>
 8009cec:	e7f1      	b.n	8009cd2 <cos+0x6a>
 8009cee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cf2:	ed9d 0b00 	vldr	d0, [sp]
 8009cf6:	2001      	movs	r0, #1
 8009cf8:	f000 feaa 	bl	800aa50 <__kernel_sin>
 8009cfc:	e7e0      	b.n	8009cc0 <cos+0x58>
 8009cfe:	bf00      	nop
	...
 8009d08:	3fe921fb 	.word	0x3fe921fb
 8009d0c:	7fefffff 	.word	0x7fefffff

08009d10 <sin>:
 8009d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d12:	ec53 2b10 	vmov	r2, r3, d0
 8009d16:	4828      	ldr	r0, [pc, #160]	; (8009db8 <sin+0xa8>)
 8009d18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d1c:	4281      	cmp	r1, r0
 8009d1e:	dc07      	bgt.n	8009d30 <sin+0x20>
 8009d20:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009db0 <sin+0xa0>
 8009d24:	2000      	movs	r0, #0
 8009d26:	b005      	add	sp, #20
 8009d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d2c:	f000 be90 	b.w	800aa50 <__kernel_sin>
 8009d30:	4822      	ldr	r0, [pc, #136]	; (8009dbc <sin+0xac>)
 8009d32:	4281      	cmp	r1, r0
 8009d34:	dd09      	ble.n	8009d4a <sin+0x3a>
 8009d36:	ee10 0a10 	vmov	r0, s0
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	f7f6 fb24 	bl	8000388 <__aeabi_dsub>
 8009d40:	ec41 0b10 	vmov	d0, r0, r1
 8009d44:	b005      	add	sp, #20
 8009d46:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d4a:	4668      	mov	r0, sp
 8009d4c:	f000 f858 	bl	8009e00 <__ieee754_rem_pio2>
 8009d50:	f000 0003 	and.w	r0, r0, #3
 8009d54:	2801      	cmp	r0, #1
 8009d56:	d00c      	beq.n	8009d72 <sin+0x62>
 8009d58:	2802      	cmp	r0, #2
 8009d5a:	d011      	beq.n	8009d80 <sin+0x70>
 8009d5c:	b9f0      	cbnz	r0, 8009d9c <sin+0x8c>
 8009d5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d62:	ed9d 0b00 	vldr	d0, [sp]
 8009d66:	2001      	movs	r0, #1
 8009d68:	f000 fe72 	bl	800aa50 <__kernel_sin>
 8009d6c:	ec51 0b10 	vmov	r0, r1, d0
 8009d70:	e7e6      	b.n	8009d40 <sin+0x30>
 8009d72:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d76:	ed9d 0b00 	vldr	d0, [sp]
 8009d7a:	f000 fa51 	bl	800a220 <__kernel_cos>
 8009d7e:	e7f5      	b.n	8009d6c <sin+0x5c>
 8009d80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d84:	ed9d 0b00 	vldr	d0, [sp]
 8009d88:	2001      	movs	r0, #1
 8009d8a:	f000 fe61 	bl	800aa50 <__kernel_sin>
 8009d8e:	ec53 2b10 	vmov	r2, r3, d0
 8009d92:	ee10 0a10 	vmov	r0, s0
 8009d96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009d9a:	e7d1      	b.n	8009d40 <sin+0x30>
 8009d9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009da0:	ed9d 0b00 	vldr	d0, [sp]
 8009da4:	f000 fa3c 	bl	800a220 <__kernel_cos>
 8009da8:	e7f1      	b.n	8009d8e <sin+0x7e>
 8009daa:	bf00      	nop
 8009dac:	f3af 8000 	nop.w
	...
 8009db8:	3fe921fb 	.word	0x3fe921fb
 8009dbc:	7fefffff 	.word	0x7fefffff

08009dc0 <sqrtf>:
 8009dc0:	b508      	push	{r3, lr}
 8009dc2:	ed2d 8b02 	vpush	{d8}
 8009dc6:	eeb0 8a40 	vmov.f32	s16, s0
 8009dca:	f000 fa25 	bl	800a218 <__ieee754_sqrtf>
 8009dce:	eeb4 8a48 	vcmp.f32	s16, s16
 8009dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd6:	d60c      	bvs.n	8009df2 <sqrtf+0x32>
 8009dd8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009df8 <sqrtf+0x38>
 8009ddc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009de4:	d505      	bpl.n	8009df2 <sqrtf+0x32>
 8009de6:	f7fd f9f7 	bl	80071d8 <__errno>
 8009dea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009dee:	2321      	movs	r3, #33	; 0x21
 8009df0:	6003      	str	r3, [r0, #0]
 8009df2:	ecbd 8b02 	vpop	{d8}
 8009df6:	bd08      	pop	{r3, pc}
	...

08009e00 <__ieee754_rem_pio2>:
 8009e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e04:	ed2d 8b02 	vpush	{d8}
 8009e08:	ec55 4b10 	vmov	r4, r5, d0
 8009e0c:	4bca      	ldr	r3, [pc, #808]	; (800a138 <__ieee754_rem_pio2+0x338>)
 8009e0e:	b08b      	sub	sp, #44	; 0x2c
 8009e10:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009e14:	4598      	cmp	r8, r3
 8009e16:	4682      	mov	sl, r0
 8009e18:	9502      	str	r5, [sp, #8]
 8009e1a:	dc08      	bgt.n	8009e2e <__ieee754_rem_pio2+0x2e>
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	2300      	movs	r3, #0
 8009e20:	ed80 0b00 	vstr	d0, [r0]
 8009e24:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009e28:	f04f 0b00 	mov.w	fp, #0
 8009e2c:	e028      	b.n	8009e80 <__ieee754_rem_pio2+0x80>
 8009e2e:	4bc3      	ldr	r3, [pc, #780]	; (800a13c <__ieee754_rem_pio2+0x33c>)
 8009e30:	4598      	cmp	r8, r3
 8009e32:	dc78      	bgt.n	8009f26 <__ieee754_rem_pio2+0x126>
 8009e34:	9b02      	ldr	r3, [sp, #8]
 8009e36:	4ec2      	ldr	r6, [pc, #776]	; (800a140 <__ieee754_rem_pio2+0x340>)
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	ee10 0a10 	vmov	r0, s0
 8009e3e:	a3b0      	add	r3, pc, #704	; (adr r3, 800a100 <__ieee754_rem_pio2+0x300>)
 8009e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e44:	4629      	mov	r1, r5
 8009e46:	dd39      	ble.n	8009ebc <__ieee754_rem_pio2+0xbc>
 8009e48:	f7f6 fa9e 	bl	8000388 <__aeabi_dsub>
 8009e4c:	45b0      	cmp	r8, r6
 8009e4e:	4604      	mov	r4, r0
 8009e50:	460d      	mov	r5, r1
 8009e52:	d01b      	beq.n	8009e8c <__ieee754_rem_pio2+0x8c>
 8009e54:	a3ac      	add	r3, pc, #688	; (adr r3, 800a108 <__ieee754_rem_pio2+0x308>)
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	f7f6 fa95 	bl	8000388 <__aeabi_dsub>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	e9ca 2300 	strd	r2, r3, [sl]
 8009e66:	4620      	mov	r0, r4
 8009e68:	4629      	mov	r1, r5
 8009e6a:	f7f6 fa8d 	bl	8000388 <__aeabi_dsub>
 8009e6e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a108 <__ieee754_rem_pio2+0x308>)
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	f7f6 fa88 	bl	8000388 <__aeabi_dsub>
 8009e78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009e7c:	f04f 0b01 	mov.w	fp, #1
 8009e80:	4658      	mov	r0, fp
 8009e82:	b00b      	add	sp, #44	; 0x2c
 8009e84:	ecbd 8b02 	vpop	{d8}
 8009e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8c:	a3a0      	add	r3, pc, #640	; (adr r3, 800a110 <__ieee754_rem_pio2+0x310>)
 8009e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e92:	f7f6 fa79 	bl	8000388 <__aeabi_dsub>
 8009e96:	a3a0      	add	r3, pc, #640	; (adr r3, 800a118 <__ieee754_rem_pio2+0x318>)
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	460d      	mov	r5, r1
 8009ea0:	f7f6 fa72 	bl	8000388 <__aeabi_dsub>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	e9ca 2300 	strd	r2, r3, [sl]
 8009eac:	4620      	mov	r0, r4
 8009eae:	4629      	mov	r1, r5
 8009eb0:	f7f6 fa6a 	bl	8000388 <__aeabi_dsub>
 8009eb4:	a398      	add	r3, pc, #608	; (adr r3, 800a118 <__ieee754_rem_pio2+0x318>)
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	e7db      	b.n	8009e74 <__ieee754_rem_pio2+0x74>
 8009ebc:	f7f6 fa66 	bl	800038c <__adddf3>
 8009ec0:	45b0      	cmp	r8, r6
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	460d      	mov	r5, r1
 8009ec6:	d016      	beq.n	8009ef6 <__ieee754_rem_pio2+0xf6>
 8009ec8:	a38f      	add	r3, pc, #572	; (adr r3, 800a108 <__ieee754_rem_pio2+0x308>)
 8009eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ece:	f7f6 fa5d 	bl	800038c <__adddf3>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	e9ca 2300 	strd	r2, r3, [sl]
 8009eda:	4620      	mov	r0, r4
 8009edc:	4629      	mov	r1, r5
 8009ede:	f7f6 fa53 	bl	8000388 <__aeabi_dsub>
 8009ee2:	a389      	add	r3, pc, #548	; (adr r3, 800a108 <__ieee754_rem_pio2+0x308>)
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	f7f6 fa50 	bl	800038c <__adddf3>
 8009eec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009ef0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009ef4:	e7c4      	b.n	8009e80 <__ieee754_rem_pio2+0x80>
 8009ef6:	a386      	add	r3, pc, #536	; (adr r3, 800a110 <__ieee754_rem_pio2+0x310>)
 8009ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efc:	f7f6 fa46 	bl	800038c <__adddf3>
 8009f00:	a385      	add	r3, pc, #532	; (adr r3, 800a118 <__ieee754_rem_pio2+0x318>)
 8009f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f06:	4604      	mov	r4, r0
 8009f08:	460d      	mov	r5, r1
 8009f0a:	f7f6 fa3f 	bl	800038c <__adddf3>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	e9ca 2300 	strd	r2, r3, [sl]
 8009f16:	4620      	mov	r0, r4
 8009f18:	4629      	mov	r1, r5
 8009f1a:	f7f6 fa35 	bl	8000388 <__aeabi_dsub>
 8009f1e:	a37e      	add	r3, pc, #504	; (adr r3, 800a118 <__ieee754_rem_pio2+0x318>)
 8009f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f24:	e7e0      	b.n	8009ee8 <__ieee754_rem_pio2+0xe8>
 8009f26:	4b87      	ldr	r3, [pc, #540]	; (800a144 <__ieee754_rem_pio2+0x344>)
 8009f28:	4598      	cmp	r8, r3
 8009f2a:	f300 80d9 	bgt.w	800a0e0 <__ieee754_rem_pio2+0x2e0>
 8009f2e:	f000 fe4d 	bl	800abcc <fabs>
 8009f32:	ec55 4b10 	vmov	r4, r5, d0
 8009f36:	ee10 0a10 	vmov	r0, s0
 8009f3a:	a379      	add	r3, pc, #484	; (adr r3, 800a120 <__ieee754_rem_pio2+0x320>)
 8009f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f40:	4629      	mov	r1, r5
 8009f42:	f7f6 fbd9 	bl	80006f8 <__aeabi_dmul>
 8009f46:	4b80      	ldr	r3, [pc, #512]	; (800a148 <__ieee754_rem_pio2+0x348>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f7f6 fa1f 	bl	800038c <__adddf3>
 8009f4e:	f7f6 fe83 	bl	8000c58 <__aeabi_d2iz>
 8009f52:	4683      	mov	fp, r0
 8009f54:	f7f6 fb66 	bl	8000624 <__aeabi_i2d>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	ec43 2b18 	vmov	d8, r2, r3
 8009f60:	a367      	add	r3, pc, #412	; (adr r3, 800a100 <__ieee754_rem_pio2+0x300>)
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	f7f6 fbc7 	bl	80006f8 <__aeabi_dmul>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4620      	mov	r0, r4
 8009f70:	4629      	mov	r1, r5
 8009f72:	f7f6 fa09 	bl	8000388 <__aeabi_dsub>
 8009f76:	a364      	add	r3, pc, #400	; (adr r3, 800a108 <__ieee754_rem_pio2+0x308>)
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	460f      	mov	r7, r1
 8009f80:	ec51 0b18 	vmov	r0, r1, d8
 8009f84:	f7f6 fbb8 	bl	80006f8 <__aeabi_dmul>
 8009f88:	f1bb 0f1f 	cmp.w	fp, #31
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	460d      	mov	r5, r1
 8009f90:	dc0d      	bgt.n	8009fae <__ieee754_rem_pio2+0x1ae>
 8009f92:	4b6e      	ldr	r3, [pc, #440]	; (800a14c <__ieee754_rem_pio2+0x34c>)
 8009f94:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8009f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f9c:	4543      	cmp	r3, r8
 8009f9e:	d006      	beq.n	8009fae <__ieee754_rem_pio2+0x1ae>
 8009fa0:	4622      	mov	r2, r4
 8009fa2:	462b      	mov	r3, r5
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	4639      	mov	r1, r7
 8009fa8:	f7f6 f9ee 	bl	8000388 <__aeabi_dsub>
 8009fac:	e00f      	b.n	8009fce <__ieee754_rem_pio2+0x1ce>
 8009fae:	462b      	mov	r3, r5
 8009fb0:	4622      	mov	r2, r4
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	f7f6 f9e7 	bl	8000388 <__aeabi_dsub>
 8009fba:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009fbe:	9303      	str	r3, [sp, #12]
 8009fc0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009fc4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009fc8:	f1b8 0f10 	cmp.w	r8, #16
 8009fcc:	dc02      	bgt.n	8009fd4 <__ieee754_rem_pio2+0x1d4>
 8009fce:	e9ca 0100 	strd	r0, r1, [sl]
 8009fd2:	e039      	b.n	800a048 <__ieee754_rem_pio2+0x248>
 8009fd4:	a34e      	add	r3, pc, #312	; (adr r3, 800a110 <__ieee754_rem_pio2+0x310>)
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	ec51 0b18 	vmov	r0, r1, d8
 8009fde:	f7f6 fb8b 	bl	80006f8 <__aeabi_dmul>
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	460d      	mov	r5, r1
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4630      	mov	r0, r6
 8009fec:	4639      	mov	r1, r7
 8009fee:	f7f6 f9cb 	bl	8000388 <__aeabi_dsub>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	4680      	mov	r8, r0
 8009ff8:	4689      	mov	r9, r1
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	f7f6 f9c3 	bl	8000388 <__aeabi_dsub>
 800a002:	4622      	mov	r2, r4
 800a004:	462b      	mov	r3, r5
 800a006:	f7f6 f9bf 	bl	8000388 <__aeabi_dsub>
 800a00a:	a343      	add	r3, pc, #268	; (adr r3, 800a118 <__ieee754_rem_pio2+0x318>)
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	4604      	mov	r4, r0
 800a012:	460d      	mov	r5, r1
 800a014:	ec51 0b18 	vmov	r0, r1, d8
 800a018:	f7f6 fb6e 	bl	80006f8 <__aeabi_dmul>
 800a01c:	4622      	mov	r2, r4
 800a01e:	462b      	mov	r3, r5
 800a020:	f7f6 f9b2 	bl	8000388 <__aeabi_dsub>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	4604      	mov	r4, r0
 800a02a:	460d      	mov	r5, r1
 800a02c:	4640      	mov	r0, r8
 800a02e:	4649      	mov	r1, r9
 800a030:	f7f6 f9aa 	bl	8000388 <__aeabi_dsub>
 800a034:	9a03      	ldr	r2, [sp, #12]
 800a036:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	2b31      	cmp	r3, #49	; 0x31
 800a03e:	dc24      	bgt.n	800a08a <__ieee754_rem_pio2+0x28a>
 800a040:	e9ca 0100 	strd	r0, r1, [sl]
 800a044:	4646      	mov	r6, r8
 800a046:	464f      	mov	r7, r9
 800a048:	e9da 8900 	ldrd	r8, r9, [sl]
 800a04c:	4630      	mov	r0, r6
 800a04e:	4642      	mov	r2, r8
 800a050:	464b      	mov	r3, r9
 800a052:	4639      	mov	r1, r7
 800a054:	f7f6 f998 	bl	8000388 <__aeabi_dsub>
 800a058:	462b      	mov	r3, r5
 800a05a:	4622      	mov	r2, r4
 800a05c:	f7f6 f994 	bl	8000388 <__aeabi_dsub>
 800a060:	9b02      	ldr	r3, [sp, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a068:	f6bf af0a 	bge.w	8009e80 <__ieee754_rem_pio2+0x80>
 800a06c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a070:	f8ca 3004 	str.w	r3, [sl, #4]
 800a074:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a078:	f8ca 8000 	str.w	r8, [sl]
 800a07c:	f8ca 0008 	str.w	r0, [sl, #8]
 800a080:	f8ca 300c 	str.w	r3, [sl, #12]
 800a084:	f1cb 0b00 	rsb	fp, fp, #0
 800a088:	e6fa      	b.n	8009e80 <__ieee754_rem_pio2+0x80>
 800a08a:	a327      	add	r3, pc, #156	; (adr r3, 800a128 <__ieee754_rem_pio2+0x328>)
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	ec51 0b18 	vmov	r0, r1, d8
 800a094:	f7f6 fb30 	bl	80006f8 <__aeabi_dmul>
 800a098:	4604      	mov	r4, r0
 800a09a:	460d      	mov	r5, r1
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4640      	mov	r0, r8
 800a0a2:	4649      	mov	r1, r9
 800a0a4:	f7f6 f970 	bl	8000388 <__aeabi_dsub>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4606      	mov	r6, r0
 800a0ae:	460f      	mov	r7, r1
 800a0b0:	4640      	mov	r0, r8
 800a0b2:	4649      	mov	r1, r9
 800a0b4:	f7f6 f968 	bl	8000388 <__aeabi_dsub>
 800a0b8:	4622      	mov	r2, r4
 800a0ba:	462b      	mov	r3, r5
 800a0bc:	f7f6 f964 	bl	8000388 <__aeabi_dsub>
 800a0c0:	a31b      	add	r3, pc, #108	; (adr r3, 800a130 <__ieee754_rem_pio2+0x330>)
 800a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	ec51 0b18 	vmov	r0, r1, d8
 800a0ce:	f7f6 fb13 	bl	80006f8 <__aeabi_dmul>
 800a0d2:	4622      	mov	r2, r4
 800a0d4:	462b      	mov	r3, r5
 800a0d6:	f7f6 f957 	bl	8000388 <__aeabi_dsub>
 800a0da:	4604      	mov	r4, r0
 800a0dc:	460d      	mov	r5, r1
 800a0de:	e75f      	b.n	8009fa0 <__ieee754_rem_pio2+0x1a0>
 800a0e0:	4b1b      	ldr	r3, [pc, #108]	; (800a150 <__ieee754_rem_pio2+0x350>)
 800a0e2:	4598      	cmp	r8, r3
 800a0e4:	dd36      	ble.n	800a154 <__ieee754_rem_pio2+0x354>
 800a0e6:	ee10 2a10 	vmov	r2, s0
 800a0ea:	462b      	mov	r3, r5
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	f7f6 f94a 	bl	8000388 <__aeabi_dsub>
 800a0f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a0f8:	e9ca 0100 	strd	r0, r1, [sl]
 800a0fc:	e694      	b.n	8009e28 <__ieee754_rem_pio2+0x28>
 800a0fe:	bf00      	nop
 800a100:	54400000 	.word	0x54400000
 800a104:	3ff921fb 	.word	0x3ff921fb
 800a108:	1a626331 	.word	0x1a626331
 800a10c:	3dd0b461 	.word	0x3dd0b461
 800a110:	1a600000 	.word	0x1a600000
 800a114:	3dd0b461 	.word	0x3dd0b461
 800a118:	2e037073 	.word	0x2e037073
 800a11c:	3ba3198a 	.word	0x3ba3198a
 800a120:	6dc9c883 	.word	0x6dc9c883
 800a124:	3fe45f30 	.word	0x3fe45f30
 800a128:	2e000000 	.word	0x2e000000
 800a12c:	3ba3198a 	.word	0x3ba3198a
 800a130:	252049c1 	.word	0x252049c1
 800a134:	397b839a 	.word	0x397b839a
 800a138:	3fe921fb 	.word	0x3fe921fb
 800a13c:	4002d97b 	.word	0x4002d97b
 800a140:	3ff921fb 	.word	0x3ff921fb
 800a144:	413921fb 	.word	0x413921fb
 800a148:	3fe00000 	.word	0x3fe00000
 800a14c:	0801e65c 	.word	0x0801e65c
 800a150:	7fefffff 	.word	0x7fefffff
 800a154:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a158:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a15c:	ee10 0a10 	vmov	r0, s0
 800a160:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a164:	ee10 6a10 	vmov	r6, s0
 800a168:	460f      	mov	r7, r1
 800a16a:	f7f6 fd75 	bl	8000c58 <__aeabi_d2iz>
 800a16e:	f7f6 fa59 	bl	8000624 <__aeabi_i2d>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	4630      	mov	r0, r6
 800a178:	4639      	mov	r1, r7
 800a17a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a17e:	f7f6 f903 	bl	8000388 <__aeabi_dsub>
 800a182:	4b23      	ldr	r3, [pc, #140]	; (800a210 <__ieee754_rem_pio2+0x410>)
 800a184:	2200      	movs	r2, #0
 800a186:	f7f6 fab7 	bl	80006f8 <__aeabi_dmul>
 800a18a:	460f      	mov	r7, r1
 800a18c:	4606      	mov	r6, r0
 800a18e:	f7f6 fd63 	bl	8000c58 <__aeabi_d2iz>
 800a192:	f7f6 fa47 	bl	8000624 <__aeabi_i2d>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4630      	mov	r0, r6
 800a19c:	4639      	mov	r1, r7
 800a19e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a1a2:	f7f6 f8f1 	bl	8000388 <__aeabi_dsub>
 800a1a6:	4b1a      	ldr	r3, [pc, #104]	; (800a210 <__ieee754_rem_pio2+0x410>)
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f7f6 faa5 	bl	80006f8 <__aeabi_dmul>
 800a1ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a1b2:	ad04      	add	r5, sp, #16
 800a1b4:	f04f 0803 	mov.w	r8, #3
 800a1b8:	46a9      	mov	r9, r5
 800a1ba:	2600      	movs	r6, #0
 800a1bc:	2700      	movs	r7, #0
 800a1be:	4632      	mov	r2, r6
 800a1c0:	463b      	mov	r3, r7
 800a1c2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a1c6:	46c3      	mov	fp, r8
 800a1c8:	3d08      	subs	r5, #8
 800a1ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a1ce:	f7f6 fcfb 	bl	8000bc8 <__aeabi_dcmpeq>
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d1f3      	bne.n	800a1be <__ieee754_rem_pio2+0x3be>
 800a1d6:	4b0f      	ldr	r3, [pc, #60]	; (800a214 <__ieee754_rem_pio2+0x414>)
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	2302      	movs	r3, #2
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	4622      	mov	r2, r4
 800a1e0:	465b      	mov	r3, fp
 800a1e2:	4651      	mov	r1, sl
 800a1e4:	4648      	mov	r0, r9
 800a1e6:	f000 f8e3 	bl	800a3b0 <__kernel_rem_pio2>
 800a1ea:	9b02      	ldr	r3, [sp, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	4683      	mov	fp, r0
 800a1f0:	f6bf ae46 	bge.w	8009e80 <__ieee754_rem_pio2+0x80>
 800a1f4:	e9da 2100 	ldrd	r2, r1, [sl]
 800a1f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1fc:	e9ca 2300 	strd	r2, r3, [sl]
 800a200:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a204:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a208:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a20c:	e73a      	b.n	800a084 <__ieee754_rem_pio2+0x284>
 800a20e:	bf00      	nop
 800a210:	41700000 	.word	0x41700000
 800a214:	0801e6dc 	.word	0x0801e6dc

0800a218 <__ieee754_sqrtf>:
 800a218:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a21c:	4770      	bx	lr
	...

0800a220 <__kernel_cos>:
 800a220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a224:	ec57 6b10 	vmov	r6, r7, d0
 800a228:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a22c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a230:	ed8d 1b00 	vstr	d1, [sp]
 800a234:	da07      	bge.n	800a246 <__kernel_cos+0x26>
 800a236:	ee10 0a10 	vmov	r0, s0
 800a23a:	4639      	mov	r1, r7
 800a23c:	f7f6 fd0c 	bl	8000c58 <__aeabi_d2iz>
 800a240:	2800      	cmp	r0, #0
 800a242:	f000 8088 	beq.w	800a356 <__kernel_cos+0x136>
 800a246:	4632      	mov	r2, r6
 800a248:	463b      	mov	r3, r7
 800a24a:	4630      	mov	r0, r6
 800a24c:	4639      	mov	r1, r7
 800a24e:	f7f6 fa53 	bl	80006f8 <__aeabi_dmul>
 800a252:	4b51      	ldr	r3, [pc, #324]	; (800a398 <__kernel_cos+0x178>)
 800a254:	2200      	movs	r2, #0
 800a256:	4604      	mov	r4, r0
 800a258:	460d      	mov	r5, r1
 800a25a:	f7f6 fa4d 	bl	80006f8 <__aeabi_dmul>
 800a25e:	a340      	add	r3, pc, #256	; (adr r3, 800a360 <__kernel_cos+0x140>)
 800a260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a264:	4682      	mov	sl, r0
 800a266:	468b      	mov	fp, r1
 800a268:	4620      	mov	r0, r4
 800a26a:	4629      	mov	r1, r5
 800a26c:	f7f6 fa44 	bl	80006f8 <__aeabi_dmul>
 800a270:	a33d      	add	r3, pc, #244	; (adr r3, 800a368 <__kernel_cos+0x148>)
 800a272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a276:	f7f6 f889 	bl	800038c <__adddf3>
 800a27a:	4622      	mov	r2, r4
 800a27c:	462b      	mov	r3, r5
 800a27e:	f7f6 fa3b 	bl	80006f8 <__aeabi_dmul>
 800a282:	a33b      	add	r3, pc, #236	; (adr r3, 800a370 <__kernel_cos+0x150>)
 800a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a288:	f7f6 f87e 	bl	8000388 <__aeabi_dsub>
 800a28c:	4622      	mov	r2, r4
 800a28e:	462b      	mov	r3, r5
 800a290:	f7f6 fa32 	bl	80006f8 <__aeabi_dmul>
 800a294:	a338      	add	r3, pc, #224	; (adr r3, 800a378 <__kernel_cos+0x158>)
 800a296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29a:	f7f6 f877 	bl	800038c <__adddf3>
 800a29e:	4622      	mov	r2, r4
 800a2a0:	462b      	mov	r3, r5
 800a2a2:	f7f6 fa29 	bl	80006f8 <__aeabi_dmul>
 800a2a6:	a336      	add	r3, pc, #216	; (adr r3, 800a380 <__kernel_cos+0x160>)
 800a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ac:	f7f6 f86c 	bl	8000388 <__aeabi_dsub>
 800a2b0:	4622      	mov	r2, r4
 800a2b2:	462b      	mov	r3, r5
 800a2b4:	f7f6 fa20 	bl	80006f8 <__aeabi_dmul>
 800a2b8:	a333      	add	r3, pc, #204	; (adr r3, 800a388 <__kernel_cos+0x168>)
 800a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2be:	f7f6 f865 	bl	800038c <__adddf3>
 800a2c2:	4622      	mov	r2, r4
 800a2c4:	462b      	mov	r3, r5
 800a2c6:	f7f6 fa17 	bl	80006f8 <__aeabi_dmul>
 800a2ca:	4622      	mov	r2, r4
 800a2cc:	462b      	mov	r3, r5
 800a2ce:	f7f6 fa13 	bl	80006f8 <__aeabi_dmul>
 800a2d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	460d      	mov	r5, r1
 800a2da:	4630      	mov	r0, r6
 800a2dc:	4639      	mov	r1, r7
 800a2de:	f7f6 fa0b 	bl	80006f8 <__aeabi_dmul>
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f7f6 f84d 	bl	8000388 <__aeabi_dsub>
 800a2ee:	4b2b      	ldr	r3, [pc, #172]	; (800a39c <__kernel_cos+0x17c>)
 800a2f0:	4598      	cmp	r8, r3
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	460f      	mov	r7, r1
 800a2f6:	dc10      	bgt.n	800a31a <__kernel_cos+0xfa>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4650      	mov	r0, sl
 800a2fe:	4659      	mov	r1, fp
 800a300:	f7f6 f842 	bl	8000388 <__aeabi_dsub>
 800a304:	460b      	mov	r3, r1
 800a306:	4926      	ldr	r1, [pc, #152]	; (800a3a0 <__kernel_cos+0x180>)
 800a308:	4602      	mov	r2, r0
 800a30a:	2000      	movs	r0, #0
 800a30c:	f7f6 f83c 	bl	8000388 <__aeabi_dsub>
 800a310:	ec41 0b10 	vmov	d0, r0, r1
 800a314:	b003      	add	sp, #12
 800a316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31a:	4b22      	ldr	r3, [pc, #136]	; (800a3a4 <__kernel_cos+0x184>)
 800a31c:	4920      	ldr	r1, [pc, #128]	; (800a3a0 <__kernel_cos+0x180>)
 800a31e:	4598      	cmp	r8, r3
 800a320:	bfcc      	ite	gt
 800a322:	4d21      	ldrgt	r5, [pc, #132]	; (800a3a8 <__kernel_cos+0x188>)
 800a324:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a328:	2400      	movs	r4, #0
 800a32a:	4622      	mov	r2, r4
 800a32c:	462b      	mov	r3, r5
 800a32e:	2000      	movs	r0, #0
 800a330:	f7f6 f82a 	bl	8000388 <__aeabi_dsub>
 800a334:	4622      	mov	r2, r4
 800a336:	4680      	mov	r8, r0
 800a338:	4689      	mov	r9, r1
 800a33a:	462b      	mov	r3, r5
 800a33c:	4650      	mov	r0, sl
 800a33e:	4659      	mov	r1, fp
 800a340:	f7f6 f822 	bl	8000388 <__aeabi_dsub>
 800a344:	4632      	mov	r2, r6
 800a346:	463b      	mov	r3, r7
 800a348:	f7f6 f81e 	bl	8000388 <__aeabi_dsub>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4640      	mov	r0, r8
 800a352:	4649      	mov	r1, r9
 800a354:	e7da      	b.n	800a30c <__kernel_cos+0xec>
 800a356:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a390 <__kernel_cos+0x170>
 800a35a:	e7db      	b.n	800a314 <__kernel_cos+0xf4>
 800a35c:	f3af 8000 	nop.w
 800a360:	be8838d4 	.word	0xbe8838d4
 800a364:	bda8fae9 	.word	0xbda8fae9
 800a368:	bdb4b1c4 	.word	0xbdb4b1c4
 800a36c:	3e21ee9e 	.word	0x3e21ee9e
 800a370:	809c52ad 	.word	0x809c52ad
 800a374:	3e927e4f 	.word	0x3e927e4f
 800a378:	19cb1590 	.word	0x19cb1590
 800a37c:	3efa01a0 	.word	0x3efa01a0
 800a380:	16c15177 	.word	0x16c15177
 800a384:	3f56c16c 	.word	0x3f56c16c
 800a388:	5555554c 	.word	0x5555554c
 800a38c:	3fa55555 	.word	0x3fa55555
 800a390:	00000000 	.word	0x00000000
 800a394:	3ff00000 	.word	0x3ff00000
 800a398:	3fe00000 	.word	0x3fe00000
 800a39c:	3fd33332 	.word	0x3fd33332
 800a3a0:	3ff00000 	.word	0x3ff00000
 800a3a4:	3fe90000 	.word	0x3fe90000
 800a3a8:	3fd20000 	.word	0x3fd20000
 800a3ac:	00000000 	.word	0x00000000

0800a3b0 <__kernel_rem_pio2>:
 800a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b4:	ed2d 8b02 	vpush	{d8}
 800a3b8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a3bc:	f112 0f14 	cmn.w	r2, #20
 800a3c0:	9308      	str	r3, [sp, #32]
 800a3c2:	9101      	str	r1, [sp, #4]
 800a3c4:	4bc4      	ldr	r3, [pc, #784]	; (800a6d8 <__kernel_rem_pio2+0x328>)
 800a3c6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a3c8:	900b      	str	r0, [sp, #44]	; 0x2c
 800a3ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3ce:	9302      	str	r3, [sp, #8]
 800a3d0:	9b08      	ldr	r3, [sp, #32]
 800a3d2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a3d6:	bfa8      	it	ge
 800a3d8:	1ed4      	subge	r4, r2, #3
 800a3da:	9306      	str	r3, [sp, #24]
 800a3dc:	bfb2      	itee	lt
 800a3de:	2400      	movlt	r4, #0
 800a3e0:	2318      	movge	r3, #24
 800a3e2:	fb94 f4f3 	sdivge	r4, r4, r3
 800a3e6:	f06f 0317 	mvn.w	r3, #23
 800a3ea:	fb04 3303 	mla	r3, r4, r3, r3
 800a3ee:	eb03 0a02 	add.w	sl, r3, r2
 800a3f2:	9b02      	ldr	r3, [sp, #8]
 800a3f4:	9a06      	ldr	r2, [sp, #24]
 800a3f6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a6c8 <__kernel_rem_pio2+0x318>
 800a3fa:	eb03 0802 	add.w	r8, r3, r2
 800a3fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a400:	1aa7      	subs	r7, r4, r2
 800a402:	ae22      	add	r6, sp, #136	; 0x88
 800a404:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a408:	2500      	movs	r5, #0
 800a40a:	4545      	cmp	r5, r8
 800a40c:	dd13      	ble.n	800a436 <__kernel_rem_pio2+0x86>
 800a40e:	9b08      	ldr	r3, [sp, #32]
 800a410:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a6c8 <__kernel_rem_pio2+0x318>
 800a414:	aa22      	add	r2, sp, #136	; 0x88
 800a416:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a41a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a41e:	f04f 0800 	mov.w	r8, #0
 800a422:	9b02      	ldr	r3, [sp, #8]
 800a424:	4598      	cmp	r8, r3
 800a426:	dc2f      	bgt.n	800a488 <__kernel_rem_pio2+0xd8>
 800a428:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a42c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a430:	462f      	mov	r7, r5
 800a432:	2600      	movs	r6, #0
 800a434:	e01b      	b.n	800a46e <__kernel_rem_pio2+0xbe>
 800a436:	42ef      	cmn	r7, r5
 800a438:	d407      	bmi.n	800a44a <__kernel_rem_pio2+0x9a>
 800a43a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a43e:	f7f6 f8f1 	bl	8000624 <__aeabi_i2d>
 800a442:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a446:	3501      	adds	r5, #1
 800a448:	e7df      	b.n	800a40a <__kernel_rem_pio2+0x5a>
 800a44a:	ec51 0b18 	vmov	r0, r1, d8
 800a44e:	e7f8      	b.n	800a442 <__kernel_rem_pio2+0x92>
 800a450:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a454:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a458:	f7f6 f94e 	bl	80006f8 <__aeabi_dmul>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a464:	f7f5 ff92 	bl	800038c <__adddf3>
 800a468:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a46c:	3601      	adds	r6, #1
 800a46e:	9b06      	ldr	r3, [sp, #24]
 800a470:	429e      	cmp	r6, r3
 800a472:	f1a7 0708 	sub.w	r7, r7, #8
 800a476:	ddeb      	ble.n	800a450 <__kernel_rem_pio2+0xa0>
 800a478:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a47c:	f108 0801 	add.w	r8, r8, #1
 800a480:	ecab 7b02 	vstmia	fp!, {d7}
 800a484:	3508      	adds	r5, #8
 800a486:	e7cc      	b.n	800a422 <__kernel_rem_pio2+0x72>
 800a488:	9b02      	ldr	r3, [sp, #8]
 800a48a:	aa0e      	add	r2, sp, #56	; 0x38
 800a48c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a490:	930d      	str	r3, [sp, #52]	; 0x34
 800a492:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a494:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a498:	9c02      	ldr	r4, [sp, #8]
 800a49a:	930c      	str	r3, [sp, #48]	; 0x30
 800a49c:	00e3      	lsls	r3, r4, #3
 800a49e:	930a      	str	r3, [sp, #40]	; 0x28
 800a4a0:	ab9a      	add	r3, sp, #616	; 0x268
 800a4a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a4a6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a4aa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a4ae:	ab72      	add	r3, sp, #456	; 0x1c8
 800a4b0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a4b4:	46c3      	mov	fp, r8
 800a4b6:	46a1      	mov	r9, r4
 800a4b8:	f1b9 0f00 	cmp.w	r9, #0
 800a4bc:	f1a5 0508 	sub.w	r5, r5, #8
 800a4c0:	dc77      	bgt.n	800a5b2 <__kernel_rem_pio2+0x202>
 800a4c2:	ec47 6b10 	vmov	d0, r6, r7
 800a4c6:	4650      	mov	r0, sl
 800a4c8:	f000 fc0a 	bl	800ace0 <scalbn>
 800a4cc:	ec57 6b10 	vmov	r6, r7, d0
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a4d6:	ee10 0a10 	vmov	r0, s0
 800a4da:	4639      	mov	r1, r7
 800a4dc:	f7f6 f90c 	bl	80006f8 <__aeabi_dmul>
 800a4e0:	ec41 0b10 	vmov	d0, r0, r1
 800a4e4:	f000 fb7c 	bl	800abe0 <floor>
 800a4e8:	4b7c      	ldr	r3, [pc, #496]	; (800a6dc <__kernel_rem_pio2+0x32c>)
 800a4ea:	ec51 0b10 	vmov	r0, r1, d0
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f7f6 f902 	bl	80006f8 <__aeabi_dmul>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	4639      	mov	r1, r7
 800a4fc:	f7f5 ff44 	bl	8000388 <__aeabi_dsub>
 800a500:	460f      	mov	r7, r1
 800a502:	4606      	mov	r6, r0
 800a504:	f7f6 fba8 	bl	8000c58 <__aeabi_d2iz>
 800a508:	9004      	str	r0, [sp, #16]
 800a50a:	f7f6 f88b 	bl	8000624 <__aeabi_i2d>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4630      	mov	r0, r6
 800a514:	4639      	mov	r1, r7
 800a516:	f7f5 ff37 	bl	8000388 <__aeabi_dsub>
 800a51a:	f1ba 0f00 	cmp.w	sl, #0
 800a51e:	4606      	mov	r6, r0
 800a520:	460f      	mov	r7, r1
 800a522:	dd6d      	ble.n	800a600 <__kernel_rem_pio2+0x250>
 800a524:	1e62      	subs	r2, r4, #1
 800a526:	ab0e      	add	r3, sp, #56	; 0x38
 800a528:	9d04      	ldr	r5, [sp, #16]
 800a52a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a52e:	f1ca 0118 	rsb	r1, sl, #24
 800a532:	fa40 f301 	asr.w	r3, r0, r1
 800a536:	441d      	add	r5, r3
 800a538:	408b      	lsls	r3, r1
 800a53a:	1ac0      	subs	r0, r0, r3
 800a53c:	ab0e      	add	r3, sp, #56	; 0x38
 800a53e:	9504      	str	r5, [sp, #16]
 800a540:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a544:	f1ca 0317 	rsb	r3, sl, #23
 800a548:	fa40 fb03 	asr.w	fp, r0, r3
 800a54c:	f1bb 0f00 	cmp.w	fp, #0
 800a550:	dd65      	ble.n	800a61e <__kernel_rem_pio2+0x26e>
 800a552:	9b04      	ldr	r3, [sp, #16]
 800a554:	2200      	movs	r2, #0
 800a556:	3301      	adds	r3, #1
 800a558:	9304      	str	r3, [sp, #16]
 800a55a:	4615      	mov	r5, r2
 800a55c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a560:	4294      	cmp	r4, r2
 800a562:	f300 809c 	bgt.w	800a69e <__kernel_rem_pio2+0x2ee>
 800a566:	f1ba 0f00 	cmp.w	sl, #0
 800a56a:	dd07      	ble.n	800a57c <__kernel_rem_pio2+0x1cc>
 800a56c:	f1ba 0f01 	cmp.w	sl, #1
 800a570:	f000 80c0 	beq.w	800a6f4 <__kernel_rem_pio2+0x344>
 800a574:	f1ba 0f02 	cmp.w	sl, #2
 800a578:	f000 80c6 	beq.w	800a708 <__kernel_rem_pio2+0x358>
 800a57c:	f1bb 0f02 	cmp.w	fp, #2
 800a580:	d14d      	bne.n	800a61e <__kernel_rem_pio2+0x26e>
 800a582:	4632      	mov	r2, r6
 800a584:	463b      	mov	r3, r7
 800a586:	4956      	ldr	r1, [pc, #344]	; (800a6e0 <__kernel_rem_pio2+0x330>)
 800a588:	2000      	movs	r0, #0
 800a58a:	f7f5 fefd 	bl	8000388 <__aeabi_dsub>
 800a58e:	4606      	mov	r6, r0
 800a590:	460f      	mov	r7, r1
 800a592:	2d00      	cmp	r5, #0
 800a594:	d043      	beq.n	800a61e <__kernel_rem_pio2+0x26e>
 800a596:	4650      	mov	r0, sl
 800a598:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a6d0 <__kernel_rem_pio2+0x320>
 800a59c:	f000 fba0 	bl	800ace0 <scalbn>
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	ec53 2b10 	vmov	r2, r3, d0
 800a5a8:	f7f5 feee 	bl	8000388 <__aeabi_dsub>
 800a5ac:	4606      	mov	r6, r0
 800a5ae:	460f      	mov	r7, r1
 800a5b0:	e035      	b.n	800a61e <__kernel_rem_pio2+0x26e>
 800a5b2:	4b4c      	ldr	r3, [pc, #304]	; (800a6e4 <__kernel_rem_pio2+0x334>)
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	4639      	mov	r1, r7
 800a5ba:	f7f6 f89d 	bl	80006f8 <__aeabi_dmul>
 800a5be:	f7f6 fb4b 	bl	8000c58 <__aeabi_d2iz>
 800a5c2:	f7f6 f82f 	bl	8000624 <__aeabi_i2d>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	ec43 2b18 	vmov	d8, r2, r3
 800a5ce:	4b46      	ldr	r3, [pc, #280]	; (800a6e8 <__kernel_rem_pio2+0x338>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f7f6 f891 	bl	80006f8 <__aeabi_dmul>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4630      	mov	r0, r6
 800a5dc:	4639      	mov	r1, r7
 800a5de:	f7f5 fed3 	bl	8000388 <__aeabi_dsub>
 800a5e2:	f7f6 fb39 	bl	8000c58 <__aeabi_d2iz>
 800a5e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5ea:	f84b 0b04 	str.w	r0, [fp], #4
 800a5ee:	ec51 0b18 	vmov	r0, r1, d8
 800a5f2:	f7f5 fecb 	bl	800038c <__adddf3>
 800a5f6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	460f      	mov	r7, r1
 800a5fe:	e75b      	b.n	800a4b8 <__kernel_rem_pio2+0x108>
 800a600:	d106      	bne.n	800a610 <__kernel_rem_pio2+0x260>
 800a602:	1e63      	subs	r3, r4, #1
 800a604:	aa0e      	add	r2, sp, #56	; 0x38
 800a606:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a60a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a60e:	e79d      	b.n	800a54c <__kernel_rem_pio2+0x19c>
 800a610:	4b36      	ldr	r3, [pc, #216]	; (800a6ec <__kernel_rem_pio2+0x33c>)
 800a612:	2200      	movs	r2, #0
 800a614:	f7f6 faf6 	bl	8000c04 <__aeabi_dcmpge>
 800a618:	2800      	cmp	r0, #0
 800a61a:	d13d      	bne.n	800a698 <__kernel_rem_pio2+0x2e8>
 800a61c:	4683      	mov	fp, r0
 800a61e:	2200      	movs	r2, #0
 800a620:	2300      	movs	r3, #0
 800a622:	4630      	mov	r0, r6
 800a624:	4639      	mov	r1, r7
 800a626:	f7f6 facf 	bl	8000bc8 <__aeabi_dcmpeq>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	f000 80c0 	beq.w	800a7b0 <__kernel_rem_pio2+0x400>
 800a630:	1e65      	subs	r5, r4, #1
 800a632:	462b      	mov	r3, r5
 800a634:	2200      	movs	r2, #0
 800a636:	9902      	ldr	r1, [sp, #8]
 800a638:	428b      	cmp	r3, r1
 800a63a:	da6c      	bge.n	800a716 <__kernel_rem_pio2+0x366>
 800a63c:	2a00      	cmp	r2, #0
 800a63e:	f000 8089 	beq.w	800a754 <__kernel_rem_pio2+0x3a4>
 800a642:	ab0e      	add	r3, sp, #56	; 0x38
 800a644:	f1aa 0a18 	sub.w	sl, sl, #24
 800a648:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 80ad 	beq.w	800a7ac <__kernel_rem_pio2+0x3fc>
 800a652:	4650      	mov	r0, sl
 800a654:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a6d0 <__kernel_rem_pio2+0x320>
 800a658:	f000 fb42 	bl	800ace0 <scalbn>
 800a65c:	ab9a      	add	r3, sp, #616	; 0x268
 800a65e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a662:	ec57 6b10 	vmov	r6, r7, d0
 800a666:	00ec      	lsls	r4, r5, #3
 800a668:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a66c:	46aa      	mov	sl, r5
 800a66e:	f1ba 0f00 	cmp.w	sl, #0
 800a672:	f280 80d6 	bge.w	800a822 <__kernel_rem_pio2+0x472>
 800a676:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a6c8 <__kernel_rem_pio2+0x318>
 800a67a:	462e      	mov	r6, r5
 800a67c:	2e00      	cmp	r6, #0
 800a67e:	f2c0 8104 	blt.w	800a88a <__kernel_rem_pio2+0x4da>
 800a682:	ab72      	add	r3, sp, #456	; 0x1c8
 800a684:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a688:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a6f0 <__kernel_rem_pio2+0x340>
 800a68c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a690:	f04f 0800 	mov.w	r8, #0
 800a694:	1baf      	subs	r7, r5, r6
 800a696:	e0ea      	b.n	800a86e <__kernel_rem_pio2+0x4be>
 800a698:	f04f 0b02 	mov.w	fp, #2
 800a69c:	e759      	b.n	800a552 <__kernel_rem_pio2+0x1a2>
 800a69e:	f8d8 3000 	ldr.w	r3, [r8]
 800a6a2:	b955      	cbnz	r5, 800a6ba <__kernel_rem_pio2+0x30a>
 800a6a4:	b123      	cbz	r3, 800a6b0 <__kernel_rem_pio2+0x300>
 800a6a6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a6aa:	f8c8 3000 	str.w	r3, [r8]
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	3201      	adds	r2, #1
 800a6b2:	f108 0804 	add.w	r8, r8, #4
 800a6b6:	461d      	mov	r5, r3
 800a6b8:	e752      	b.n	800a560 <__kernel_rem_pio2+0x1b0>
 800a6ba:	1acb      	subs	r3, r1, r3
 800a6bc:	f8c8 3000 	str.w	r3, [r8]
 800a6c0:	462b      	mov	r3, r5
 800a6c2:	e7f5      	b.n	800a6b0 <__kernel_rem_pio2+0x300>
 800a6c4:	f3af 8000 	nop.w
	...
 800a6d4:	3ff00000 	.word	0x3ff00000
 800a6d8:	0801e828 	.word	0x0801e828
 800a6dc:	40200000 	.word	0x40200000
 800a6e0:	3ff00000 	.word	0x3ff00000
 800a6e4:	3e700000 	.word	0x3e700000
 800a6e8:	41700000 	.word	0x41700000
 800a6ec:	3fe00000 	.word	0x3fe00000
 800a6f0:	0801e7e8 	.word	0x0801e7e8
 800a6f4:	1e62      	subs	r2, r4, #1
 800a6f6:	ab0e      	add	r3, sp, #56	; 0x38
 800a6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a700:	a90e      	add	r1, sp, #56	; 0x38
 800a702:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a706:	e739      	b.n	800a57c <__kernel_rem_pio2+0x1cc>
 800a708:	1e62      	subs	r2, r4, #1
 800a70a:	ab0e      	add	r3, sp, #56	; 0x38
 800a70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a710:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a714:	e7f4      	b.n	800a700 <__kernel_rem_pio2+0x350>
 800a716:	a90e      	add	r1, sp, #56	; 0x38
 800a718:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a71c:	3b01      	subs	r3, #1
 800a71e:	430a      	orrs	r2, r1
 800a720:	e789      	b.n	800a636 <__kernel_rem_pio2+0x286>
 800a722:	3301      	adds	r3, #1
 800a724:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a728:	2900      	cmp	r1, #0
 800a72a:	d0fa      	beq.n	800a722 <__kernel_rem_pio2+0x372>
 800a72c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a72e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a732:	446a      	add	r2, sp
 800a734:	3a98      	subs	r2, #152	; 0x98
 800a736:	920a      	str	r2, [sp, #40]	; 0x28
 800a738:	9a08      	ldr	r2, [sp, #32]
 800a73a:	18e3      	adds	r3, r4, r3
 800a73c:	18a5      	adds	r5, r4, r2
 800a73e:	aa22      	add	r2, sp, #136	; 0x88
 800a740:	f104 0801 	add.w	r8, r4, #1
 800a744:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a748:	9304      	str	r3, [sp, #16]
 800a74a:	9b04      	ldr	r3, [sp, #16]
 800a74c:	4543      	cmp	r3, r8
 800a74e:	da04      	bge.n	800a75a <__kernel_rem_pio2+0x3aa>
 800a750:	461c      	mov	r4, r3
 800a752:	e6a3      	b.n	800a49c <__kernel_rem_pio2+0xec>
 800a754:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a756:	2301      	movs	r3, #1
 800a758:	e7e4      	b.n	800a724 <__kernel_rem_pio2+0x374>
 800a75a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a75c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a760:	f7f5 ff60 	bl	8000624 <__aeabi_i2d>
 800a764:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a76a:	46ab      	mov	fp, r5
 800a76c:	461c      	mov	r4, r3
 800a76e:	f04f 0900 	mov.w	r9, #0
 800a772:	2600      	movs	r6, #0
 800a774:	2700      	movs	r7, #0
 800a776:	9b06      	ldr	r3, [sp, #24]
 800a778:	4599      	cmp	r9, r3
 800a77a:	dd06      	ble.n	800a78a <__kernel_rem_pio2+0x3da>
 800a77c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a77e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a782:	f108 0801 	add.w	r8, r8, #1
 800a786:	930a      	str	r3, [sp, #40]	; 0x28
 800a788:	e7df      	b.n	800a74a <__kernel_rem_pio2+0x39a>
 800a78a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a78e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a792:	f7f5 ffb1 	bl	80006f8 <__aeabi_dmul>
 800a796:	4602      	mov	r2, r0
 800a798:	460b      	mov	r3, r1
 800a79a:	4630      	mov	r0, r6
 800a79c:	4639      	mov	r1, r7
 800a79e:	f7f5 fdf5 	bl	800038c <__adddf3>
 800a7a2:	f109 0901 	add.w	r9, r9, #1
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	460f      	mov	r7, r1
 800a7aa:	e7e4      	b.n	800a776 <__kernel_rem_pio2+0x3c6>
 800a7ac:	3d01      	subs	r5, #1
 800a7ae:	e748      	b.n	800a642 <__kernel_rem_pio2+0x292>
 800a7b0:	ec47 6b10 	vmov	d0, r6, r7
 800a7b4:	f1ca 0000 	rsb	r0, sl, #0
 800a7b8:	f000 fa92 	bl	800ace0 <scalbn>
 800a7bc:	ec57 6b10 	vmov	r6, r7, d0
 800a7c0:	4ba0      	ldr	r3, [pc, #640]	; (800aa44 <__kernel_rem_pio2+0x694>)
 800a7c2:	ee10 0a10 	vmov	r0, s0
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	4639      	mov	r1, r7
 800a7ca:	f7f6 fa1b 	bl	8000c04 <__aeabi_dcmpge>
 800a7ce:	b1f8      	cbz	r0, 800a810 <__kernel_rem_pio2+0x460>
 800a7d0:	4b9d      	ldr	r3, [pc, #628]	; (800aa48 <__kernel_rem_pio2+0x698>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	4639      	mov	r1, r7
 800a7d8:	f7f5 ff8e 	bl	80006f8 <__aeabi_dmul>
 800a7dc:	f7f6 fa3c 	bl	8000c58 <__aeabi_d2iz>
 800a7e0:	4680      	mov	r8, r0
 800a7e2:	f7f5 ff1f 	bl	8000624 <__aeabi_i2d>
 800a7e6:	4b97      	ldr	r3, [pc, #604]	; (800aa44 <__kernel_rem_pio2+0x694>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f7f5 ff85 	bl	80006f8 <__aeabi_dmul>
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f7f5 fdc7 	bl	8000388 <__aeabi_dsub>
 800a7fa:	f7f6 fa2d 	bl	8000c58 <__aeabi_d2iz>
 800a7fe:	1c65      	adds	r5, r4, #1
 800a800:	ab0e      	add	r3, sp, #56	; 0x38
 800a802:	f10a 0a18 	add.w	sl, sl, #24
 800a806:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a80a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a80e:	e720      	b.n	800a652 <__kernel_rem_pio2+0x2a2>
 800a810:	4630      	mov	r0, r6
 800a812:	4639      	mov	r1, r7
 800a814:	f7f6 fa20 	bl	8000c58 <__aeabi_d2iz>
 800a818:	ab0e      	add	r3, sp, #56	; 0x38
 800a81a:	4625      	mov	r5, r4
 800a81c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a820:	e717      	b.n	800a652 <__kernel_rem_pio2+0x2a2>
 800a822:	ab0e      	add	r3, sp, #56	; 0x38
 800a824:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a828:	f7f5 fefc 	bl	8000624 <__aeabi_i2d>
 800a82c:	4632      	mov	r2, r6
 800a82e:	463b      	mov	r3, r7
 800a830:	f7f5 ff62 	bl	80006f8 <__aeabi_dmul>
 800a834:	4b84      	ldr	r3, [pc, #528]	; (800aa48 <__kernel_rem_pio2+0x698>)
 800a836:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a83a:	2200      	movs	r2, #0
 800a83c:	4630      	mov	r0, r6
 800a83e:	4639      	mov	r1, r7
 800a840:	f7f5 ff5a 	bl	80006f8 <__aeabi_dmul>
 800a844:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a848:	4606      	mov	r6, r0
 800a84a:	460f      	mov	r7, r1
 800a84c:	e70f      	b.n	800a66e <__kernel_rem_pio2+0x2be>
 800a84e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a852:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a856:	f7f5 ff4f 	bl	80006f8 <__aeabi_dmul>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a862:	f7f5 fd93 	bl	800038c <__adddf3>
 800a866:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a86a:	f108 0801 	add.w	r8, r8, #1
 800a86e:	9b02      	ldr	r3, [sp, #8]
 800a870:	4598      	cmp	r8, r3
 800a872:	dc01      	bgt.n	800a878 <__kernel_rem_pio2+0x4c8>
 800a874:	45b8      	cmp	r8, r7
 800a876:	ddea      	ble.n	800a84e <__kernel_rem_pio2+0x49e>
 800a878:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a87c:	ab4a      	add	r3, sp, #296	; 0x128
 800a87e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a882:	ed87 7b00 	vstr	d7, [r7]
 800a886:	3e01      	subs	r6, #1
 800a888:	e6f8      	b.n	800a67c <__kernel_rem_pio2+0x2cc>
 800a88a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	dc0b      	bgt.n	800a8a8 <__kernel_rem_pio2+0x4f8>
 800a890:	2b00      	cmp	r3, #0
 800a892:	dc35      	bgt.n	800a900 <__kernel_rem_pio2+0x550>
 800a894:	d059      	beq.n	800a94a <__kernel_rem_pio2+0x59a>
 800a896:	9b04      	ldr	r3, [sp, #16]
 800a898:	f003 0007 	and.w	r0, r3, #7
 800a89c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a8a0:	ecbd 8b02 	vpop	{d8}
 800a8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d1f3      	bne.n	800a896 <__kernel_rem_pio2+0x4e6>
 800a8ae:	ab4a      	add	r3, sp, #296	; 0x128
 800a8b0:	4423      	add	r3, r4
 800a8b2:	9306      	str	r3, [sp, #24]
 800a8b4:	461c      	mov	r4, r3
 800a8b6:	469a      	mov	sl, r3
 800a8b8:	9502      	str	r5, [sp, #8]
 800a8ba:	9b02      	ldr	r3, [sp, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f1aa 0a08 	sub.w	sl, sl, #8
 800a8c2:	dc6b      	bgt.n	800a99c <__kernel_rem_pio2+0x5ec>
 800a8c4:	46aa      	mov	sl, r5
 800a8c6:	f1ba 0f01 	cmp.w	sl, #1
 800a8ca:	f1a4 0408 	sub.w	r4, r4, #8
 800a8ce:	f300 8085 	bgt.w	800a9dc <__kernel_rem_pio2+0x62c>
 800a8d2:	9c06      	ldr	r4, [sp, #24]
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	3408      	adds	r4, #8
 800a8d8:	2100      	movs	r1, #0
 800a8da:	2d01      	cmp	r5, #1
 800a8dc:	f300 809d 	bgt.w	800aa1a <__kernel_rem_pio2+0x66a>
 800a8e0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a8e4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a8e8:	f1bb 0f00 	cmp.w	fp, #0
 800a8ec:	f040 809b 	bne.w	800aa26 <__kernel_rem_pio2+0x676>
 800a8f0:	9b01      	ldr	r3, [sp, #4]
 800a8f2:	e9c3 5600 	strd	r5, r6, [r3]
 800a8f6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a8fa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a8fe:	e7ca      	b.n	800a896 <__kernel_rem_pio2+0x4e6>
 800a900:	3408      	adds	r4, #8
 800a902:	ab4a      	add	r3, sp, #296	; 0x128
 800a904:	441c      	add	r4, r3
 800a906:	462e      	mov	r6, r5
 800a908:	2000      	movs	r0, #0
 800a90a:	2100      	movs	r1, #0
 800a90c:	2e00      	cmp	r6, #0
 800a90e:	da36      	bge.n	800a97e <__kernel_rem_pio2+0x5ce>
 800a910:	f1bb 0f00 	cmp.w	fp, #0
 800a914:	d039      	beq.n	800a98a <__kernel_rem_pio2+0x5da>
 800a916:	4602      	mov	r2, r0
 800a918:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a91c:	9c01      	ldr	r4, [sp, #4]
 800a91e:	e9c4 2300 	strd	r2, r3, [r4]
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a92a:	f7f5 fd2d 	bl	8000388 <__aeabi_dsub>
 800a92e:	ae4c      	add	r6, sp, #304	; 0x130
 800a930:	2401      	movs	r4, #1
 800a932:	42a5      	cmp	r5, r4
 800a934:	da2c      	bge.n	800a990 <__kernel_rem_pio2+0x5e0>
 800a936:	f1bb 0f00 	cmp.w	fp, #0
 800a93a:	d002      	beq.n	800a942 <__kernel_rem_pio2+0x592>
 800a93c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a940:	4619      	mov	r1, r3
 800a942:	9b01      	ldr	r3, [sp, #4]
 800a944:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a948:	e7a5      	b.n	800a896 <__kernel_rem_pio2+0x4e6>
 800a94a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a94e:	eb0d 0403 	add.w	r4, sp, r3
 800a952:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a956:	2000      	movs	r0, #0
 800a958:	2100      	movs	r1, #0
 800a95a:	2d00      	cmp	r5, #0
 800a95c:	da09      	bge.n	800a972 <__kernel_rem_pio2+0x5c2>
 800a95e:	f1bb 0f00 	cmp.w	fp, #0
 800a962:	d002      	beq.n	800a96a <__kernel_rem_pio2+0x5ba>
 800a964:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a968:	4619      	mov	r1, r3
 800a96a:	9b01      	ldr	r3, [sp, #4]
 800a96c:	e9c3 0100 	strd	r0, r1, [r3]
 800a970:	e791      	b.n	800a896 <__kernel_rem_pio2+0x4e6>
 800a972:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a976:	f7f5 fd09 	bl	800038c <__adddf3>
 800a97a:	3d01      	subs	r5, #1
 800a97c:	e7ed      	b.n	800a95a <__kernel_rem_pio2+0x5aa>
 800a97e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a982:	f7f5 fd03 	bl	800038c <__adddf3>
 800a986:	3e01      	subs	r6, #1
 800a988:	e7c0      	b.n	800a90c <__kernel_rem_pio2+0x55c>
 800a98a:	4602      	mov	r2, r0
 800a98c:	460b      	mov	r3, r1
 800a98e:	e7c5      	b.n	800a91c <__kernel_rem_pio2+0x56c>
 800a990:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a994:	f7f5 fcfa 	bl	800038c <__adddf3>
 800a998:	3401      	adds	r4, #1
 800a99a:	e7ca      	b.n	800a932 <__kernel_rem_pio2+0x582>
 800a99c:	e9da 8900 	ldrd	r8, r9, [sl]
 800a9a0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a9a4:	9b02      	ldr	r3, [sp, #8]
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	9302      	str	r3, [sp, #8]
 800a9aa:	4632      	mov	r2, r6
 800a9ac:	463b      	mov	r3, r7
 800a9ae:	4640      	mov	r0, r8
 800a9b0:	4649      	mov	r1, r9
 800a9b2:	f7f5 fceb 	bl	800038c <__adddf3>
 800a9b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4640      	mov	r0, r8
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	f7f5 fce1 	bl	8000388 <__aeabi_dsub>
 800a9c6:	4632      	mov	r2, r6
 800a9c8:	463b      	mov	r3, r7
 800a9ca:	f7f5 fcdf 	bl	800038c <__adddf3>
 800a9ce:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a9d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9d6:	ed8a 7b00 	vstr	d7, [sl]
 800a9da:	e76e      	b.n	800a8ba <__kernel_rem_pio2+0x50a>
 800a9dc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a9e0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a9e4:	4640      	mov	r0, r8
 800a9e6:	4632      	mov	r2, r6
 800a9e8:	463b      	mov	r3, r7
 800a9ea:	4649      	mov	r1, r9
 800a9ec:	f7f5 fcce 	bl	800038c <__adddf3>
 800a9f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	4640      	mov	r0, r8
 800a9fa:	4649      	mov	r1, r9
 800a9fc:	f7f5 fcc4 	bl	8000388 <__aeabi_dsub>
 800aa00:	4632      	mov	r2, r6
 800aa02:	463b      	mov	r3, r7
 800aa04:	f7f5 fcc2 	bl	800038c <__adddf3>
 800aa08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa10:	ed84 7b00 	vstr	d7, [r4]
 800aa14:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800aa18:	e755      	b.n	800a8c6 <__kernel_rem_pio2+0x516>
 800aa1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa1e:	f7f5 fcb5 	bl	800038c <__adddf3>
 800aa22:	3d01      	subs	r5, #1
 800aa24:	e759      	b.n	800a8da <__kernel_rem_pio2+0x52a>
 800aa26:	9b01      	ldr	r3, [sp, #4]
 800aa28:	9a01      	ldr	r2, [sp, #4]
 800aa2a:	601d      	str	r5, [r3, #0]
 800aa2c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800aa30:	605c      	str	r4, [r3, #4]
 800aa32:	609f      	str	r7, [r3, #8]
 800aa34:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800aa38:	60d3      	str	r3, [r2, #12]
 800aa3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa3e:	6110      	str	r0, [r2, #16]
 800aa40:	6153      	str	r3, [r2, #20]
 800aa42:	e728      	b.n	800a896 <__kernel_rem_pio2+0x4e6>
 800aa44:	41700000 	.word	0x41700000
 800aa48:	3e700000 	.word	0x3e700000
 800aa4c:	00000000 	.word	0x00000000

0800aa50 <__kernel_sin>:
 800aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	ed2d 8b04 	vpush	{d8-d9}
 800aa58:	eeb0 8a41 	vmov.f32	s16, s2
 800aa5c:	eef0 8a61 	vmov.f32	s17, s3
 800aa60:	ec55 4b10 	vmov	r4, r5, d0
 800aa64:	b083      	sub	sp, #12
 800aa66:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aa6a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aa6e:	9001      	str	r0, [sp, #4]
 800aa70:	da06      	bge.n	800aa80 <__kernel_sin+0x30>
 800aa72:	ee10 0a10 	vmov	r0, s0
 800aa76:	4629      	mov	r1, r5
 800aa78:	f7f6 f8ee 	bl	8000c58 <__aeabi_d2iz>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d051      	beq.n	800ab24 <__kernel_sin+0xd4>
 800aa80:	4622      	mov	r2, r4
 800aa82:	462b      	mov	r3, r5
 800aa84:	4620      	mov	r0, r4
 800aa86:	4629      	mov	r1, r5
 800aa88:	f7f5 fe36 	bl	80006f8 <__aeabi_dmul>
 800aa8c:	4682      	mov	sl, r0
 800aa8e:	468b      	mov	fp, r1
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	4620      	mov	r0, r4
 800aa96:	4629      	mov	r1, r5
 800aa98:	f7f5 fe2e 	bl	80006f8 <__aeabi_dmul>
 800aa9c:	a341      	add	r3, pc, #260	; (adr r3, 800aba4 <__kernel_sin+0x154>)
 800aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa2:	4680      	mov	r8, r0
 800aaa4:	4689      	mov	r9, r1
 800aaa6:	4650      	mov	r0, sl
 800aaa8:	4659      	mov	r1, fp
 800aaaa:	f7f5 fe25 	bl	80006f8 <__aeabi_dmul>
 800aaae:	a33f      	add	r3, pc, #252	; (adr r3, 800abac <__kernel_sin+0x15c>)
 800aab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab4:	f7f5 fc68 	bl	8000388 <__aeabi_dsub>
 800aab8:	4652      	mov	r2, sl
 800aaba:	465b      	mov	r3, fp
 800aabc:	f7f5 fe1c 	bl	80006f8 <__aeabi_dmul>
 800aac0:	a33c      	add	r3, pc, #240	; (adr r3, 800abb4 <__kernel_sin+0x164>)
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	f7f5 fc61 	bl	800038c <__adddf3>
 800aaca:	4652      	mov	r2, sl
 800aacc:	465b      	mov	r3, fp
 800aace:	f7f5 fe13 	bl	80006f8 <__aeabi_dmul>
 800aad2:	a33a      	add	r3, pc, #232	; (adr r3, 800abbc <__kernel_sin+0x16c>)
 800aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad8:	f7f5 fc56 	bl	8000388 <__aeabi_dsub>
 800aadc:	4652      	mov	r2, sl
 800aade:	465b      	mov	r3, fp
 800aae0:	f7f5 fe0a 	bl	80006f8 <__aeabi_dmul>
 800aae4:	a337      	add	r3, pc, #220	; (adr r3, 800abc4 <__kernel_sin+0x174>)
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	f7f5 fc4f 	bl	800038c <__adddf3>
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	4606      	mov	r6, r0
 800aaf2:	460f      	mov	r7, r1
 800aaf4:	b9eb      	cbnz	r3, 800ab32 <__kernel_sin+0xe2>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4650      	mov	r0, sl
 800aafc:	4659      	mov	r1, fp
 800aafe:	f7f5 fdfb 	bl	80006f8 <__aeabi_dmul>
 800ab02:	a325      	add	r3, pc, #148	; (adr r3, 800ab98 <__kernel_sin+0x148>)
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	f7f5 fc3e 	bl	8000388 <__aeabi_dsub>
 800ab0c:	4642      	mov	r2, r8
 800ab0e:	464b      	mov	r3, r9
 800ab10:	f7f5 fdf2 	bl	80006f8 <__aeabi_dmul>
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	4620      	mov	r0, r4
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	f7f5 fc36 	bl	800038c <__adddf3>
 800ab20:	4604      	mov	r4, r0
 800ab22:	460d      	mov	r5, r1
 800ab24:	ec45 4b10 	vmov	d0, r4, r5
 800ab28:	b003      	add	sp, #12
 800ab2a:	ecbd 8b04 	vpop	{d8-d9}
 800ab2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab32:	4b1b      	ldr	r3, [pc, #108]	; (800aba0 <__kernel_sin+0x150>)
 800ab34:	ec51 0b18 	vmov	r0, r1, d8
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f7f5 fddd 	bl	80006f8 <__aeabi_dmul>
 800ab3e:	4632      	mov	r2, r6
 800ab40:	ec41 0b19 	vmov	d9, r0, r1
 800ab44:	463b      	mov	r3, r7
 800ab46:	4640      	mov	r0, r8
 800ab48:	4649      	mov	r1, r9
 800ab4a:	f7f5 fdd5 	bl	80006f8 <__aeabi_dmul>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	460b      	mov	r3, r1
 800ab52:	ec51 0b19 	vmov	r0, r1, d9
 800ab56:	f7f5 fc17 	bl	8000388 <__aeabi_dsub>
 800ab5a:	4652      	mov	r2, sl
 800ab5c:	465b      	mov	r3, fp
 800ab5e:	f7f5 fdcb 	bl	80006f8 <__aeabi_dmul>
 800ab62:	ec53 2b18 	vmov	r2, r3, d8
 800ab66:	f7f5 fc0f 	bl	8000388 <__aeabi_dsub>
 800ab6a:	a30b      	add	r3, pc, #44	; (adr r3, 800ab98 <__kernel_sin+0x148>)
 800ab6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab70:	4606      	mov	r6, r0
 800ab72:	460f      	mov	r7, r1
 800ab74:	4640      	mov	r0, r8
 800ab76:	4649      	mov	r1, r9
 800ab78:	f7f5 fdbe 	bl	80006f8 <__aeabi_dmul>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4630      	mov	r0, r6
 800ab82:	4639      	mov	r1, r7
 800ab84:	f7f5 fc02 	bl	800038c <__adddf3>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	4629      	mov	r1, r5
 800ab90:	f7f5 fbfa 	bl	8000388 <__aeabi_dsub>
 800ab94:	e7c4      	b.n	800ab20 <__kernel_sin+0xd0>
 800ab96:	bf00      	nop
 800ab98:	55555549 	.word	0x55555549
 800ab9c:	3fc55555 	.word	0x3fc55555
 800aba0:	3fe00000 	.word	0x3fe00000
 800aba4:	5acfd57c 	.word	0x5acfd57c
 800aba8:	3de5d93a 	.word	0x3de5d93a
 800abac:	8a2b9ceb 	.word	0x8a2b9ceb
 800abb0:	3e5ae5e6 	.word	0x3e5ae5e6
 800abb4:	57b1fe7d 	.word	0x57b1fe7d
 800abb8:	3ec71de3 	.word	0x3ec71de3
 800abbc:	19c161d5 	.word	0x19c161d5
 800abc0:	3f2a01a0 	.word	0x3f2a01a0
 800abc4:	1110f8a6 	.word	0x1110f8a6
 800abc8:	3f811111 	.word	0x3f811111

0800abcc <fabs>:
 800abcc:	ec51 0b10 	vmov	r0, r1, d0
 800abd0:	ee10 2a10 	vmov	r2, s0
 800abd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800abd8:	ec43 2b10 	vmov	d0, r2, r3
 800abdc:	4770      	bx	lr
	...

0800abe0 <floor>:
 800abe0:	ec51 0b10 	vmov	r0, r1, d0
 800abe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800abec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800abf0:	2e13      	cmp	r6, #19
 800abf2:	ee10 5a10 	vmov	r5, s0
 800abf6:	ee10 8a10 	vmov	r8, s0
 800abfa:	460c      	mov	r4, r1
 800abfc:	dc32      	bgt.n	800ac64 <floor+0x84>
 800abfe:	2e00      	cmp	r6, #0
 800ac00:	da14      	bge.n	800ac2c <floor+0x4c>
 800ac02:	a333      	add	r3, pc, #204	; (adr r3, 800acd0 <floor+0xf0>)
 800ac04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac08:	f7f5 fbc0 	bl	800038c <__adddf3>
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	2300      	movs	r3, #0
 800ac10:	f7f6 f802 	bl	8000c18 <__aeabi_dcmpgt>
 800ac14:	b138      	cbz	r0, 800ac26 <floor+0x46>
 800ac16:	2c00      	cmp	r4, #0
 800ac18:	da57      	bge.n	800acca <floor+0xea>
 800ac1a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ac1e:	431d      	orrs	r5, r3
 800ac20:	d001      	beq.n	800ac26 <floor+0x46>
 800ac22:	4c2d      	ldr	r4, [pc, #180]	; (800acd8 <floor+0xf8>)
 800ac24:	2500      	movs	r5, #0
 800ac26:	4621      	mov	r1, r4
 800ac28:	4628      	mov	r0, r5
 800ac2a:	e025      	b.n	800ac78 <floor+0x98>
 800ac2c:	4f2b      	ldr	r7, [pc, #172]	; (800acdc <floor+0xfc>)
 800ac2e:	4137      	asrs	r7, r6
 800ac30:	ea01 0307 	and.w	r3, r1, r7
 800ac34:	4303      	orrs	r3, r0
 800ac36:	d01f      	beq.n	800ac78 <floor+0x98>
 800ac38:	a325      	add	r3, pc, #148	; (adr r3, 800acd0 <floor+0xf0>)
 800ac3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3e:	f7f5 fba5 	bl	800038c <__adddf3>
 800ac42:	2200      	movs	r2, #0
 800ac44:	2300      	movs	r3, #0
 800ac46:	f7f5 ffe7 	bl	8000c18 <__aeabi_dcmpgt>
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	d0eb      	beq.n	800ac26 <floor+0x46>
 800ac4e:	2c00      	cmp	r4, #0
 800ac50:	bfbe      	ittt	lt
 800ac52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ac56:	fa43 f606 	asrlt.w	r6, r3, r6
 800ac5a:	19a4      	addlt	r4, r4, r6
 800ac5c:	ea24 0407 	bic.w	r4, r4, r7
 800ac60:	2500      	movs	r5, #0
 800ac62:	e7e0      	b.n	800ac26 <floor+0x46>
 800ac64:	2e33      	cmp	r6, #51	; 0x33
 800ac66:	dd0b      	ble.n	800ac80 <floor+0xa0>
 800ac68:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ac6c:	d104      	bne.n	800ac78 <floor+0x98>
 800ac6e:	ee10 2a10 	vmov	r2, s0
 800ac72:	460b      	mov	r3, r1
 800ac74:	f7f5 fb8a 	bl	800038c <__adddf3>
 800ac78:	ec41 0b10 	vmov	d0, r0, r1
 800ac7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac80:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ac84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac88:	fa23 f707 	lsr.w	r7, r3, r7
 800ac8c:	4207      	tst	r7, r0
 800ac8e:	d0f3      	beq.n	800ac78 <floor+0x98>
 800ac90:	a30f      	add	r3, pc, #60	; (adr r3, 800acd0 <floor+0xf0>)
 800ac92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac96:	f7f5 fb79 	bl	800038c <__adddf3>
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	f7f5 ffbb 	bl	8000c18 <__aeabi_dcmpgt>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d0bf      	beq.n	800ac26 <floor+0x46>
 800aca6:	2c00      	cmp	r4, #0
 800aca8:	da02      	bge.n	800acb0 <floor+0xd0>
 800acaa:	2e14      	cmp	r6, #20
 800acac:	d103      	bne.n	800acb6 <floor+0xd6>
 800acae:	3401      	adds	r4, #1
 800acb0:	ea25 0507 	bic.w	r5, r5, r7
 800acb4:	e7b7      	b.n	800ac26 <floor+0x46>
 800acb6:	2301      	movs	r3, #1
 800acb8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800acbc:	fa03 f606 	lsl.w	r6, r3, r6
 800acc0:	4435      	add	r5, r6
 800acc2:	4545      	cmp	r5, r8
 800acc4:	bf38      	it	cc
 800acc6:	18e4      	addcc	r4, r4, r3
 800acc8:	e7f2      	b.n	800acb0 <floor+0xd0>
 800acca:	2500      	movs	r5, #0
 800accc:	462c      	mov	r4, r5
 800acce:	e7aa      	b.n	800ac26 <floor+0x46>
 800acd0:	8800759c 	.word	0x8800759c
 800acd4:	7e37e43c 	.word	0x7e37e43c
 800acd8:	bff00000 	.word	0xbff00000
 800acdc:	000fffff 	.word	0x000fffff

0800ace0 <scalbn>:
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	ec55 4b10 	vmov	r4, r5, d0
 800ace6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800acea:	4606      	mov	r6, r0
 800acec:	462b      	mov	r3, r5
 800acee:	b99a      	cbnz	r2, 800ad18 <scalbn+0x38>
 800acf0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800acf4:	4323      	orrs	r3, r4
 800acf6:	d036      	beq.n	800ad66 <scalbn+0x86>
 800acf8:	4b39      	ldr	r3, [pc, #228]	; (800ade0 <scalbn+0x100>)
 800acfa:	4629      	mov	r1, r5
 800acfc:	ee10 0a10 	vmov	r0, s0
 800ad00:	2200      	movs	r2, #0
 800ad02:	f7f5 fcf9 	bl	80006f8 <__aeabi_dmul>
 800ad06:	4b37      	ldr	r3, [pc, #220]	; (800ade4 <scalbn+0x104>)
 800ad08:	429e      	cmp	r6, r3
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	da10      	bge.n	800ad32 <scalbn+0x52>
 800ad10:	a32b      	add	r3, pc, #172	; (adr r3, 800adc0 <scalbn+0xe0>)
 800ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad16:	e03a      	b.n	800ad8e <scalbn+0xae>
 800ad18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ad1c:	428a      	cmp	r2, r1
 800ad1e:	d10c      	bne.n	800ad3a <scalbn+0x5a>
 800ad20:	ee10 2a10 	vmov	r2, s0
 800ad24:	4620      	mov	r0, r4
 800ad26:	4629      	mov	r1, r5
 800ad28:	f7f5 fb30 	bl	800038c <__adddf3>
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	460d      	mov	r5, r1
 800ad30:	e019      	b.n	800ad66 <scalbn+0x86>
 800ad32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ad36:	460b      	mov	r3, r1
 800ad38:	3a36      	subs	r2, #54	; 0x36
 800ad3a:	4432      	add	r2, r6
 800ad3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ad40:	428a      	cmp	r2, r1
 800ad42:	dd08      	ble.n	800ad56 <scalbn+0x76>
 800ad44:	2d00      	cmp	r5, #0
 800ad46:	a120      	add	r1, pc, #128	; (adr r1, 800adc8 <scalbn+0xe8>)
 800ad48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad4c:	da1c      	bge.n	800ad88 <scalbn+0xa8>
 800ad4e:	a120      	add	r1, pc, #128	; (adr r1, 800add0 <scalbn+0xf0>)
 800ad50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad54:	e018      	b.n	800ad88 <scalbn+0xa8>
 800ad56:	2a00      	cmp	r2, #0
 800ad58:	dd08      	ble.n	800ad6c <scalbn+0x8c>
 800ad5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ad5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ad62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ad66:	ec45 4b10 	vmov	d0, r4, r5
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}
 800ad6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ad70:	da19      	bge.n	800ada6 <scalbn+0xc6>
 800ad72:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ad76:	429e      	cmp	r6, r3
 800ad78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ad7c:	dd0a      	ble.n	800ad94 <scalbn+0xb4>
 800ad7e:	a112      	add	r1, pc, #72	; (adr r1, 800adc8 <scalbn+0xe8>)
 800ad80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d1e2      	bne.n	800ad4e <scalbn+0x6e>
 800ad88:	a30f      	add	r3, pc, #60	; (adr r3, 800adc8 <scalbn+0xe8>)
 800ad8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8e:	f7f5 fcb3 	bl	80006f8 <__aeabi_dmul>
 800ad92:	e7cb      	b.n	800ad2c <scalbn+0x4c>
 800ad94:	a10a      	add	r1, pc, #40	; (adr r1, 800adc0 <scalbn+0xe0>)
 800ad96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d0b8      	beq.n	800ad10 <scalbn+0x30>
 800ad9e:	a10e      	add	r1, pc, #56	; (adr r1, 800add8 <scalbn+0xf8>)
 800ada0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ada4:	e7b4      	b.n	800ad10 <scalbn+0x30>
 800ada6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800adaa:	3236      	adds	r2, #54	; 0x36
 800adac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800adb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800adb4:	4620      	mov	r0, r4
 800adb6:	4b0c      	ldr	r3, [pc, #48]	; (800ade8 <scalbn+0x108>)
 800adb8:	2200      	movs	r2, #0
 800adba:	e7e8      	b.n	800ad8e <scalbn+0xae>
 800adbc:	f3af 8000 	nop.w
 800adc0:	c2f8f359 	.word	0xc2f8f359
 800adc4:	01a56e1f 	.word	0x01a56e1f
 800adc8:	8800759c 	.word	0x8800759c
 800adcc:	7e37e43c 	.word	0x7e37e43c
 800add0:	8800759c 	.word	0x8800759c
 800add4:	fe37e43c 	.word	0xfe37e43c
 800add8:	c2f8f359 	.word	0xc2f8f359
 800addc:	81a56e1f 	.word	0x81a56e1f
 800ade0:	43500000 	.word	0x43500000
 800ade4:	ffff3cb0 	.word	0xffff3cb0
 800ade8:	3c900000 	.word	0x3c900000

0800adec <_init>:
 800adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adee:	bf00      	nop
 800adf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adf2:	bc08      	pop	{r3}
 800adf4:	469e      	mov	lr, r3
 800adf6:	4770      	bx	lr

0800adf8 <_fini>:
 800adf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfa:	bf00      	nop
 800adfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adfe:	bc08      	pop	{r3}
 800ae00:	469e      	mov	lr, r3
 800ae02:	4770      	bx	lr
